(define-module
  (emacs packages melpa-generated)
  #:use-module
  (emacs build-system melpa)
  #:use-module
  (guix download)
  #:use-module
  (guix packages)
  #:use-module
  (gnu packages emacs-xyz))

(module-use-interfaces!
  (current-module)
  (module-uses
    (resolve-module '(gnu packages emacs-xyz))))

(define-public emacs-0blayout
  (package
    (name "emacs-0blayout")
    (version "20190703.527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/etu/0blayout-mode.git")
               (commit
                 "fd9a8f353dbd45b4628b5f84b8d8c2525ebf571d")))
        (sha256
          (base32
            "18jkq140s2hwgdxs5s13hprjmq2qnxnqhrmdiyrhvl176r3wbh37"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/etu/0blayout")
    (synopsis "Layout grouping with ease")
    (description
      "Documentation at https://melpa.org/#/0blayout")
    (license #f)))

(define-public emacs-0x0
  (package
    (name "emacs-0x0")
    (version "20210701.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/willvaughn/emacs-0x0.git")
               (commit
                 "63cd5eccc85e527f28e1acc89502a53245000428")))
        (sha256
          (base32
            "1cd0drlhi0lf1vmarcfl3vc7ldkymaj50dhqb1ajm7r0s5ps3asb"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/willvaughn/emacs-0x0")
    (synopsis "Upload sharing to 0x0.st")
    (description
      "Documentation at https://melpa.org/#/0x0")
    (license #f)))

(define-public emacs-0xc
  (package
    (name "emacs-0xc")
    (version "20201025.2105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/0xc.git")
               (commit
                 "eec4fb10b9288c0852f751cfb05d638664fa2411")))
        (sha256
          (base32
            "1s3jpnjb033siyi9jkychbbqxnh31k7h9prfx7hvs5zlddp15cqv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "http://github.com/AdamNiederer/0xc")
    (synopsis "Base conversion made easy")
    (description
      "Documentation at https://melpa.org/#/0xc")
    (license #f)))

(define-public emacs-2048-game
  (package
    (name "emacs-2048-game")
    (version "20200417.259")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/2048-game-"
               version
               ".el"))
        (sha256
          (base32
            "0ryz4xxhvm9fvflczdncmpfb3pb5pljp29ahdasjaf2f77d3xzm4"))))
    (build-system melpa-build-system)
    (home-page "https://hg.sr.ht/~zck/game-2048")
    (synopsis "play 2048 in Emacs")
    (description
      "Documentation at https://melpa.org/#/2048-game")
    (license #f)))

(define-public emacs-2bit
  (package
    (name "emacs-2bit")
    (version "20200926.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/2bit.el.git")
               (commit
                 "69b4ec1d6d2ad95c9e59dacb43224abbec7a8989")))
        (sha256
          (base32
            "086hxacbm2jjqak3b1dpnjhif2r3w3jvrrsg114224a26rwz49sm"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/2bit.el")
    (synopsis
      "Library for reading data from 2bit files")
    (description
      "Documentation at https://melpa.org/#/2bit")
    (license #f)))

(define-public emacs-4clojure
  (package
    (name "emacs-4clojure")
    (version "20210102.459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/4clojure.git")
               (commit
                 "6f494d3905284ccdd57aae3d8ac16fc7ab431596")))
        (sha256
          (base32
            "19mbfh504mli8mnf95xaych45nqnayrspymf5r80dky4jv43zzv8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/abend/4clojure.el")
    (synopsis
      "Open and evaluate 4clojure.com questions.")
    (description
      "Documentation at https://melpa.org/#/4clojure")
    (license #f)))

(define-public emacs-750words
  (package
    (name "emacs-750words")
    (version "20210701.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzamboni/750words-client.git")
               (commit
                 "0fed7621c04debad64ea6455455494d4e6eb03fa")))
        (sha256
          (base32
            "1qglbfdc6526aqsba93ngw1a6hp19lqx1wlxzzy9yvggbb02mii2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("750words.el")))
    (home-page
      "https://github.com/zzamboni/750words-client")
    (synopsis
      "Emacs integration and Org exporter for 750words.com")
    (description
      "Documentation at https://melpa.org/#/750words")
    (license #f)))

(define-public emacs-a
  (package
    (name "emacs-a")
    (version "20210929.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plexus/a.el.git")
               (commit
                 "9ad2d18252b729174fe22ed0b2b7670c88f60c31")))
        (sha256
          (base32
            "0zkv4xvw1jdsfxqqkxskl2l380gfs13n86hj4hhzrqf0sb6aymws"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/plexus/a.el")
    (synopsis "Associative data structure functions")
    (description
      "Documentation at https://melpa.org/#/a")
    (license #f)))

(define-public emacs-aa-edit-mode
  (package
    (name "emacs-aa-edit-mode")
    (version "20170119.320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/aa-edit-mode.git")
               (commit
                 "1dd801225b7ad3c23ad09698f5e77f0df7012a65")))
        (sha256
          (base32
            "17kxpyfprdyj96c4ivv8bxwyls69cgh2r3gwrgj6bwinbiszh9rr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-navi2ch))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing AA(S_JIS Art) and .mlt file")
    (description
      "Documentation at https://melpa.org/#/aa-edit-mode")
    (license #f)))

(define-public emacs-aas
  (package
    (name "emacs-aas")
    (version "20211208.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ymarco/auto-activating-snippets.git")
               (commit
                 "b1a436922ba06ab9e1a5cc222f1a4f25a7697231")))
        (sha256
          (base32
            "0alscwf2937ak2pzgl9jih7s9dya7kibl59qik4fy6xbq5h52v77"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ymarco/auto-activating-snippets")
    (synopsis "Snippet expansions mid-typing")
    (description
      "Documentation at https://melpa.org/#/aas")
    (license #f)))

(define-public emacs-abc-mode
  (package
    (name "emacs-abc-mode")
    (version "20210508.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkjunker/abc-mode.git")
               (commit
                 "80fa954787b57d14e21e19bd65e52abab1686f4a")))
        (sha256
          (base32
            "0x7y2r5kijzg33jqlwym8lw1ivx00j3g7lzbl171wzyy3qn15bk5"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing abc music files")
    (description
      "Documentation at https://melpa.org/#/abc-mode")
    (license #f)))

(define-public emacs-abgaben
  (package
    (name "emacs-abgaben")
    (version "20171119.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/akoehn/abgaben.git")
               (commit
                 "20d14830f07d66e2a04bcad1498a4a6fbf4b4451")))
        (sha256
          (base32
            "0apcbfaa70kgrpjjsfbr0lg9lcfiijpx5bms4sbzc606vlnxxn0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-f emacs-s))
    (home-page "http://arne.chark.eu/")
    (synopsis
      "review and correct assignments received by mail")
    (description
      "Documentation at https://melpa.org/#/abgaben")
    (license #f)))

(define-public emacs-abl-mode
  (package
    (name "emacs-abl-mode")
    (version "20210923.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/afroisalreadyinu/abl-mode.git")
               (commit
                 "fc0eeb780d22aa1aac337f06cc9b479c51600243")))
        (sha256
          (base32
            "1vv3p6fkp352chrjm7jwc3frifzfral1jyrkx4m8pfq0cyj2g197"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/afroisalreadyinu/abl-mode")
    (synopsis "Python TDD minor mode")
    (description
      "Documentation at https://melpa.org/#/abl-mode")
    (license #f)))

(define-public emacs-abridge-diff
  (package
    (name "emacs-abridge-diff")
    (version "20210519.322")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/abridge-diff.git")
               (commit
                 "85d0512e239f2ec2217da7f316a5aed350041fd9")))
        (sha256
          (base32
            "0ca375q90fg29c0y47s7ljb5ymwf8wnq6b8v375r06rkqvi7svdx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdtsmith/abridge-diff")
    (synopsis
      "Abridge long line-based diff hunks, including in magit")
    (description
      "Documentation at https://melpa.org/#/abridge-diff")
    (license #f)))

(define-public emacs-abyss-theme
  (package
    (name "emacs-abyss-theme")
    (version "20170808.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgrbyte/emacs-abyss-theme.git")
               (commit
                 "18791c6e8d9cc2b4815c9f08627a2e94fc0eeb14")))
        (sha256
          (base32
            "07z0djv7h3yrv4iw9n633j6dxzxb4nnzijsqkmz22ik6fbwxg5mh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mgrbyte/emacs-abyss-theme")
    (synopsis
      "A dark theme with contrasting colours.")
    (description
      "Documentation at https://melpa.org/#/abyss-theme")
    (license #f)))

(define-public emacs-ac-alchemist
  (package
    (name "emacs-ac-alchemist")
    (version "20150908.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-alchemist.git")
               (commit
                 "b1891c3d41aed83f61d78a609ea97be5cc2758d9")))
        (sha256
          (base32
            "19msfx3f3px1maj41bzh139s6sv2pjk9vm3bphn7758fqhzyin0f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-alchemist))
    (home-page
      "https://github.com/syohex/emacs-ac-alchemist")
    (synopsis "auto-complete source for alchemist")
    (description
      "Documentation at https://melpa.org/#/ac-alchemist")
    (license #f)))

(define-public emacs-ac-c-headers
  (package
    (name "emacs-ac-c-headers")
    (version "20200816.1007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/ac-c-headers.git")
               (commit
                 "67e1e86a48c9bed57bc7ce5ce2553ad203f5752e")))
        (sha256
          (base32
            "1yk0a4p1pi7jwv48rvzn4i2733kg5ffp0q5vgcq22f98pmzyk77f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page "http://zk-phi.gitub.io/")
    (synopsis "auto-complete source for C headers")
    (description
      "Documentation at https://melpa.org/#/ac-c-headers")
    (license #f)))

(define-public emacs-ac-capf
  (package
    (name "emacs-ac-capf")
    (version "20151101.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-capf.git")
               (commit
                 "17571dba0a8f98111f2ab758e9bea285b263781b")))
        (sha256
          (base32
            "0nyq34yq4jcp3p30ygma3iz1h0q551p33792byj76pa5ps09g1da"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-capf")
    (synopsis
      "auto-complete source with completion-at-point")
    (description
      "Documentation at https://melpa.org/#/ac-capf")
    (license #f)))

(define-public emacs-ac-cider
  (package
    (name "emacs-ac-cider")
    (version "20161006.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/ac-cider.git")
               (commit
                 "fa13e067dd9c8c76151c7d140a2803da1d109b84")))
        (sha256
          (base32
            "1pklmjldnm8bf34f5q8x983d1m72l3kf51ns9vh6z704mkhv658f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-auto-complete))
    (home-page
      "https://github.com/clojure-emacs/ac-cider")
    (synopsis
      "Clojure auto-complete sources using CIDER")
    (description
      "Documentation at https://melpa.org/#/ac-cider")
    (license #f)))

(define-public emacs-ac-clang
  (package
    (name "emacs-ac-clang")
    (version "20180710.546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yaruopooner/ac-clang.git")
               (commit
                 "3294b968eb1a8317049190940193f9da47c085ef")))
        (sha256
          (base32
            "160hda911vsc2zcs56560cpv7kj0966vjzwmc0md6fkz3wrj7w0n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-pos-tip
            emacs-yasnippet))
    (arguments
      '(#:files
        (:defaults "*.png" "build" "clang-server")))
    (home-page
      "https://github.com/yaruopooner/ac-clang")
    (synopsis
      "Auto Completion source by libclang for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/ac-clang")
    (license #f)))

(define-public emacs-ac-emmet
  (package
    (name "emacs-ac-emmet")
    (version "20131015.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/ac-emmet.git")
               (commit
                 "88f24876ee3b759978d4614a758280b5d512d543")))
        (sha256
          (base32
            "1lkhqmfkjga7qi4r1m7mjax3pyf9m6minsn57cbzm2z2kvkhq22g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emmet-mode emacs-auto-complete))
    (home-page "https://github.com/yasuyk/ac-emmet")
    (synopsis
      "auto-complete sources for emmet-mode's snippets")
    (description
      "Documentation at https://melpa.org/#/ac-emmet")
    (license #f)))

(define-public emacs-ac-emoji
  (package
    (name "emacs-ac-emoji")
    (version "20150823.711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-emoji.git")
               (commit
                 "40a639764eb654f1b4bb705c817b66032a26ff2b")))
        (sha256
          (base32
            "1gk84bv6w9lg5wrygd7cfab3h46j84k1dwmhzr7jay6n02q6y499"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-emoji")
    (synopsis "auto-complete source of Emoji")
    (description
      "Documentation at https://melpa.org/#/ac-emoji")
    (license #f)))

(define-public emacs-ac-etags
  (package
    (name "emacs-ac-etags")
    (version "20161001.1507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-etags.git")
               (commit
                 "7983e631c226fe0fa53af3b2d56bf4eca3d785ce")))
        (sha256
          (base32
            "1vvgcy5hybrip4jn4pj9r3fahr6rc70k28w5aw951h0x7g7laipr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-etags")
    (synopsis
      "etags/ctags completion source for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-etags")
    (license #f)))

(define-public emacs-ac-geiser
  (package
    (name "emacs-ac-geiser")
    (version "20200318.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xiaohanyu/ac-geiser.git")
               (commit
                 "93818c936ee7e2f1ba1b315578bde363a7d43d05")))
        (sha256
          (base32
            "00n2qa26yilaj837n1yp6lbqa4gf30nkkbvanl7m9ih7k48ssqmw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-geiser emacs-auto-complete))
    (home-page "unspecified")
    (synopsis "Auto-complete backend for geiser")
    (description
      "Documentation at https://melpa.org/#/ac-geiser")
    (license #f)))

(define-public emacs-ac-haskell-process
  (package
    (name "emacs-ac-haskell-process")
    (version "20150423.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-haskell-process.git")
               (commit
                 "0362d4323511107ec70e7165cb612f3ab01b712f")))
        (sha256
          (base32
            "0m33v9iy3y37sicfmpx7kvmn8v1a8k6cs7d0v9v5k93p4d5ila41"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "Haskell auto-complete source which uses the current haskell process")
    (description
      "Documentation at https://melpa.org/#/ac-haskell-process")
    (license #f)))

(define-public emacs-ac-helm
  (package
    (name "emacs-ac-helm")
    (version "20160319.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/ac-helm.git")
               (commit
                 "baf2b1e04bcffa835084389c0fab415f26efbf32")))
        (sha256
          (base32
            "1fyikdwn0gzng7pbmfg7zb7jphjv228776vsjc12j7g1aqz92n4l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-auto-complete emacs-popup))
    (home-page "unspecified")
    (synopsis "Helm interface for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-helm")
    (license #f)))

(define-public emacs-ac-html
  (package
    (name "emacs-ac-html")
    (version "20151005.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/ac-html.git")
               (commit
                 "668154cba123c321d1b07c2dc8b26d14092253b8")))
        (sha256
          (base32
            "0lz1a8a4bqxiw20jh65r7cg7jnid3vz4h8b7dkfcrzwn0agx8frw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-s
            emacs-f
            emacs-dash))
    (arguments
      '(#:files (:defaults "completion-data")))
    (home-page "https://github.com/cheunghy/ac-html")
    (synopsis
      "auto complete source for html tags and attributes")
    (description
      "Documentation at https://melpa.org/#/ac-html")
    (license #f)))

(define-public emacs-ac-inf-ruby
  (package
    (name "emacs-ac-inf-ruby")
    (version "20131115.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-inf-ruby.git")
               (commit
                 "ee53fc9c61950da9a96df3ff5ef186f9a9faf151")))
        (sha256
          (base32
            "13xgv1c4gr075gffq95njra7bw1fkb5yp3xdlh3qndzw4bpary1l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inf-ruby emacs-auto-complete))
    (home-page "unspecified")
    (synopsis
      "Enable auto-complete in inf-ruby sessions")
    (description
      "Documentation at https://melpa.org/#/ac-inf-ruby")
    (license #f)))

(define-public emacs-ac-ispell
  (package
    (name "emacs-ac-ispell")
    (version "20151101.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-ispell.git")
               (commit
                 "22bace7387e9012002a6a444922f75f9913077b0")))
        (sha256
          (base32
            "1cq73bdv3lkn8v3nx6aznygqaac9s5i7pvirl8wz9ib31hsgwpbk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-ispell")
    (synopsis
      "ispell completion source for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-ispell")
    (license #f)))

(define-public emacs-ac-js2
  (package
    (name "emacs-ac-js2")
    (version "20190101.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ScottyB/ac-js2.git")
               (commit
                 "2b56d09a16c1a0ce514cc1b85d64cb1be4502723")))
        (sha256
          (base32
            "11q4aaiqr4xnw5j0yqj35gc4a290az75qdyhadj09xr2j2jay35x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode emacs-skewer-mode))
    (arguments '(#:files ("*.js" "*.el")))
    (home-page "https://github.com/ScottyB/ac-js2")
    (synopsis
      "Auto-complete source for Js2-mode, with navigation")
    (description
      "Documentation at https://melpa.org/#/ac-js2")
    (license #f)))

(define-public emacs-ac-math
  (package
    (name "emacs-ac-math")
    (version "20141116.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/ac-math.git")
               (commit
                 "c012a8f620a48cb18db7d78995035d65eae28f11")))
        (sha256
          (base32
            "0p5cdaw9v8jgnmjqpb95bxy4khwbdgg19wzg8jkr2j2p55dpfbd6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-math-symbol-lists))
    (arguments '(#:files ("ac-math.el")))
    (home-page "https://github.com/vitoshka/ac-math")
    (synopsis
      "Auto-complete sources for input of mathematical symbols and latex tags")
    (description
      "Documentation at https://melpa.org/#/ac-math")
    (license #f)))

(define-public emacs-ac-mozc
  (package
    (name "emacs-ac-mozc")
    (version "20150227.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/igjit/ac-mozc.git")
               (commit
                 "4c6c8be4701010d9362184437c0f783e0335c631")))
        (sha256
          (base32
            "19cb8kq8gmrplkxil22ahvbyq5cng1l2vh2lrfiyqpjsap7zfjz5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-mozc))
    (home-page "https://github.com/igjit/ac-mozc")
    (synopsis
      "auto-complete sources for Japanese input using Mozc")
    (description
      "Documentation at https://melpa.org/#/ac-mozc")
    (license #f)))

(define-public emacs-ac-octave
  (package
    (name "emacs-ac-octave")
    (version "20180406.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/ac-octave.git")
               (commit
                 "fe0f931f2024f43de3c4fff4b1ace672413adeae")))
        (sha256
          (base32
            "1yj5fapbp79k88k1cxrmmf91fb0j6s4s7f2dhk2afcf7z83mqkwb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/coldnew/ac-octave")
    (synopsis "An auto-complete source for Octave")
    (description
      "Documentation at https://melpa.org/#/ac-octave")
    (license #f)))

(define-public emacs-ac-php
  (package
    (name "emacs-ac-php")
    (version "20200916.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "fc834dcc193e7168ffa0b3ae81ab3eefa4fd3c59")))
        (sha256
          (base32
            "08hnw5dbcs4ww2ir7ilnfc6r0b123alh4l8i1mzvng0h3mvmlhgq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ac-php-core
            emacs-auto-complete
            emacs-yasnippet))
    (arguments '(#:files ("ac-php.el")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "Auto Completion source for PHP.")
    (description
      "Documentation at https://melpa.org/#/ac-php")
    (license #f)))

(define-public emacs-ac-php-core
  (package
    (name "emacs-ac-php-core")
    (version "20211220.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "92d559309d0c7614e2ccc982002b7ff963f3c9dd")))
        (sha256
          (base32
            "0aidj0hz97qw8jpwcbdmhjqk8wsdls3jiq9j6bbrqh458j6p317h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-php-mode
            emacs-s
            emacs-f
            emacs-popup
            emacs-xcscope))
    (arguments
      '(#:files
        ("ac-php-comm-tags-data.el"
         "ac-php-core.el"
         "phpctags"
         "*.json")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "The core library of the ac-php")
    (description
      "Documentation at https://melpa.org/#/ac-php-core")
    (license #f)))

(define-public emacs-ac-racer
  (package
    (name "emacs-ac-racer")
    (version "20170114.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-racer.git")
               (commit
                 "4408c2d652dec0432e20c05e001db8222d778c6b")))
        (sha256
          (base32
            "01154kqzh3pjy57vxhv27nm69p85a1fwl7r95c7pzmzxgxigfz1p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-racer))
    (home-page
      "https://github.com/syohex/emacs-ac-racer")
    (synopsis "auto-complete source of racer")
    (description
      "Documentation at https://melpa.org/#/ac-racer")
    (license #f)))

(define-public emacs-ac-rtags
  (package
    (name "emacs-ac-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-rtags))
    (arguments '(#:files ("src/ac-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "auto-complete back-end for RTags")
    (description
      "Documentation at https://melpa.org/#/ac-rtags")
    (license #f)))

(define-public emacs-ac-skk
  (package
    (name "emacs-ac-skk")
    (version "20141230.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/ac-skk.el.git")
               (commit
                 "d25a265930430d080329789fb253d786c01dfa24")))
        (sha256
          (base32
            "1nvz0jfz4x99xc5ywspl8fdpyqns5zd0j7i4bwzlwplmy3qakjwm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-ddskk
            emacs-tinysegmenter))
    (home-page "https://github.com/myuhe/ac-skk.el")
    (synopsis
      "auto-complete-mode source for DDSKK a.k.a Japanese input method")
    (description
      "Documentation at https://melpa.org/#/ac-skk")
    (license #f)))

(define-public emacs-ac-slime
  (package
    (name "emacs-ac-slime")
    (version "20171027.2100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-slime.git")
               (commit
                 "6c80cb602ddad46486288f94ad7546396c6e4b1a")))
        (sha256
          (base32
            "11w1z653klghi6inv9n92cigz8m3c67j3r18mdk39inc3izwplkj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-slime))
    (home-page "https://github.com/purcell/ac-slime")
    (synopsis
      "An auto-complete source using slime completions")
    (description
      "Documentation at https://melpa.org/#/ac-slime")
    (license #f)))

(define-public emacs-ac-sly
  (package
    (name "emacs-ac-sly")
    (version "20170728.1027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/qoocku/ac-sly.git")
               (commit
                 "bf69c687c4ecf1994349d20c182e9b567399912e")))
        (sha256
          (base32
            "09g6v2yp3wl566488zsb79lklqpai9dgz6xwv1y5h6zkghxvkhpy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sly emacs-auto-complete))
    (home-page "https://github.com/qoocku/ac-sly")
    (synopsis
      "An auto-complete source using sly completions")
    (description
      "Documentation at https://melpa.org/#/ac-sly")
    (license #f)))

(define-public emacs-academic-phrases
  (package
    (name "emacs-academic-phrases")
    (version "20180723.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nashamri/academic-phrases.git")
               (commit
                 "25d9cf67feac6359cb213f061735e2679c84187f")))
        (sha256
          (base32
            "0m32jpg6n0azz2f4y57y92zfvzm54ankx5cm06gli2zw2v1218fw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-ht))
    (home-page
      "https://github.com/nashamri/academic-phrases")
    (synopsis
      "Bypass that mental block when writing your papers.")
    (description
      "Documentation at https://melpa.org/#/academic-phrases")
    (license #f)))

(define-public emacs-ace-flyspell
  (package
    (name "emacs-ace-flyspell")
    (version "20170309.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-flyspell.git")
               (commit
                 "538d4f8508d305262ba0228dfe7c819fb65b53c9")))
        (sha256
          (base32
            "1yplf5klgjjzx3cb1ihqb9f9cwn898l0vhasc3cwiqz6ldyq2na8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/cute-jumper/ace-flyspell")
    (synopsis
      "Jump to and correct spelling errors using `ace-jump-mode' and flyspell")
    (description
      "Documentation at https://melpa.org/#/ace-flyspell")
    (license #f)))

(define-public emacs-ace-isearch
  (package
    (name "emacs-ace-isearch")
    (version "20210830.746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tam17aki/ace-isearch.git")
               (commit
                 "8439136206a42e41ef95af923e0dc3bbd4fa306c")))
        (sha256
          (base32
            "00mqd02l3fx5jicjwm27xwmr98l3f8v08q4jfxdzh1cjqpi8c5pp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tam17aki/ace-isearch")
    (synopsis
      "A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper")
    (description
      "Documentation at https://melpa.org/#/ace-isearch")
    (license #f)))

(define-public emacs-ace-jump-buffer
  (package
    (name "emacs-ace-jump-buffer")
    (version "20171031.1550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/ace-jump-buffer.git")
               (commit
                 "0d335064230caf3efdd5a732e8fbd67e3948ed6a")))
        (sha256
          (base32
            "04rlg8mlx3kggn04krvi3zgx263j1ysbgfccawaarzixas2r9gd9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-dash))
    (home-page
      "https://github.com/waymondo/ace-jump-buffer")
    (synopsis
      "fast buffer switching extension to `avy'")
    (description
      "Documentation at https://melpa.org/#/ace-jump-buffer")
    (license #f)))

(define-public emacs-ace-jump-helm-line
  (package
    (name "emacs-ace-jump-helm-line")
    (version "20160918.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-jump-helm-line.git")
               (commit
                 "1483055255df3f8ae349f7520f05b1e43ea3ed37")))
        (sha256
          (base32
            "191a2g1if1jliikbxkpwmvlp4v1sp541j71xrlymili8ygm0idq5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-helm))
    (home-page
      "https://github.com/cute-jumper/ace-jump-helm-line")
    (synopsis
      "Ace-jump to a candidate in helm window")
    (description
      "Documentation at https://melpa.org/#/ace-jump-helm-line")
    (license #f)))

(define-public emacs-ace-jump-mode
  (package
    (name "emacs-ace-jump-mode")
    (version "20140616.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/winterTTr/ace-jump-mode.git")
               (commit
                 "8351e2df4fbbeb2a4003f2fb39f46d33803f3dac")))
        (sha256
          (base32
            "17axrgd99glnl6ma4ls3k01ysdqmiqr581wnrbsn3s4gp53mm2x6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/winterTTr/ace-jump-mode/")
    (synopsis
      "a quick cursor location minor mode for emacs")
    (description
      "Documentation at https://melpa.org/#/ace-jump-mode")
    (license #f)))

(define-public emacs-ace-jump-zap
  (package
    (name "emacs-ace-jump-zap")
    (version "20170717.1849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/ace-jump-zap.git")
               (commit
                 "52b5d4c6c73bd0fc833a0dcb4e803a5287d8cae8")))
        (sha256
          (base32
            "1iw90mk6hdrbskxgv67xj27qd26w5dlh4s6a6xqqsj8ld56nzbvr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ace-jump-mode emacs-dash))
    (home-page
      "https://github.com/waymondo/ace-jump-zap")
    (synopsis
      "Character zapping, `ace-jump-mode` style")
    (description
      "Documentation at https://melpa.org/#/ace-jump-zap")
    (license #f)))

(define-public emacs-ace-link
  (package
    (name "emacs-ace-link")
    (version "20210121.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ace-link.git")
               (commit
                 "e1b1c91b280d85fce2194fea861a9ae29e8b03dd")))
        (sha256
          (base32
            "190m4ikm9580gmd0yf9k7a7q9l7087zdm9gm1hv12wg8g8g6pzca"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page "https://github.com/abo-abo/ace-link")
    (synopsis "Quickly follow links")
    (description
      "Documentation at https://melpa.org/#/ace-link")
    (license #f)))

(define-public emacs-ace-mc
  (package
    (name "emacs-ace-mc")
    (version "20190206.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mm--/ace-mc.git")
               (commit
                 "6877880efd99e177e4e9116a364576def3da391b")))
        (sha256
          (base32
            "180licc7w5b6f42ifwvllbnmf3aq8cbr8jhkbk37lzick4sv10d2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ace-jump-mode
            emacs-multiple-cursors
            emacs-dash))
    (home-page "https://github.com/mm--/ace-mc")
    (synopsis
      "Add multiple cursors quickly using ace jump")
    (description
      "Documentation at https://melpa.org/#/ace-mc")
    (license #f)))

(define-public emacs-ace-pinyin
  (package
    (name "emacs-ace-pinyin")
    (version "20210827.355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-pinyin.git")
               (commit
                 "47662c0b05775ba353464b44c0f1a037c85e746e")))
        (sha256
          (base32
            "0qidfljvjqwyi5xvgr6hli45k1d4w8g5zn2mssyv9xzrslcigdzv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-avy emacs-pinyinlib))
    (home-page
      "https://github.com/cute-jumper/ace-pinyin")
    (synopsis
      "Jump to Chinese characters using avy or ace-jump-mode")
    (description
      "Documentation at https://melpa.org/#/ace-pinyin")
    (license #f)))

(define-public emacs-ace-window
  (package
    (name "emacs-ace-window")
    (version "20200606.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ace-window.git")
               (commit
                 "c7cb315c14e36fded5ac4096e158497ae974bec9")))
        (sha256
          (base32
            "06zkb5v6h0gwrqx7xiz2vlzf13kzf3z79xc5jhv2j73rqcajjy9v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/abo-abo/ace-window")
    (synopsis "Quickly switch windows.")
    (description
      "Documentation at https://melpa.org/#/ace-window")
    (license #f)))

(define-public emacs-achievements
  (package
    (name "emacs-achievements")
    (version "20150531.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gvol/emacs-achievements.git")
               (commit
                 "c8275ee492d56255999d58f2988129ab29145182")))
        (sha256
          (base32
            "14p9lmnrpsnx94ycvsqmfxnk5kws0cman4a6fbnikl35ma8zc01x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-keyfreq))
    (home-page "unspecified")
    (synopsis "Achievements for emacs usage.")
    (description
      "Documentation at https://melpa.org/#/achievements")
    (license #f)))

(define-public emacs-acme-theme
  (package
    (name "emacs-acme-theme")
    (version "20210430.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianyepan/acme-emacs-theme.git")
               (commit
                 "7c408d111c5e451ecb8fdd5f76cf7d8074aec793")))
        (sha256
          (base32
            "16qxspzlf0bvw36ff4qnrn5p7mc5sf923ba0ar04cr87bfqgyak4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianpan870102/acme-emacs-theme")
    (synopsis
      "A color theme based on Acme & Sam from Plan 9")
    (description
      "Documentation at https://melpa.org/#/acme-theme")
    (license #f)))

(define-public emacs-actionscript-mode
  (package
    (name "emacs-actionscript-mode")
    (version "20180527.1701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/austinhaas/actionscript-mode.git")
               (commit
                 "75639cc7fe85392b5671a1e94dcedb409a949cae")))
        (sha256
          (base32
            "1bhzskg09pkiqdzlzlaf2p48vr2kqrzcmakyzllm4rin1g4j2wrq"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("actionscript-mode.el")))
    (home-page "unspecified")
    (synopsis
      "A simple mode for editing Actionscript 3 files")
    (description
      "Documentation at https://melpa.org/#/actionscript-mode")
    (license #f)))

(define-public emacs-activity-watch-mode
  (package
    (name "emacs-activity-watch-mode")
    (version "20211018.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pauldub/activity-watch-mode.git")
               (commit
                 "89902927023781e23f09d033a780fbed546c53e1")))
        (sha256
          (base32
            "1y0k282nsn6y18ai8vky3yy78ay2a6lgv5lhrmh0xl0r8hydv21g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/pauldub/activity-watch-mode")
    (synopsis "Automatic time tracking extension.")
    (description
      "Documentation at https://melpa.org/#/activity-watch-mode")
    (license #f)))

(define-public emacs-adafruit-wisdom
  (package
    (name "emacs-adafruit-wisdom")
    (version "20200217.306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/adafruit-wisdom.el.git")
               (commit
                 "a9314331ba6ea846be9e1f7bded1e2e0ab70cd8e")))
        (sha256
          (base32
            "1mra53dnzz3n8ya9dd0fz8gr19f6jcfsl917xz81awnmxj38nbhq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/gonewest818/adafruit-wisdom.el")
    (synopsis "Get/display adafruit.com quotes")
    (description
      "Documentation at https://melpa.org/#/adafruit-wisdom")
    (license #f)))

(define-public emacs-add-hooks
  (package
    (name "emacs-add-hooks")
    (version "20171217.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickmccurdy/add-hooks.git")
               (commit
                 "1845137703461fc44bd77cf24014ba58f19c369d")))
        (sha256
          (base32
            "02s9mv26ycypn4qfshrh17v1hsys2q9vffxj3g4lgq0lykplvkkm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickmccurdy/add-hooks")
    (synopsis "Functions for setting multiple hooks")
    (description
      "Documentation at https://melpa.org/#/add-hooks")
    (license #f)))

(define-public emacs-add-node-modules-path
  (package
    (name "emacs-add-node-modules-path")
    (version "20210305.312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/codesuki/add-node-modules-path.git")
               (commit
                 "7d9be65b3be062842b7ead862dec15d6f25db4a2")))
        (sha256
          (base32
            "0za0jjba2qdpqdkcp5bch6ma8crf0vsi7bxj2rasn2icqgxyn89m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/codesuki/add-node-modules-path")
    (synopsis "Add node_modules to your exec-path")
    (description
      "Documentation at https://melpa.org/#/add-node-modules-path")
    (license #f)))

(define-public emacs-addressbook-bookmark
  (package
    (name "emacs-addressbook-bookmark")
    (version "20190612.1638")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/addressbook-bookmark.git")
               (commit
                 "d8e502fc2f3d3ab1508ce9e50ebf8a9addc6e5b3")))
        (sha256
          (base32
            "1bgx4vn7q3nqfawip2m4a8wdm91vjnz1nv8957c748707x7rlkrr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/addressbook-bookmark")
    (synopsis
      "An address book based on Standard Emacs bookmarks.")
    (description
      "Documentation at https://melpa.org/#/addressbook-bookmark")
    (license #f)))

(define-public emacs-ado-mode
  (package
    (name "emacs-ado-mode")
    (version "20210510.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/louabill/ado-mode.git")
               (commit
                 "4832a51c2e94e969a99817ccdd13d656344d0afc")))
        (sha256
          (base32
            "0iyijlyj1d7k5m9mk3blb4wlam652487jhayrmgfy25snqd8b0sm"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("lisp/*.el" "scripts" "templates")))
    (home-page
      "https://github.com/louabill/ado-mode")
    (synopsis
      "Major mode for editing Stata-related files")
    (description
      "Documentation at https://melpa.org/#/ado-mode")
    (license #f)))

(define-public emacs-adoc-mode
  (package
    (name "emacs-adoc-mode")
    (version "20160314.2130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sensorflo/adoc-mode.git")
               (commit
                 "745884359a1b8826ede2c4cfd2f0b5478953ac40")))
        (sha256
          (base32
            "199da15f6p84809z33w3m35lrk9bgx8qpgnxsxgisli373mpzvd8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markup-faces))
    (arguments '(#:files ("adoc-mode.el")))
    (home-page
      "https://github.com/sensorflo/adoc-mode/wiki")
    (synopsis
      "a major-mode for editing AsciiDoc files in Emacs")
    (description
      "Documentation at https://melpa.org/#/adoc-mode")
    (license #f)))

(define-public emacs-aes
  (package
    (name "emacs-aes")
    (version "20211204.2348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sauermann/emacs-aes.git")
               (commit
                 "c9cd12d6c1dbc18603eb4703276132cea59d5c78")))
        (sha256
          (base32
            "1k5qq187xz5dbbgsrjsk3ff0dz5v328cn9iwn5rvn8a34akyal81"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Sauermann/emacs-aes")
    (synopsis "Implementation of AES")
    (description
      "Documentation at https://melpa.org/#/aes")
    (license #f)))

(define-public emacs-affe
  (package
    (name "emacs-affe")
    (version "20211221.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/affe.git")
               (commit
                 "425e46cbc44d532b5bcacd90ad55b784834e536b")))
        (sha256
          (base32
            "0r51mf9s2cbh3qq4y04rc4b5x6b4qfqd5n5ix8xsq5x154ivmfcj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page "https://github.com/minad/affe")
    (synopsis "Asynchronous Fuzzy Finder for Emacs")
    (description
      "Documentation at https://melpa.org/#/affe")
    (license #f)))

(define-public emacs-afternoon-theme
  (package
    (name "emacs-afternoon-theme")
    (version "20140104.1859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/emacs-afternoon-theme.git")
               (commit
                 "89b1d778a1f8b385775c122f2bd1c62f0fbf931a")))
        (sha256
          (base32
            "19d5d6qs5nwmpf26rsb86ranb5p4236qp7p2b4i88cimcmzspylb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/osener/emacs-afternoon-theme")
    (synopsis
      "Dark color theme with a deep blue background")
    (description
      "Documentation at https://melpa.org/#/afternoon-theme")
    (license #f)))

(define-public emacs-ag
  (package
    (name "emacs-ag")
    (version "20201031.2202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/ag.el.git")
               (commit
                 "ed7e32064f92f1315cecbfc43f120bbc7508672c")))
        (sha256
          (base32
            "1lm51j99h1wn6djqjc5dwba6kvqwl8vvwwq7p0vdr250l470k90n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/Wilfred/ag.el")
    (synopsis
      "A front-end for ag ('the silver searcher'), the C ack replacement.")
    (description
      "Documentation at https://melpa.org/#/ag")
    (license #f)))

(define-public emacs-agda-editor-tactics
  (package
    (name "emacs-agda-editor-tactics")
    (version "20211024.2357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/next-700-module-systems.git")
               (commit
                 "c401c0c1ec0ad38bb5ee1636504e0e531b9e34b9")))
        (sha256
          (base32
            "0y5dp3i97w96dy5p5yk4gxs4db9n260sn1q2vp1j6afi30mn2mb9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/alhassy/next-700-module-systems")
    (synopsis
      "An editor tactic to produce Σ-types from Agda records")
    (description
      "Documentation at https://melpa.org/#/agda-editor-tactics")
    (license #f)))

(define-public emacs-aggressive-fill-paragraph
  (package
    (name "emacs-aggressive-fill-paragraph")
    (version "20180910.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode.git")
               (commit
                 "4a620e62b5e645a48b0a818bf4eb19daea4977df")))
        (sha256
          (base32
            "0gy8x78av6z6hp5jccz7pnh6n0fnpfs5vfhfbxggj2qjfyxbvw1r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode")
    (synopsis
      "A mode to automatically keep paragraphs filled")
    (description
      "Documentation at https://melpa.org/#/aggressive-fill-paragraph")
    (license #f)))

(define-public emacs-aggressive-indent
  (package
    (name "emacs-aggressive-indent")
    (version "20210701.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/aggressive-indent-mode.git")
               (commit
                 "cb416faf61c46977c06cf9d99525b04dc109a33c")))
        (sha256
          (base32
            "1mlvdxs4jbxxfj57h2hc6yapgz4zzqj80k4psds116kpp0y2r5ja"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/aggressive-indent-mode")
    (synopsis
      "Minor mode to aggressively keep your code always indented")
    (description
      "Documentation at https://melpa.org/#/aggressive-indent")
    (license #f)))

(define-public emacs-agtags
  (package
    (name "emacs-agtags")
    (version "20200730.116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vietor/agtags.git")
               (commit
                 "d80c6f61dee74040c07b7010d48cab1df13a3abf")))
        (sha256
          (base32
            "05jkkh7m126j24ayh85bk10s4z3lsy1s6n217qb7hlgfl8y5fqdj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vietor/agtags")
    (synopsis "A frontend to GNU Global")
    (description
      "Documentation at https://melpa.org/#/agtags")
    (license #f)))

(define-public emacs-ah
  (package
    (name "emacs-ah")
    (version "20201213.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/ah.git")
               (commit
                 "869219e7853510aeb00af3580aede0e5d49b324a")))
        (sha256
          (base32
            "02i6nrkbqf1bj2m4h81p5z1mi9lm92g9vm1mi6qny83zs64m2607"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/takaxp/ah")
    (synopsis "Additional hooks")
    (description
      "Documentation at https://melpa.org/#/ah")
    (license #f)))

(define-public emacs-ahg
  (package
    (name "emacs-ahg")
    (version "20210412.847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/agriggio/ahg")
               (commit
                 "77bc2a628df006dcd2dc359ac12acdf8091a1356")))
        (sha256
          (base32
            "1wmvz9d40aznqh2y078v8k7n3l66m48vnf873vifi8rwg6158kqh"))))
    (build-system melpa-build-system)
    (home-page "https://bitbucket.org/agriggio/ahg")
    (synopsis
      "Alberto's Emacs interface for Mercurial (Hg)")
    (description
      "Documentation at https://melpa.org/#/ahg")
    (license #f)))

(define-public emacs-ahk-mode
  (package
    (name "emacs-ahk-mode")
    (version "20200412.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralesi/ahk-mode.git")
               (commit
                 "729007b5f22a49f5187ff47fca18c0d674e73047")))
        (sha256
          (base32
            "0989iva0igmd3y61hihwnc7mhn11midimrnbpvq7d062iy7g4vaw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ralesi/ahk-mode")
    (synopsis
      "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)")
    (description
      "Documentation at https://melpa.org/#/ahk-mode")
    (license #f)))

(define-public emacs-ahungry-theme
  (package
    (name "emacs-ahungry-theme")
    (version "20180131.328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/color-theme-ahungry.git")
               (commit
                 "a038d91ec593d1f1b19ca66a0576d59bbc24c523")))
        (sha256
          (base32
            "0f86xp7l8bv4z5dgf3pamjgqyiq3kfx9gbi9wcw0m6lbza8db15a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ahungry-theme.el")))
    (home-page
      "https://github.com/ahungry/color-theme-ahungry")
    (synopsis
      "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry).")
    (description
      "Documentation at https://melpa.org/#/ahungry-theme")
    (license #f)))

(define-public emacs-aio
  (package
    (name "emacs-aio")
    (version "20200610.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacs-aio.git")
               (commit
                 "da93523e235529fa97d6f251319d9e1d6fc24a41")))
        (sha256
          (base32
            "0hnxbz5pxlrgxhjr5gnhf06qwg67g5pd87xkp0smmagsh18pnf76"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("aio.el" "README.md" "UNLICENSE")))
    (home-page "https://github.com/skeeto/emacs-aio")
    (synopsis "async/await for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/aio")
    (license #f)))

(define-public emacs-airline-themes
  (package
    (name "emacs-airline-themes")
    (version "20211214.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AnthonyDiGirolamo/airline-themes.git")
               (commit
                 "6bd102e49a7d87af1a72eb86e953991ff7bc954e")))
        (sha256
          (base32
            "0yrkbg4wwbp2rm60gmsalz7vrrklw908m6ws66j611z6h6wgmj48"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page
      "http://github.com/AnthonyDiGirolamo/airline-themes")
    (synopsis
      "vim-airline themes for emacs powerline")
    (description
      "Documentation at https://melpa.org/#/airline-themes")
    (license #f)))

(define-public emacs-airplay
  (package
    (name "emacs-airplay")
    (version "20130212.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gongo/airplay-el.git")
               (commit
                 "bd690aafcae3a887946e1bba8327597932d964ad")))
        (sha256
          (base32
            "1lxpfswp1bjrz192px79f155dycf2kazpr7dfrcr1gyshlgxkpf7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-simple-httpd
            emacs-deferred))
    (home-page "https://github.com/gongo/airplay-el")
    (synopsis "Airplay bindings to Emacs")
    (description
      "Documentation at https://melpa.org/#/airplay")
    (license #f)))

(define-public emacs-alan-mode
  (package
    (name "emacs-alan-mode")
    (version "20210916.1135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alan-platform/AlanForEmacs.git")
               (commit
                 "217ffe99e3acf7d545827605ec95434e392a9f5f")))
        (sha256
          (base32
            "09wd1k3hnf1hri8c9m27g8cnqka59szr2anfkkh35s52bynvpxf2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck emacs-s))
    (home-page
      "https://github.com/Kjerner/AlanForEmacs")
    (synopsis "Major mode for editing Alan files")
    (description
      "Documentation at https://melpa.org/#/alan-mode")
    (license #f)))

(define-public emacs-alarm-clock
  (package
    (name "emacs-alarm-clock")
    (version "20191204.716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wlemuel/alarm-clock.git")
               (commit
                 "644f331071f8b09a898fae490541908b5054d2e6")))
        (sha256
          (base32
            "0yf2mikpxnfl673rv0w7xp1cvlkgvlmzgaixva3ppz6f0wg3vgz6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (arguments '(#:files (:defaults "*.mp3")))
    (home-page
      "https://github.com/wlemuel/alarm-clock")
    (synopsis "Alarm Clock")
    (description
      "Documentation at https://melpa.org/#/alarm-clock")
    (license #f)))

(define-public emacs-alchemist
  (package
    (name "emacs-alchemist")
    (version "20180312.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/alchemist.el.git")
               (commit
                 "6f99367511ae209f8fe2c990779764bbb4ccb6ed")))
        (sha256
          (base32
            "12f95rwxs11sqf1w9pnf6cxc2lh2jz4nqkq33p8b5yamnl8cq9kg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elixir-mode
            emacs-dash
            emacs-company
            emacs-pkg-info
            emacs-s))
    (arguments
      '(#:files (:defaults "*.exs" "alchemist-server")))
    (home-page
      "http://www.github.com/tonini/alchemist.el")
    (synopsis
      "Elixir tooling integration into Emacs")
    (description
      "Documentation at https://melpa.org/#/alchemist")
    (license #f)))

(define-public emacs-alda-mode
  (package
    (name "emacs-alda-mode")
    (version "20210705.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jgkamat/alda-mode.git")
               (commit
                 "4de011d572e958a377fb16daae05a1b411f0c8ad")))
        (sha256
          (base32
            "1x4apig2hrvvy6pjciklmz5afpq5l4rmfjahc2wvyzs79abh0icx"))))
    (build-system melpa-build-system)
    (home-page "http://gitlab.com/jgkamat/alda-mode")
    (synopsis "An Alda major mode")
    (description
      "Documentation at https://melpa.org/#/alda-mode")
    (license #f)))

(define-public emacs-alect-themes
  (package
    (name "emacs-alect-themes")
    (version "20211022.1651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/alect-themes.git")
               (commit
                 "89560047934c236d05ea6b911c0c63702a8e06f3")))
        (sha256
          (base32
            "190clnm5x4hpzrq2wp18vxg6614ly3ciyv0y1sm9rfr9w9z5i0ya"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/alect-themes")
    (synopsis
      "Configurable light, dark and black themes for Emacs 24 or later")
    (description
      "Documentation at https://melpa.org/#/alect-themes")
    (license #f)))

(define-public emacs-alectryon
  (package
    (name "emacs-alectryon")
    (version "20211018.321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/alectryon.git")
               (commit
                 "1bcc7c68abcd6471604c9b7fe7f85b0878bbd435")))
        (sha256
          (base32
            "10kpdra8m015xsh7w25v18zd62csayji0p5jqgif20bw6g8g20a7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("etc/elisp/*")))
    (home-page
      "https://github.com/cpitclaudel/alectryon")
    (synopsis
      "Toggle between Coq and reStructuredText")
    (description
      "Documentation at https://melpa.org/#/alectryon")
    (license #f)))

(define-public emacs-alert
  (package
    (name "emacs-alert")
    (version "20200303.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/alert.git")
               (commit
                 "7046393272686c7a1a9b3e7f7b1d825d2e5250a6")))
        (sha256
          (base32
            "1s93ijkax0s78qn79c364ainmq7jq4gc95akl9wra642ql6hz3iq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gntp emacs-log4e))
    (home-page "https://github.com/jwiegley/alert")
    (synopsis
      "Growl-style notification system for Emacs")
    (description
      "Documentation at https://melpa.org/#/alert")
    (license #f)))

(define-public emacs-alert-termux
  (package
    (name "emacs-alert-termux")
    (version "20181119.951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gergelypolonkai/alert-termux.git")
               (commit
                 "47c414285c2f5971f3be52aaf0a4066ea6989238")))
        (sha256
          (base32
            "1gxw730b865zlaz0fdh95y7jhfwjpc3j2pkw0s3zz2xah9y0751b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gergelypolonkai/alert-termux")
    (synopsis "alert.el notifications on Termux")
    (description
      "Documentation at https://melpa.org/#/alert-termux")
    (license #f)))

(define-public emacs-align-cljlet
  (package
    (name "emacs-align-cljlet")
    (version "20160112.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gstamp/align-cljlet.git")
               (commit
                 "602d72a7ad52788a0265e3c6da519464a98166b8")))
        (sha256
          (base32
            "0l2rgs0rd4nmv4v7m10zhf2znzfvdifv1vlhpa3zbppg0fj8zph1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "https://github.com/gstamp/align-cljlet")
    (synopsis "Space align various Clojure forms")
    (description
      "Documentation at https://melpa.org/#/align-cljlet")
    (license #f)))

(define-public emacs-all-the-icons
  (package
    (name "emacs-all-the-icons")
    (version "20211225.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/all-the-icons.el.git")
               (commit
                 "6d48bc9e970ab559bc35a125c55fd83732595706")))
        (sha256
          (base32
            "1iaw0j0z59zy181k7j14x5badd445f83g8daq3krahc4wd7cz55z"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "data")))
    (home-page
      "https://github.com/domtronn/all-the-icons.el")
    (synopsis
      "A library for inserting Developer icons")
    (description
      "Documentation at https://melpa.org/#/all-the-icons")
    (license #f)))

(define-public emacs-all-the-icons-completion
  (package
    (name "emacs-all-the-icons-completion")
    (version "20211009.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iyefrat/all-the-icons-completion.git")
               (commit
                 "a0f34d68cc12330ab3992a7521f9caa1de3b8470")))
        (sha256
          (base32
            "18dd37p1vh8ixc2q07jqwzpc82qq31m89nzps192pdgkfffhdp8r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/iyefrat/all-the-icons-completion")
    (synopsis "Add icons to completion candidates")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-completion")
    (license #f)))

(define-public emacs-all-the-icons-dired
  (package
    (name "emacs-all-the-icons-dired")
    (version "20211007.1729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/all-the-icons-dired.git")
               (commit
                 "5e9b097f9950cc9f86de922b07903a4e5fefc733")))
        (sha256
          (base32
            "0p09rdq97hshg9gaivsqz9zvi2ba2p1a2ja1i8z6f896xv5jqs98"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/wyuenho/all-the-icons-dired")
    (synopsis
      "Shows icons for each file in dired mode")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-dired")
    (license #f)))

(define-public emacs-all-the-icons-gnus
  (package
    (name "emacs-all-the-icons-gnus")
    (version "20180511.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/all-the-icons-gnus.git")
               (commit
                 "27f78996da0725943bcfb2d18038e6f7bddfa9c7")))
        (sha256
          (base32
            "0yi3nbhx7cdxq2192kh5ra2n0a3qg20p342prz3a0bm3w7q2ym11"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-all-the-icons))
    (home-page "unspecified")
    (synopsis "Shows icons for in Gnus")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-gnus")
    (license #f)))

(define-public emacs-all-the-icons-ibuffer
  (package
    (name "emacs-all-the-icons-ibuffer")
    (version "20210927.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/all-the-icons-ibuffer.git")
               (commit
                 "f689582a413ba5bb722067ea470829819e1f1131")))
        (sha256
          (base32
            "1r4v86jgp656cs1mxxsb30i1kwka29nzfri151bjrnbyy0z99qrg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/seagle0128/all-the-icons-ibuffer")
    (synopsis
      "Display icons for all buffers in ibuffer")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ibuffer")
    (license #f)))

(define-public emacs-all-the-icons-ivy
  (package
    (name "emacs-all-the-icons-ivy")
    (version "20190508.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/all-the-icons-ivy.git")
               (commit
                 "a70cbfa1effe36efc946a823a580cec686d5e88d")))
        (sha256
          (base32
            "17h7gscrvdi9rygagwzcqzbw6dbfvwmv7jbi8pjkj1c06p3kbq8i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons emacs-ivy))
    (home-page "unspecified")
    (synopsis
      "Shows icons while using ivy and counsel")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ivy")
    (license #f)))

(define-public emacs-all-the-icons-ivy-rich
  (package
    (name "emacs-all-the-icons-ivy-rich")
    (version "20211221.1411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/all-the-icons-ivy-rich.git")
               (commit
                 "bb302919160aef69b5841027418b6bcc8617cc67")))
        (sha256
          (base32
            "0d7fp54msj4w65wc1yd38nzhdjj1nn1nhrsxkg2n5x2xc75ap6c7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy-rich emacs-all-the-icons))
    (home-page
      "https://github.com/seagle0128/all-the-icons-ivy-rich")
    (synopsis "Better experience with icons for ivy")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ivy-rich")
    (license #f)))

(define-public emacs-almost-mono-themes
  (package
    (name "emacs-almost-mono-themes")
    (version "20210306.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cryon/almost-mono-themes.git")
               (commit
                 "a7dc21078e25dab2b054d64e5b40ecce2878edb2")))
        (sha256
          (base32
            "12q9wddkynl90hl8vcy69hwl2g9flfz7r4fsp81bwc3vv130s7cg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cryon/almost-mono-themes")
    (synopsis "Almost monochromatic color themes")
    (description
      "Documentation at https://melpa.org/#/almost-mono-themes")
    (license #f)))

(define-public emacs-alsamixer
  (package
    (name "emacs-alsamixer")
    (version "20191002.1133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/alsamixer-el.git")
               (commit
                 "1bdb99e433acd38685f05408562746cfbf2bc820")))
        (sha256
          (base32
            "0c40vycphv5nf374rp8pnzvi50vlmgab3wrdq92hyprjw76gwxhk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/alsamixer-el")
    (synopsis "Functions to call out to amixer.")
    (description
      "Documentation at https://melpa.org/#/alsamixer")
    (license #f)))

(define-public emacs-alt-codes
  (package
    (name "emacs-alt-codes")
    (version "20200723.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/alt-codes.git")
               (commit
                 "fb8550cb690b0ec954968afc7e8e953fd6859cdb")))
        (sha256
          (base32
            "1flw5msh1sda3ymkkg8xcgixpa5jgm2i1ligna5h501xbybnk1iz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/alt-codes")
    (synopsis "Insert alt codes using meta key")
    (description
      "Documentation at https://melpa.org/#/alt-codes")
    (license #f)))

(define-public emacs-ameba
  (package
    (name "emacs-ameba")
    (version "20200103.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-ameba/ameba.el.git")
               (commit
                 "0c4925ae0e998818326adcb47ed27ddf9761c7dc")))
        (sha256
          (base32
            "0jh0pfyqdks9xk43765vgm4569a8ny01pk3gy2p3vr5gdgfdm4a3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ameba.el")))
    (home-page
      "https://github.com/crystal-ameba/ameba.el")
    (synopsis "An interface to Crystal Ameba linter")
    (description
      "Documentation at https://melpa.org/#/ameba")
    (license #f)))

(define-public emacs-ammonite-term-repl
  (package
    (name "emacs-ammonite-term-repl")
    (version "20200416.559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/ammonite-term-repl.git")
               (commit
                 "b552fe21977e005c1c460bf6607557e67241a6b6")))
        (sha256
          (base32
            "0g6ldvzcm6arm6hxiz1y168mj73kipgbjzxciif2b4sd3z7wpnp6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-scala-mode))
    (home-page
      "https://github.com/zwild/ammonite-term-repl")
    (synopsis "Scala Ammonite REPL in term mode.")
    (description
      "Documentation at https://melpa.org/#/ammonite-term-repl")
    (license #f)))

(define-public emacs-ample-regexps
  (package
    (name "emacs-ample-regexps")
    (version "20200508.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/immerrr/ample-regexps.el.git")
               (commit
                 "153969ce547afe410b8986f01c9ed4087c9cd20b")))
        (sha256
          (base32
            "0dkp7bcd7h2ds40wyszy11nmh7c2jxrwy04ayz7pbxh53ir7s2k0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "ample regular expressions for Emacs")
    (description
      "Documentation at https://melpa.org/#/ample-regexps")
    (license #f)))

(define-public emacs-ample-theme
  (package
    (name "emacs-ample-theme")
    (version "20180207.1745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/ample-theme.git")
               (commit
                 "f5a163626e04abda2d3c168f703c3f330f302a7c")))
        (sha256
          (base32
            "1z08mdl3i4nfs4ln64sks3b4vbir4r8czscrdqyvq4izr6j05j2f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jordonbiondo/ample-theme")
    (synopsis "Calm Dark Theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/ample-theme")
    (license #f)))

(define-public emacs-ample-zen-theme
  (package
    (name "emacs-ample-zen-theme")
    (version "20150119.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mjwall/ample-zen.git")
               (commit
                 "b277bb7abd4b6624e8d59f02474b79af50a007bd")))
        (sha256
          (base32
            "18z9jl5d19a132k6g1dvwqfbbdh5cx66b2qxlcjsfiqxlxglc2sa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mjwall/ample-zen")
    (synopsis "AmpleZen Theme for Emacs 24")
    (description
      "Documentation at https://melpa.org/#/ample-zen-theme")
    (license #f)))

(define-public emacs-amread-mode
  (package
    (name "emacs-amread-mode")
    (version "20200623.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/amread-mode.git")
               (commit
                 "7b1ed6c8aea409e2dce4a3b59f304d716a8efab7")))
        (sha256
          (base32
            "12hcgkznf1l4db8y0q33v735b5iin8iycc5s0di46ichxcjr0b7x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stardiviner/amread-mode")
    (synopsis
      "A minor mode helper user speed-reading")
    (description
      "Documentation at https://melpa.org/#/amread-mode")
    (license #f)))

(define-public emacs-amsreftex
  (package
    (name "emacs-amsreftex")
    (version "20201004.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/franburstall/amsreftex.git")
               (commit
                 "46bc6683e904e898de8bae831df9106cf8881163")))
        (sha256
          (base32
            "07464aijqx7hcksrl522586b48x614sxvjcxdhgz07pipd47r08i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/franburstall/amsreftex")
    (synopsis
      "Add amsrefs bibliography support for reftex")
    (description
      "Documentation at https://melpa.org/#/amsreftex")
    (license #f)))

(define-public emacs-amx
  (package
    (name "emacs-amx")
    (version "20210305.118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/amx.git")
               (commit
                 "37f9c7ae55eb0331b27200fb745206fc58ceffc0")))
        (sha256
          (base32
            "0h1cxqqf0hixh25j679r57bq9dv0b20icf268wbnsim5xp88ngf8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/DarwinAwardWinner/amx/")
    (synopsis "Alternative M-x with extra features.")
    (description
      "Documentation at https://melpa.org/#/amx")
    (license #f)))

(define-public emacs-anaconda-mode
  (package
    (name "emacs-anaconda-mode")
    (version "20211122.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/anaconda-mode.git")
               (commit
                 "cbea0fb3182321d34ff93981c5a59f8dd72d82a5")))
        (sha256
          (base32
            "0ajmqa60avwmlx9c63rirfb5mjqhbcxf2x15mnxr6a1rlzcylxg6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pythonic emacs-dash emacs-s emacs-f))
    (arguments
      '(#:files (:defaults "anaconda-mode.py")))
    (home-page
      "https://github.com/proofit404/anaconda-mode")
    (synopsis
      "Code navigation, documentation lookup and completion for Python")
    (description
      "Documentation at https://melpa.org/#/anaconda-mode")
    (license #f)))

(define-public emacs-anakondo
  (package
    (name "emacs-anakondo")
    (version "20210221.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/didibus/anakondo.git")
               (commit
                 "c48518560815c49d8d78fb9069906d17e883385e")))
        (sha256
          (base32
            "1fzsqd150gpmrj8kz3zy9cd78x9vank7ra720mljhyf04z0h1mj6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/didibus/anakondo")
    (synopsis
      "Adds clj-kondo based Clojure[Script] editing facilities")
    (description
      "Documentation at https://melpa.org/#/anakondo")
    (license #f)))

(define-public emacs-anaphora
  (package
    (name "emacs-anaphora")
    (version "20180618.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/anaphora.git")
               (commit
                 "3b2da3f759b244975852e79721c4a2dbad3905cf")))
        (sha256
          (base32
            "11fgiy029sqz7nvdm7dcal95lacryz9zql0x5h05z48nrrcl4bib"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/anaphora")
    (synopsis
      "anaphoric macros providing implicit temp variables")
    (description
      "Documentation at https://melpa.org/#/anaphora")
    (license #f)))

(define-public emacs-ancient-one-dark-theme
  (package
    (name "emacs-ancient-one-dark-theme")
    (version "20211030.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/holodata/ancient-one-dark-emacs.git")
               (commit
                 "db79f86842c10874ce18c1a1e4496e9d0e28bed9")))
        (sha256
          (base32
            "0aysq514abw75kxl3chq189xkd57mmyrv1j6rq41chndp94nl37r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DaniruKun/ancient-one-dark-emacs-theme")
    (synopsis
      "A color theme based off uetchy's Ancient One Dark Theme")
    (description
      "Documentation at https://melpa.org/#/ancient-one-dark-theme")
    (license #f)))

(define-public emacs-android-env
  (package
    (name "emacs-android-env")
    (version "20200722.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fernando-jascovich/android-env.el.git")
               (commit
                 "5c6a6d9449f300eec4f374a5410edc1cbab02e40")))
        (sha256
          (base32
            "182b3fd85q3x5ynnfnjb01phhq1glf1wxj5rz8zx43ddnzz9ahmn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fernando-jascovich/android-env.el")
    (synopsis
      "Helper functions for working in android")
    (description
      "Documentation at https://melpa.org/#/android-env")
    (license #f)))

(define-public emacs-android-mode
  (package
    (name "emacs-android-mode")
    (version "20190903.811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/android-mode.git")
               (commit
                 "d5332e339a1f5e30559a53feffb8442ca79265d6")))
        (sha256
          (base32
            "10jhnxmxcjv9jpnsz2hrfb3rdl8306m8j30aclhvrvh4gcy1vwck"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/android-mode")
    (synopsis
      "Minor mode for Android application development")
    (description
      "Documentation at https://melpa.org/#/android-mode")
    (license #f)))

(define-public emacs-angry-police-captain
  (package
    (name "emacs-angry-police-captain")
    (version "20120829.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolpereira/angry-police-captain-el.git")
               (commit
                 "d11931c5cb63368dcc4a48797962428cca6d3e9d")))
        (sha256
          (base32
            "1m0c7ns7aiycg86cgglir8bkw730fslyg1n15m9ki0da4cnmm97a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Show quote from http://theangrypolicecaptain.com in the minibuffer")
    (description
      "Documentation at https://melpa.org/#/angry-police-captain")
    (license #f)))

(define-public emacs-angular-mode
  (package
    (name "emacs-angular-mode")
    (version "20151201.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/angular-mode.git")
               (commit
                 "8720cde86af0f1859ccc8580571e8d0ad1c52cff")))
        (sha256
          (base32
            "04kg2x0lif91knmkkh05mj42xw3dkzsnysjda6ian95v57wfg377"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/omouse/angularjs-mode")
    (synopsis "Major mode for Angular.js")
    (description
      "Documentation at https://melpa.org/#/angular-mode")
    (license #f)))

(define-public emacs-angular-snippets
  (package
    (name "emacs-angular-snippets")
    (version "20140514.523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/angular-snippets.el.git")
               (commit
                 "af5ae0a4a8603b040446c28afcf6ca01a8b4bd7b")))
        (sha256
          (base32
            "0hdm1a323mzxjfdply8ri3addk146f21d8cmpd18r7dw3j3cdfrn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments
      '(#:files ("*.el" "*.info" "dir" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for AngularJS")
    (description
      "Documentation at https://melpa.org/#/angular-snippets")
    (license #f)))

(define-public emacs-anki-connect
  (package
    (name "emacs-anki-connect")
    (version "20191123.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/anki-connect.el.git")
               (commit
                 "1324f0c248aa2c6e73d6cf93fad6119d699f7dae")))
        (sha256
          (base32
            "055nzb0dki4fmgmfhq83x7gciyp74r36a233hnl9lyd8wmb2hvqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/anki-connect.el")
    (synopsis "AnkiConnect API")
    (description
      "Documentation at https://melpa.org/#/anki-connect")
    (license #f)))

(define-public emacs-anki-editor
  (package
    (name "emacs-anki-editor")
    (version "20190922.1223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/louietan/anki-editor.git")
               (commit
                 "546774a453ef4617b1bcb0d1626e415c67cc88df")))
        (sha256
          (base32
            "1if610hq5j8rbjh1caw5bwbgnsn231awwxqbpwvrh966kdxzl4qf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash))
    (home-page
      "https://github.com/louietan/anki-editor")
    (synopsis
      "Minor mode for making Anki cards with Org")
    (description
      "Documentation at https://melpa.org/#/anki-editor")
    (license #f)))

(define-public emacs-anki-mode
  (package
    (name "emacs-anki-mode")
    (version "20201223.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/anki-mode.git")
               (commit
                 "d9b84028cd6a1ae040fb5604080a8b5fa8138562")))
        (sha256
          (base32
            "0imx5g615lfz71jjrb3hm84ll8p0bkrfi6w1qwxjsqgrwbw77s14"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-markdown-mode
            emacs-s
            emacs-request))
    (home-page
      "https://github.com/davidshepherd7/anki-mode")
    (synopsis "A major mode for creating anki cards")
    (description
      "Documentation at https://melpa.org/#/anki-mode")
    (license #f)))

(define-public emacs-annalist
  (package
    (name "emacs-annalist")
    (version "20190929.207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/annalist.el.git")
               (commit
                 "134fa3f0fb91a636a1c005c483516d4b64905a6d")))
        (sha256
          (base32
            "06dvk7hd3bqjng87apf5dsbdn0rv0gcrj66m7dz26c8bg19mddcc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/noctuid/annalist.el")
    (synopsis
      "Record and display information such as keybindings")
    (description
      "Documentation at https://melpa.org/#/annalist")
    (license #f)))

(define-public emacs-annotate
  (package
    (name "emacs-annotate")
    (version "20211001.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bastibe/annotate.el.git")
               (commit
                 "b9c908f24c2119d99cd93c86a0920223ef0568e9")))
        (sha256
          (base32
            "169nwa7jfsdcjk6mbm3yabk3j8iwfixfkypwk5336dy2ncf90cjc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bastibe/annotate.el")
    (synopsis "annotate files without changing them")
    (description
      "Documentation at https://melpa.org/#/annotate")
    (license #f)))

(define-public emacs-annotate-depth
  (package
    (name "emacs-annotate-depth")
    (version "20160520.2040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/netromdk/annotate-depth.git")
               (commit
                 "fcb24fa36287250e40d195590c4ca4a8a696277b")))
        (sha256
          (base32
            "18cav5wl3d0yq15273rqmdwvrgw96lmqiq9x5fxhf3wjb543mifl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/netromdk/annotate-depth")
    (synopsis
      "Annotate buffer if indentation depth is beyond threshold.")
    (description
      "Documentation at https://melpa.org/#/annotate-depth")
    (license #f)))

(define-public emacs-annotation
  (package
    (name "emacs-annotation")
    (version "20200914.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agda/agda.git")
               (commit
                 "756ac774b5191b252bf993b67c7ccd5648cbbb65")))
        (sha256
          (base32
            "174vd5dw7wz2kf08mcaakr0r0qx64bigkdhr9zg7c68xj0w0kasn"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("src/data/emacs-mode/annotation.el")))
    (home-page "https://github.com/agda/agda")
    (synopsis
      "Functions for annotating text with faces and help bubbles")
    (description
      "Documentation at https://melpa.org/#/annotation")
    (license #f)))

(define-public emacs-annoying-arrows-mode
  (package
    (name "emacs-annoying-arrows-mode")
    (version "20161024.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/annoying-arrows-mode.el.git")
               (commit
                 "3c42e9807d7696da2da2a21b63beebf9cdb3f5dc")))
        (sha256
          (base32
            "06gs5ln3w1xvq8f8k9225rwiipbh9cs0dzyyb7z05717rmqixcc4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Ring the bell if using arrows too much")
    (description
      "Documentation at https://melpa.org/#/annoying-arrows-mode")
    (license #f)))

(define-public emacs-ansi
  (package
    (name "emacs-ansi")
    (version "20211104.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ansi.el.git")
               (commit
                 "2367fba7b3b2340364a30cd6de7f3eb6bb9898a3")))
        (sha256
          (base32
            "1n7h6l4icm6lks3zpvd83j1fzrnspw19rmz7c96vy7pdh1y4v3p3"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/ansi")
    (synopsis "Turn string into ansi strings")
    (description
      "Documentation at https://melpa.org/#/ansi")
    (license #f)))

(define-public emacs-ansible-doc
  (package
    (name "emacs-ansible-doc")
    (version "20160924.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ansible-doc.git")
               (commit
                 "86083a7bb2ed0468ca64e52076b06441a2f8e9e0")))
        (sha256
          (base32
            "0lap404ch74w99n3xip176jr42b38xhyzkfnkyqg0g3wk2cd3aq8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lunaryorn/ansible-doc.el")
    (synopsis "Ansible documentation Minor Mode")
    (description
      "Documentation at https://melpa.org/#/ansible-doc")
    (license #f)))

(define-public emacs-ansible-vault
  (package
    (name "emacs-ansible-vault")
    (version "20211119.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellio/ansible-vault-mode.git")
               (commit
                 "8da2ad658dbe94c71aad1c75d6fd22888338030c")))
        (sha256
          (base32
            "1382ks8nakanv864flk070haibk7841ygb3nm262i7414zqsyfrk"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zellio/ansible-vault-mode")
    (synopsis
      "Minor mode for editing ansible vault files")
    (description
      "Documentation at https://melpa.org/#/ansible-vault")
    (license #f)))

(define-public emacs-ant
  (package
    (name "emacs-ant")
    (version "20160211.1543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/ant-el.git")
               (commit
                 "510b5a3f57ee4b2855422d88d359a28922c1ab70")))
        (sha256
          (base32
            "0jb5vl3cq5m3r23fjhcxgxl4g011zkjkkyn5mqqxx22a1sydsvab"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "helpers for compiling with ant")
    (description
      "Documentation at https://melpa.org/#/ant")
    (license #f)))

(define-public emacs-anti-zenburn-theme
  (package
    (name "emacs-anti-zenburn-theme")
    (version "20180712.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00natic/anti-zenburn-theme.git")
               (commit
                 "dbafbaa86be67c1d409873f57a5c0bbe1e7ca158")))
        (sha256
          (base32
            "1h4lachmrpjiblah4rjd2cpvz6n6qh3i5cdp4wra2dk177h7kj6h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/m00natic/anti-zenburn-theme")
    (synopsis "Low-contrast Zenburn-inverted theme")
    (description
      "Documentation at https://melpa.org/#/anti-zenburn-theme")
    (license #f)))

(define-public emacs-anx-api
  (package
    (name "emacs-anx-api")
    (version "20140208.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmloveland/emacs-appnexus-api.git")
               (commit
                 "b2411ebc966ac32c3ffc61bc22bf183834df0fa0")))
        (sha256
          (base32
            "0fzxzar8m9qznfxv3wr7vfj9y2110wf6mm5cj55k3sd5djdjhmf1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Interact with the AppNexus API from Emacs.")
    (description
      "Documentation at https://melpa.org/#/anx-api")
    (license #f)))

(define-public emacs-anybar
  (package
    (name "emacs-anybar")
    (version "20160816.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tie-rack/anybar-el.git")
               (commit
                 "7a0743e0d31bcb36ab1bb2e351f3e7139c422ac5")))
        (sha256
          (base32
            "1s7vnp2xzffdj4pqdqn6mrirw33ms0yqlpxzz5pwj6xrbp2x5r6s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Control AnyBar from Emacs")
    (description
      "Documentation at https://melpa.org/#/anybar")
    (license #f)))

(define-public emacs-anyins
  (package
    (name "emacs-anyins")
    (version "20131229.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/anyins.git")
               (commit
                 "83844c17ac9b5b6c7655ee556b75689e4c8ea663")))
        (sha256
          (base32
            "05lq0bllgn44zs85mgnfdcyjasm6j8m70jdcxksf798i0qdqnk7n"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/antham/anyins")
    (synopsis
      "Insert content at multiple places from shell command or kill-ring")
    (description
      "Documentation at https://melpa.org/#/anyins")
    (license #f)))

(define-public emacs-anzu
  (package
    (name "emacs-anzu")
    (version "20211002.2255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/anzu.git")
               (commit
                 "5abb37455ea44fa401d5f4c1bdc58adb2448db67")))
        (sha256
          (base32
            "1rxw9l0mhb7m17h6mh3ndpa6sw1kh4awipvar6w7n6xc3wv4pajy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/anzu")
    (synopsis
      "Show number of matches in mode-line while searching")
    (description
      "Documentation at https://melpa.org/#/anzu")
    (license #f)))

(define-public emacs-aozora-view
  (package
    (name "emacs-aozora-view")
    (version "20140310.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/aozora-view.git")
               (commit
                 "b0390616d19e45f15f9a2f5d5688274831e721fd")))
        (sha256
          (base32
            "0528z3axjmplg2fdbv4jxgy1p39vr4rnsm4a3ps2fanf8bwsyx3l"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/kawabata/aozora-view")
    (synopsis "Aozora Bunko text Emacs viewer.")
    (description
      "Documentation at https://melpa.org/#/aozora-view")
    (license #f)))

(define-public emacs-apache-mode
  (package
    (name "emacs-apache-mode")
    (version "20210519.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/apache-mode.git")
               (commit
                 "f2c11aac2f5fc598123e04f4604bea248689a117")))
        (sha256
          (base32
            "1hcgfp4gav0dzjw38sl35b58hb2rlpmlckvam8fsqlxgszv50cza"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-php/apache-mode")
    (synopsis
      "Major mode for editing Apache httpd configuration files")
    (description
      "Documentation at https://melpa.org/#/apache-mode")
    (license #f)))

(define-public emacs-apel
  (package
    (name "emacs-apel")
    (version "20201106.2221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/apel.git")
               (commit
                 "4e3269b6e702db2dba48cf560563ac883e81e3bf")))
        (sha256
          (base32
            "1b4ljzq4qyslwxxl6n2izghbl20wwzxxvcq5wk111blnwap4kddw"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("alist.el"
         "apel-ver.el"
         "apel-pkg.el"
         "broken.el"
         "calist.el"
         "emu.el"
         "filename.el"
         "install.el"
         "inv-23.el"
         "invisible.el"
         "mcharset.el"
         "mcs-20.el"
         "mcs-e20.el"
         "mule-caesar.el"
         "path-util.el"
         "pccl-20.el"
         "pccl.el"
         "pces-20.el"
         "pces-e20.el"
         "pces.el"
         "pcustom.el"
         "poe.el"
         "poem-e20.el"
         "poem-e20_3.el"
         "poem.el"
         "product.el"
         "pym.el"
         "richtext.el"
         "static.el")))
    (home-page "unspecified")
    (synopsis
      "A Portable Emacs Library provides support for portable Emacs Lisp programs")
    (description
      "Documentation at https://melpa.org/#/apel")
    (license #f)))

(define-public emacs-apheleia
  (package
    (name "emacs-apheleia")
    (version "20211226.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/apheleia.git")
               (commit
                 "e700c78a5db4ea9599b2d04bbc8e4c40ce822c37")))
        (sha256
          (base32
            "1ni8nym0jj6q54p5rq5hzcky3fg30y6064ii2aykvbrn96s86bhn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/raxod502/apheleia")
    (synopsis "Reformat buffer stably")
    (description
      "Documentation at https://melpa.org/#/apheleia")
    (license #f)))

(define-public emacs-apib-mode
  (package
    (name "emacs-apib-mode")
    (version "20200101.1017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/w-vi/apib-mode.git")
               (commit
                 "c6dd05201f6eb9295736d8668a79a7510d11159e")))
        (sha256
          (base32
            "0f5zph67h0pr445ykllz0pix2dg2kdxl0g5mhxaggdydizf24p45"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page "http://github.com/w-vi/apib-mode")
    (synopsis "Major mode for API Blueprint files")
    (description
      "Documentation at https://melpa.org/#/apib-mode")
    (license #f)))

(define-public emacs-apiwrap
  (package
    (name "emacs-apiwrap")
    (version "20180602.2231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/apiwrap.el.git")
               (commit
                 "a4fb21d96027369307b22439a4a6c765ee272f44")))
        (sha256
          (base32
            "19v92dgbwrb66bj5zs4fh0knba286i32afi42mvjmgagf228x6ka"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vermiculus/apiwrap.el")
    (synopsis "api-wrapping macros")
    (description
      "Documentation at https://melpa.org/#/apiwrap")
    (license #f)))

(define-public emacs-apparmor-mode
  (package
    (name "emacs-apparmor-mode")
    (version "20211014.2319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/apparmor-mode.git")
               (commit
                 "9d1937af52cd8ecfeec27185644ea8cbf0dc1c08")))
        (sha256
          (base32
            "1kzvqxz0m2lgcm0whb121g1580vi7bvk4fj780d5xqqqlv0091a0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alexmurray/apparmor-mode")
    (synopsis
      "Major mode for editing AppArmor policy files")
    (description
      "Documentation at https://melpa.org/#/apparmor-mode")
    (license #f)))

(define-public emacs-apples-mode
  (package
    (name "emacs-apples-mode")
    (version "20110121.418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tequilasunset/apples-mode.git")
               (commit
                 "83a9ab0d6ba82496e2f7df386909b1a55701fccb")))
        (sha256
          (base32
            "0br0jl6xnajdx37s5cvs13srn9lldg58y9587a11s3s651xjdq0z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "apples-mode")))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing and executing AppleScript code")
    (description
      "Documentation at https://melpa.org/#/apples-mode")
    (license #f)))

(define-public emacs-applescript-mode
  (package
    (name "emacs-applescript-mode")
    (version "20210802.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/applescript-mode.git")
               (commit
                 "00c141bbff46c89a96598b605dee05dd1d89f624")))
        (sha256
          (base32
            "1d3ssyp90k26282p46c91wj1bvqxpvghcsicp14bnh78llwninvc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/applescript-mode")
    (synopsis
      "major mode for editing AppleScript source")
    (description
      "Documentation at https://melpa.org/#/applescript-mode")
    (license #f)))

(define-public emacs-aproject
  (package
    (name "emacs-aproject")
    (version "20190730.152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vietor/aproject.git")
               (commit
                 "b534e2a62738ad59a8a3cddd386466c145dad3b2")))
        (sha256
          (base32
            "08nhfa845cn20kx0q9rchs24imfmvpywi1b8mn40d1lw587yr519"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vietor/aproject")
    (synopsis "Basic project framework for Emacs")
    (description
      "Documentation at https://melpa.org/#/aproject")
    (license #f)))

(define-public emacs-apropospriate-theme
  (package
    (name "emacs-apropospriate-theme")
    (version "20211113.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/apropospriate-theme.git")
               (commit
                 "b934a5a17cac02137c1bfe81935638ab85dbaec9")))
        (sha256
          (base32
            "1wbvxvv7fydv9p148xxyivsvjh000z4ndfwfpbir4hv0l83xghrw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A colorful, low-contrast, light & dark theme set for Emacs with a fun name.")
    (description
      "Documentation at https://melpa.org/#/apropospriate-theme")
    (license #f)))

(define-public emacs-aqi
  (package
    (name "emacs-aqi")
    (version "20200215.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/aqi.git")
               (commit
                 "c107a2e21cd1ac6008d8baaeeedb3fab26583d45")))
        (sha256
          (base32
            "19xrm4nwwsf86ysqnqx7jfl78gbg66jj4yfw3h99y3nd82j2rdws"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/zzkt/aqi")
    (synopsis
      "Air quality data from the World Air Quality Index")
    (description
      "Documentation at https://melpa.org/#/aqi")
    (license #f)))

(define-public emacs-arc-dark-theme
  (package
    (name "emacs-arc-dark-theme")
    (version "20190314.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cfraz89/arc-dark-theme.git")
               (commit
                 "ee17dcca35dd0304145efc468b3f25af6907a59d")))
        (sha256
          (base32
            "0cfj5c6rz68095wxs8m733lwc5ymbgi5v82drxhjqcascvrdr1v1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cfraz89/arc-dark-theme")
    (synopsis "Arc dark theme")
    (description
      "Documentation at https://melpa.org/#/arc-dark-theme")
    (license #f)))

(define-public emacs-arch-packer
  (package
    (name "emacs-arch-packer")
    (version "20170730.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brotzeit/arch-packer.git")
               (commit
                 "940e96f7d357c6570b675a0f942181c787f1bfd7")))
        (sha256
          (base32
            "0m80ka51m7a1797q6br41x96znvqfmpwzh3vk4mz66mdx2r4xk77"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-async emacs-dash))
    (home-page
      "https://github.com/brotzeitmacher/arch-packer")
    (synopsis
      "Arch Linux package management frontend")
    (description
      "Documentation at https://melpa.org/#/arch-packer")
    (license #f)))

(define-public emacs-archive-rpm
  (package
    (name "emacs-archive-rpm")
    (version "20180706.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/archive-rpm.git")
               (commit
                 "59f83caebbd2f92fd634f6968e6d17b50ffa3dc7")))
        (sha256
          (base32
            "11ssqaax4jl7r3z5agzmc74sjsfvl0m3xvp015ncqzpzysla47g3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "RPM and CPIO support for archive-mode")
    (description
      "Documentation at https://melpa.org/#/archive-rpm")
    (license #f)))

(define-public emacs-arview
  (package
    (name "emacs-arview")
    (version "20160419.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/afainer/arview.git")
               (commit
                 "5437b4221b64b238c273a651d4792c577dba6d45")))
        (sha256
          (base32
            "1yvirfmvf6v5khl7zhx2ddv9bbxnx1qhwfzi0gy2nmbxlykb6s2j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/afainer/arview")
    (synopsis
      "extract and view archives in the temporary directory")
    (description
      "Documentation at https://melpa.org/#/arview")
    (license #f)))

(define-public emacs-ascii-table
  (package
    (name "emacs-ascii-table")
    (version "20201019.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-ascii-table.git")
               (commit
                 "4f68ad0b36c365c0652756691ab1703d0d46b4b4")))
        (sha256
          (base32
            "0f0ghwglxv2yil2cbzbhrvgk1p37jldfb974kpfwy6dg8m933rjf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-ascii-table")
    (synopsis "Interactive ASCII table")
    (description
      "Documentation at https://melpa.org/#/ascii-table")
    (license #f)))

(define-public emacs-asn1-mode
  (package
    (name "emacs-asn1-mode")
    (version "20170729.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/asn1-mode.git")
               (commit
                 "d5d4a8259daf708411699bcea85d322f18beb972")))
        (sha256
          (base32
            "067khpi4ghzyifrk1vhi57n3alp67qks4k4km11hasiavi5gsjmp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/kawabata/asn1-mode/")
    (synopsis "ASN.1/GDMO mode for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/asn1-mode")
    (license #f)))

(define-public emacs-asx
  (package
    (name "emacs-asx")
    (version "20191024.1100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ragone/asx.git")
               (commit
                 "ec4bf74de602b97df1f306d51acf4cda45184aac")))
        (sha256
          (base32
            "1j505ijrgd0rwh69jl7677sgf5ryjwp160nrp0w0bskisrf028d7"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ragone/asx")
    (synopsis "Ask StackExchange/StackOverflow")
    (description
      "Documentation at https://melpa.org/#/asx")
    (license #f)))

(define-public emacs-async-await
  (package
    (name "emacs-async-await")
    (version "20200117.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chuntaro/emacs-async-await.git")
               (commit
                 "deef2bb343463f5196545f1dd8c2a32d0cb3b146")))
        (sha256
          (base32
            "0aav9qdswnw7ynqlzn0sm34as5fj2d85syxgg8zjabzp6646ay29"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-iter2))
    (home-page
      "https://github.com/chuntaro/emacs-async-await")
    (synopsis "Async/Await")
    (description
      "Documentation at https://melpa.org/#/async-await")
    (license #f)))

(define-public emacs-atl-long-lines
  (package
    (name "emacs-atl-long-lines")
    (version "20201026.339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/atl-long-lines.git")
               (commit
                 "781e07c6972591e4147edf81f6314f297cc4c0df")))
        (sha256
          (base32
            "0gzhf8004fz0a3zi9nihdgyhya01zihhcqfzr2wdp8a9rczlavrb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/atl-long-lines")
    (synopsis
      "Turn off truncate-lines when the line is long")
    (description
      "Documentation at https://melpa.org/#/atl-long-lines")
    (license #f)))

(define-public emacs-atom-dark-theme
  (package
    (name "emacs-atom-dark-theme")
    (version "20181022.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whitlockjc/atom-dark-theme-emacs.git")
               (commit
                 "5c8610d0b45a536b8f7f9777297c86362685a357")))
        (sha256
          (base32
            "15mjn5z7f7x8k4lbab5xv2r88s9ch9b58znv6vwpqakp63rx8hsx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/whitlockjc/atom-dark-theme-emacs")
    (synopsis
      "An Emacs port of the Atom Dark theme from Atom.io.")
    (description
      "Documentation at https://melpa.org/#/atom-dark-theme")
    (license #f)))

(define-public emacs-atomic-chrome
  (package
    (name "emacs-atomic-chrome")
    (version "20210221.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha22jp/atomic-chrome.git")
               (commit
                 "c73367d8aa660f2b3c3f70ef5c39f5b502d60404")))
        (sha256
          (base32
            "07bw5fjmszxsvvcb0415zfawfmzqwj0qdvaigxrbb5rinazwb0pn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page
      "https://github.com/alpha22jp/atomic-chrome")
    (synopsis
      "Edit Chrome text area with Emacs using Atomic Chrome")
    (description
      "Documentation at https://melpa.org/#/atomic-chrome")
    (license #f)))

(define-public emacs-auctex-cluttex
  (package
    (name "emacs-auctex-cluttex")
    (version "20210226.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tsuu32/auctex-cluttex.git")
               (commit
                 "9a15742a6de1285831329eac93f9e35752472685")))
        (sha256
          (base32
            "1ra2qkr9wadnx5aqg6paxk8w4h9m6c4jrl4b7zb5l6s1csw1llj1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/tsuu32/auctex-cluttex")
    (synopsis "ClutTeX support for AUCTeX")
    (description
      "Documentation at https://melpa.org/#/auctex-cluttex")
    (license #f)))

(define-public emacs-auctex-lua
  (package
    (name "emacs-auctex-lua")
    (version "20151121.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/auctex-lua.git")
               (commit
                 "799cd8ac10c96991bb63d9aa60528ae5d8c786b5")))
        (sha256
          (base32
            "0lgfgvnaln5rhhwgcrzwrhbj0gz8sgaf6xxdl7njf3sa6bfgngsz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auctex emacs-lua-mode))
    (home-page
      "http://github.com/vermiculus/auctex-lua")
    (synopsis "Lua editing support for AUCTeX")
    (description
      "Documentation at https://melpa.org/#/auctex-lua")
    (license #f)))

(define-public emacs-aurel
  (package
    (name "emacs-aurel")
    (version "20170114.937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/aurel.git")
               (commit
                 "fc7ad208f43f8525f84a18941c9b55f956df8961")))
        (sha256
          (base32
            "0mcbw8p4wrnnr39wzkfz9kc899w0k1jb00q1926mchf202cmnz94"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bui emacs-dash))
    (home-page "https://github.com/alezost/aurel")
    (synopsis
      "Search, get info, vote for and download AUR packages")
    (description
      "Documentation at https://melpa.org/#/aurel")
    (license #f)))

(define-public emacs-auth-source-keytar
  (package
    (name "emacs-auth-source-keytar")
    (version "20210516.556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/auth-source-keytar.git")
               (commit
                 "a1e0a364a64900839b544d88347fa229b3aa91ab")))
        (sha256
          (base32
            "0cinmvmzmlqms4kx4qc78fzxgwxki4jd6zk62y2rghk307i97qbb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-keytar emacs-s))
    (home-page
      "https://github.com/emacs-grammarly/auth-source-keytar")
    (synopsis "Integrate auth-source with keytar")
    (description
      "Documentation at https://melpa.org/#/auth-source-keytar")
    (license #f)))

(define-public emacs-auth-source-xoauth2
  (package
    (name "emacs-auth-source-xoauth2")
    (version "20200911.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ccrusius/auth-source-xoauth2.git")
               (commit
                 "d3890eaa3a46dc89758ec6b789949e70ae782896")))
        (sha256
          (base32
            "1diflmg6sswz0xc1s9cygyg7y1ims8nqcyhs9yx5vn687gf82zlx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ccrusius/auth-source-xoauth2")
    (synopsis "Integrate auth-source with XOAUTH2")
    (description
      "Documentation at https://melpa.org/#/auth-source-xoauth2")
    (license #f)))

(define-public emacs-auto-compile
  (package
    (name "emacs-auto-compile")
    (version "20210820.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/auto-compile.git")
               (commit
                 "ff21de70f3523afa2976d1e787e2febefeba2653")))
        (sha256
          (base32
            "1pwj7zc870vxvgbq7vzz924b6a0jhx0fkn0igkgz2piiyic627b6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-packed))
    (home-page
      "https://github.com/emacscollective/auto-compile")
    (synopsis
      "automatically compile Emacs Lisp libraries")
    (description
      "Documentation at https://melpa.org/#/auto-compile")
    (license #f)))

(define-public emacs-auto-complete-auctex
  (package
    (name "emacs-auto-complete-auctex")
    (version "20140223.1758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/monsanto/auto-complete-auctex.git")
               (commit
                 "855633f668bcc4b9408396742a7cb84e0c4a2f77")))
        (sha256
          (base32
            "1wri8q5llpy1q1h4ac4kjnnkgj6fby8i9vrpr6mrb13d4gnk4gr2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet emacs-auto-complete))
    (home-page "unspecified")
    (synopsis "auto-completion for auctex")
    (description
      "Documentation at https://melpa.org/#/auto-complete-auctex")
    (license #f)))

(define-public emacs-auto-complete-clang
  (package
    (name "emacs-auto-complete-clang")
    (version "20140409.752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianjcj/auto-complete-clang.git")
               (commit
                 "a195db1d0593b4fb97efe50885e12aa6764d998c")))
        (sha256
          (base32
            "12y6f47xbjl4gy14j2f5wlisy5vl6rhx74n27w61pjv38m0a7mi1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/brianjcj/auto-complete-clang")
    (synopsis
      "Auto Completion source for clang for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/auto-complete-clang")
    (license #f)))

(define-public emacs-auto-complete-distel
  (package
    (name "emacs-auto-complete-distel")
    (version "20180827.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/distel-completion.git")
               (commit
                 "acc4c0a5521904203d797fe96b08e5fae4233c7e")))
        (sha256
          (base32
            "0yvp3dwa9mwfyrqla27ycwyjad4bp1267bxv0chxcr4528hnygl3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-distel-completion-lib))
    (arguments
      '(#:files ("auto-complete-distel.el")))
    (home-page
      "github.com/sebastiw/distel-completion")
    (synopsis
      "Erlang/distel completion backend for auto-complete-mode")
    (description
      "Documentation at https://melpa.org/#/auto-complete-distel")
    (license #f)))

(define-public emacs-auto-complete-nxml
  (package
    (name "emacs-auto-complete-nxml")
    (version "20140221.458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/auto-complete-nxml.git")
               (commit
                 "ac7b09a23e45f9bd02affb31847263de4180163a")))
        (sha256
          (base32
            "18bf1kw85mab0zp7rn85cm1nxjxg5c1dmiv0j0mjwzsv8an4px5y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/aki2o/auto-complete-nxml")
    (synopsis
      "do completion by auto-complete.el on nXML-mode")
    (description
      "Documentation at https://melpa.org/#/auto-complete-nxml")
    (license #f)))

(define-public emacs-auto-complete-pcmp
  (package
    (name "emacs-auto-complete-pcmp")
    (version "20140227.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/auto-complete-pcmp.git")
               (commit
                 "2595d3dab1ef3549271ca922f212928e9d830eec")))
        (sha256
          (base32
            "1hf2f903hy9afahrgy2fx9smgn631drs6733188zgqi3nkyizj26"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-log4e
            emacs-yaxception))
    (home-page
      "https://github.com/aki2o/auto-complete-pcmp")
    (synopsis
      "Provide auto-complete sources using pcomplete results")
    (description
      "Documentation at https://melpa.org/#/auto-complete-pcmp")
    (license #f)))

(define-public emacs-auto-complete-sage
  (package
    (name "emacs-auto-complete-sage")
    (version "20160514.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/auto-complete-sage.git")
               (commit
                 "51b8e3905196d266e1f8aa47881189833151b398")))
        (sha256
          (base32
            "139in1jgxg43v7ji4i1qmxbgspr71h95lzlz0fvdk78vkxc5842b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-sage-shell-mode))
    (home-page
      "https://github.com/stakemori/auto-complete-sage")
    (synopsis
      "An auto-complete source for sage-shell-mode.")
    (description
      "Documentation at https://melpa.org/#/auto-complete-sage")
    (license #f)))

(define-public emacs-auto-dim-other-buffers
  (package
    (name "emacs-auto-dim-other-buffers")
    (version "20211101.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mina86/auto-dim-other-buffers.el.git")
               (commit
                 "a1c67bf557277934f6dae9f2de6624d949ef2c8a")))
        (sha256
          (base32
            "0z5afn48w3p3i98zn81422khbl0k460spgqj60b9s7sqccbssg57"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mina86/auto-dim-other-buffers.el")
    (synopsis
      "Makes windows without focus less prominent")
    (description
      "Documentation at https://melpa.org/#/auto-dim-other-buffers")
    (license #f)))

(define-public emacs-auto-highlight-symbol
  (package
    (name "emacs-auto-highlight-symbol")
    (version "20211125.747")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elp-revive/auto-highlight-symbol.git")
               (commit
                 "40efce76ee0dff920f2ba2315e568e75e5218830")))
        (sha256
          (base32
            "0nisaafqlns76wqvd4ys68h5ys4vcrzwy7lxrb4nvlhvq840g9f6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "http://github.com/jcs-elpa/auto-highlight-symbol")
    (synopsis
      "Automatic highlighting current symbol minor mode")
    (description
      "Documentation at https://melpa.org/#/auto-highlight-symbol")
    (license #f)))

(define-public emacs-auto-org-md
  (package
    (name "emacs-auto-org-md")
    (version "20180213.2343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamcha-aa/auto-org-md.git")
               (commit
                 "9318338bdb7fe8bd698d88f3af89b2d6413efdd2")))
        (sha256
          (base32
            "1dzxc1f4yvj8xww5drcpzmn3fyi8ziimh1cmy6l3i399l1zl0njj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jamcha-aa/auto-org-md")
    (synopsis
      "export a markdown file automatically when you save an org-file")
    (description
      "Documentation at https://melpa.org/#/auto-org-md")
    (license #f)))

(define-public emacs-auto-pause
  (package
    (name "emacs-auto-pause")
    (version "20160426.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/auto-pause.git")
               (commit
                 "a4d778de774ca3895542cb559a953e0d98657338")))
        (sha256
          (base32
            "1pxhqwvg059pslin6z87jd8d0q44ljwvdn6y23ffrz9kfpn3m5m2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/auto-pause")
    (synopsis
      "Run processes which will be paused when Emacs is idle")
    (description
      "Documentation at https://melpa.org/#/auto-pause")
    (license #f)))

(define-public emacs-auto-sudoedit
  (package
    (name "emacs-auto-sudoedit")
    (version "20210522.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ncaq/auto-sudoedit.git")
               (commit
                 "0dec9e632f1f3208f0da2f94b57efa1aae9ce2ab")))
        (sha256
          (base32
            "1isk9106lpdh45l41n2v8q8m9vcfb4biy9dv87rkks58nysrxy3z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/ncaq/auto-sudoedit")
    (synopsis "Auto sudo edit by tramp")
    (description
      "Documentation at https://melpa.org/#/auto-sudoedit")
    (license #f)))

(define-public emacs-auto-virtualenv
  (package
    (name "emacs-auto-virtualenv")
    (version "20211215.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcwebbie/auto-virtualenv.git")
               (commit
                 "07064e05feb62277991b8a7c04f7cdad50acaddf")))
        (sha256
          (base32
            "1f1fi57dc19mp1cbkg7xh62g4xpqc3i0pzqpjkg8m5361gb67qz4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyvenv emacs-s))
    (home-page
      "http://github.com/marcwebbie/auto-virtualenv")
    (synopsis "Auto activate python virtualenvs")
    (description
      "Documentation at https://melpa.org/#/auto-virtualenv")
    (license #f)))

(define-public emacs-autobuild
  (package
    (name "emacs-autobuild")
    (version "20200713.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erjoalgo/autobuild.git")
               (commit
                 "9b068d979bad78aba8e8bef9f9e7c3bfecb34d2d")))
        (sha256
          (base32
            "0hvy616ssnkkgh78my4v8x29sr7j0vj7g2mam7v5rs5cczxr61xj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erjoalgo/autobuild")
    (synopsis
      "Define and execute build rules and compilation pipelines")
    (description
      "Documentation at https://melpa.org/#/autobuild")
    (license #f)))

(define-public emacs-autotetris-mode
  (package
    (name "emacs-autotetris-mode")
    (version "20141114.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/autotetris-mode.git")
               (commit
                 "0c3a746dcc304a67d2a6e7ad4ef93f512486343a")))
        (sha256
          (base32
            "055kzs1qgx8jbwsxrnnqzbl8hgmaigkz3mqll2i0fdac5a605vxc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/autotetris-mode")
    (synopsis "automatically play tetris")
    (description
      "Documentation at https://melpa.org/#/autotetris-mode")
    (license #f)))

(define-public emacs-autothemer
  (package
    (name "emacs-autothemer")
    (version "20180920.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonm23/autothemer.git")
               (commit
                 "8ec0c27a73b2d0a335eda63fde695a101e2956b2")))
        (sha256
          (base32
            "1m2r5fg5r4gqhim5l1g5937ngkc2hvidb5kr8r4pffcg8xv8djgn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/sebastiansturm/autothemer")
    (synopsis "Conveniently define themes.")
    (description
      "Documentation at https://melpa.org/#/autothemer")
    (license #f)))

(define-public emacs-autumn-light-theme
  (package
    (name "emacs-autumn-light-theme")
    (version "20150515.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aalpern/emacs-color-theme-autumn-light.git")
               (commit
                 "1e3b2a43a3001e4a97a5ff073ba3f0d2ea3888f9")))
        (sha256
          (base32
            "1lip7282g41ghn64dvx2ab437s83cj9l8ps1rd8rbhqyz4bx5wb9"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aalpern/emacs-color-theme-autumn-light")
    (synopsis
      "A light color theme with muted, autumnal colors.")
    (description
      "Documentation at https://melpa.org/#/autumn-light-theme")
    (license #f)))

(define-public emacs-babel
  (package
    (name "emacs-babel")
    (version "20210612.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/babel.git")
               (commit
                 "946e69c61188bc41793402ac48466d8967ddb43d")))
        (sha256
          (base32
            "0drqcvkak677r2bc8jr0bp0qv3x2iw5cvlma6ir2blgm1d3q2bg3"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/juergenhoetzel/babel")
    (synopsis
      "interface to web translation services such as Babelfish")
    (description
      "Documentation at https://melpa.org/#/babel")
    (license #f)))

(define-public emacs-baidu-translate
  (package
    (name "emacs-baidu-translate")
    (version "20211130.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LiShiZhensPi/baidu-translate.git")
               (commit
                 "16101d5e6ce19bbcc8badf4422a95db457160999")))
        (sha256
          (base32
            "0799gc0nhqmgz691sn2zam3bfyraq9ljr4da1481nawwkwyzad1v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-unicode-escape))
    (home-page
      "https://github.com/liShiZhensPi/baidu-translate")
    (synopsis "A plugin using baidu-translate-api")
    (description
      "Documentation at https://melpa.org/#/baidu-translate")
    (license #f)))

(define-public emacs-balanced-windows
  (package
    (name "emacs-balanced-windows")
    (version "20190903.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-balanced-windows.git")
               (commit
                 "1da5354ad8a9235d13928e2ee0863f3642ccdd13")))
        (sha256
          (base32
            "1hsjg48jlfi6lc6izp9xcfqvxj7c0ivjrfsr2q3yv3s1iy2fz37l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wbolster/emacs-balanced-windows")
    (synopsis "Keep windows balanced")
    (description
      "Documentation at https://melpa.org/#/balanced-windows")
    (license #f)))

(define-public emacs-bart-mode
  (package
    (name "emacs-bart-mode")
    (version "20190601.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/bart-mode.git")
               (commit
                 "f70b6c42452e47c0c6b3ebd4c90e555a9bedeec7")))
        (sha256
          (base32
            "0s47ijlnspndia6f1116g6nr6hnirmba6fkvdcvw4qm7mhn5xrc9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/bart-mode")
    (synopsis "Real time BART departures info.")
    (description
      "Documentation at https://melpa.org/#/bart-mode")
    (license #f)))

(define-public emacs-bash-completion
  (package
    (name "emacs-bash-completion")
    (version "20210821.1941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/szermatt/emacs-bash-completion.git")
               (commit
                 "c5eaeed156ab906190c662d491269230967104b1")))
        (sha256
          (base32
            "0r221iirqsbz13s76r68i496izbirrvcw8ql3wsh205zmxa3jqg1"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/szermatt/emacs-bash-completion")
    (synopsis "BASH completion for the shell buffer")
    (description
      "Documentation at https://melpa.org/#/bash-completion")
    (license #f)))

(define-public emacs-basic-c-compile
  (package
    (name "emacs-basic-c-compile")
    (version "20170302.1112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nick96/basic-c-compile.git")
               (commit
                 "0129786aeee50d7bb0020d9fc2b7508875d403e8")))
        (sha256
          (base32
            "0q6scyva1psyam7jzygqcr1wayf70vrp237hm01q5i9cin8j4j1z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/nick96/basic-c-compile")
    (synopsis
      "Quickly create a Makefile, compile and run C.")
    (description
      "Documentation at https://melpa.org/#/basic-c-compile")
    (license #f)))

(define-public emacs-battery-notifier
  (package
    (name "emacs-battery-notifier")
    (version "20210521.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonmj/battery-notifier.git")
               (commit
                 "ae2043db954e131d9de7347ab1a6107fd07e8893")))
        (sha256
          (base32
            "1w2cymf9yd3siijplb6vrcxwqhqsqii8bnxki7vqb1s16v7ciczz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page
      "https://github.com/jasonmj/battery-notifier")
    (synopsis "Notify when battery capacity is low")
    (description
      "Documentation at https://melpa.org/#/battery-notifier")
    (license #f)))

(define-public emacs-bbdb-ext
  (package
    (name "emacs-bbdb-ext")
    (version "20151220.2013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/bbdb-ext.git")
               (commit
                 "fee97b1b3faa83edaea00fbc5ad3cbca5e791a55")))
        (sha256
          (base32
            "1ydf89mmp3zjfqdymnrwg18wclyf7psarz9f2k82pl58h0khh71g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page "https://github.com/vapniks/bbdb-ext")
    (synopsis "Extra commands for BBDB")
    (description
      "Documentation at https://melpa.org/#/bbdb-ext")
    (license #f)))

(define-public emacs-bbdb-vcard
  (package
    (name "emacs-bbdb-vcard")
    (version "20210325.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tohojo/bbdb-vcard.git")
               (commit
                 "113c66115ce68316e209f51ebce56de8dded3606")))
        (sha256
          (base32
            "1sr5kd2gvw1b4hl147yb60cgx6j730vdnpyr09p7vmpw65hzwlwm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page
      "https://github.com/tohojo/bbdb-vcard")
    (synopsis "vCard import/export for BBDB")
    (description
      "Documentation at https://melpa.org/#/bbdb-vcard")
    (license #f)))

(define-public emacs-bbdb2erc
  (package
    (name "emacs-bbdb2erc")
    (version "20190822.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/bbdb2erc.git")
               (commit
                 "40b89e961762af3e7ade3a1844a9fbcd4084ac65")))
        (sha256
          (base32
            "1faa32ya515rkx5pwz6bsav0ffyajq8vq8d3vzn9j81d9in2rh5j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page "unspecified")
    (synopsis
      "make bbdb show if pal is online with ERC, click i to chat")
    (description
      "Documentation at https://melpa.org/#/bbdb2erc")
    (license #f)))

(define-public emacs-beacon
  (package
    (name "emacs-beacon")
    (version "20190104.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/beacon.git")
               (commit
                 "bde78180c678b233c94321394f46a81dc6dce1da")))
        (sha256
          (base32
            "19m90jjbsjzhzf7phlg79l8d2kxgrqnrrg1ipa3sf7vzxxkmsdld"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Malabarba/beacon")
    (synopsis
      "Highlight the cursor whenever the window scrolls")
    (description
      "Documentation at https://melpa.org/#/beacon")
    (license #f)))

(define-public emacs-beeminder
  (package
    (name "emacs-beeminder")
    (version "20201227.1533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodaware/beeminder.el.git")
               (commit
                 "161d9c94c594614a01cb08219693d9e000af4f69")))
        (sha256
          (base32
            "0cfjrn4hkpxhmg07kdff6ifvv1aqaq6dah5bvdc0xhzlqznx72j4"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.philnewton.net/code/beeminder-el/")
    (synopsis "Emacs interface for Beeminder")
    (description
      "Documentation at https://melpa.org/#/beeminder")
    (license #f)))

(define-public emacs-beginend
  (package
    (name "emacs-beginend")
    (version "20210504.341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/beginend.git")
               (commit
                 "4b4e4808dc3248ea61b3d8bdd7c6b73edd3b6902")))
        (sha256
          (base32
            "0cx8k5vvqkhkaa9ay4cnb2gshi8118zq87ddbxmffai6ryj2lg7b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/beginend")
    (synopsis "Redefine M-< and M-> for some modes")
    (description
      "Documentation at https://melpa.org/#/beginend")
    (license #f)))

(define-public emacs-bencoding
  (package
    (name "emacs-bencoding")
    (version "20200331.1102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/bencoding.el.git")
               (commit
                 "1e16ccfd5c6560a83ae2926afe4a5076a541d3d6")))
        (sha256
          (base32
            "0dgwh3z1ni619kxpdxv8r2k0jhgj5h6ssxp6l8s26mhpmy1bkm6c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/bencoding.el")
    (synopsis "Bencoding decoding and encoding")
    (description
      "Documentation at https://melpa.org/#/bencoding")
    (license #f)))

(define-public emacs-better-shell
  (package
    (name "emacs-better-shell")
    (version "20191025.1737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/killdash9/better-shell.git")
               (commit
                 "70c787b981caeef8c5f8012b170eb7b9f167cd13")))
        (sha256
          (base32
            "0i87d1xrg4gvszm52wdrx81g49lh75ycdfxkxhlrckbw7nkrjchz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/killdash9/better-shell")
    (synopsis "Better shell management")
    (description
      "Documentation at https://melpa.org/#/better-shell")
    (license #f)))

(define-public emacs-biblio
  (package
    (name "emacs-biblio")
    (version "20210418.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/biblio.el.git")
               (commit
                 "517ec18f00f91b61481214b178f7ae0b8fbc499b")))
        (sha256
          (base32
            "0m5vpyj6312rc3xq8lrr1g2hyl26adzwvjxb3jqrm7bvqvs4i5zp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-biblio-core))
    (arguments
      '(#:files (:defaults (:exclude "biblio-core.el"))))
    (home-page
      "https://github.com/cpitclaudel/biblio.el")
    (synopsis
      "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org")
    (description
      "Documentation at https://melpa.org/#/biblio")
    (license #f)))

(define-public emacs-biblio-bibsonomy
  (package
    (name "emacs-biblio-bibsonomy")
    (version "20190105.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andreasjansson/biblio-bibsonomy.el.git")
               (commit
                 "778cc944db3c6dababe2e7fec5877fba42e8c00d")))
        (sha256
          (base32
            "0141nphan49br71bx89ias78wvchfsir3snssn3kf6l97ha1afgn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-biblio-core))
    (home-page
      "http://github.com/andreasjansson/biblio-bibsonomy/")
    (synopsis
      "Lookup bibliographic entries from Bibsonomy")
    (description
      "Documentation at https://melpa.org/#/biblio-bibsonomy")
    (license #f)))

(define-public emacs-biblio-core
  (package
    (name "emacs-biblio-core")
    (version "20210418.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/biblio.el.git")
               (commit
                 "517ec18f00f91b61481214b178f7ae0b8fbc499b")))
        (sha256
          (base32
            "0m5vpyj6312rc3xq8lrr1g2hyl26adzwvjxb3jqrm7bvqvs4i5zp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("biblio-core.el")))
    (home-page
      "https://github.com/cpitclaudel/biblio.el")
    (synopsis
      "A framework for looking up and displaying bibliographic entries")
    (description
      "Documentation at https://melpa.org/#/biblio-core")
    (license #f)))

(define-public emacs-bibliothek
  (package
    (name "emacs-bibliothek")
    (version "20190124.1828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "8a3b529d5ece261a8847298ea03ed35615cc9bfa")))
        (sha256
          (base32
            "16zalqjd2llwkp7v0218crgf3k34py8zx6lj6z7i3kbmxm9nb27q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-a))
    (arguments '(#:files ("bibliothek.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#bibliothek-el")
    (synopsis "Managing a digital library of PDFs")
    (description
      "Documentation at https://melpa.org/#/bibliothek")
    (license #f)))

(define-public emacs-bibtex-utils
  (package
    (name "emacs-bibtex-utils")
    (version "20190703.2117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plantarum/bibtex-utils.git")
               (commit
                 "26a8f0909b6adbf545a2b5e57ce7f779bf7a65af")))
        (sha256
          (base32
            "19p9v49j7yq41wifw34nwxhqnv18zjqzy6z8xbwm1j7fn78lafk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/plantarum/bibtex-utils")
    (synopsis
      "Provides utilities for extending BibTeX mode")
    (description
      "Documentation at https://melpa.org/#/bibtex-utils")
    (license #f)))

(define-public emacs-bicycle
  (package
    (name "emacs-bicycle")
    (version "20210615.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/bicycle.git")
               (commit
                 "2f0d6fbe0e363a0ed1f878316d1c0d7c1d6e1082")))
        (sha256
          (base32
            "1zlbz5kkqz4r3a2d5y563s1isbs1328kjjrfmn69gwd6w2zi5pii"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tarsius/bicycle")
    (synopsis "cycle outline and code visibility")
    (description
      "Documentation at https://melpa.org/#/bicycle")
    (license #f)))

(define-public emacs-bifocal
  (package
    (name "emacs-bifocal")
    (version "20200325.539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/riscy/bifocal-mode.git")
               (commit
                 "de8d09b08b0b30714c4f9b98c97e9577d47b9be6")))
        (sha256
          (base32
            "1z3jk232i0h2zakvbkfpb5a5qdbzfqn4zvbja1hms9349x54a07i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/riscy/bifocal-mode")
    (synopsis
      "Split-screen scrolling for comint-mode buffers")
    (description
      "Documentation at https://melpa.org/#/bifocal")
    (license #f)))

(define-public emacs-binclock
  (package
    (name "emacs-binclock")
    (version "20170802.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/binclock.el.git")
               (commit
                 "87042230d7f3fe3e9a77fae0dbab7d8f7e7794ad")))
        (sha256
          (base32
            "0bbcn3aif3qvmgbga7znivcbgn1n79278x7xvbha52zpj584xp8d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/binclock.el")
    (synopsis
      "Display the current time using a binary clock.")
    (description
      "Documentation at https://melpa.org/#/binclock")
    (license #f)))

(define-public emacs-bind-chord
  (package
    (name "emacs-bind-chord")
    (version "20171204.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "a7422fb8ab1baee19adb2717b5b47b9c3812a84c")))
        (sha256
          (base32
            "1zz2gg475254hbbxw4y82b2m2iy8cvx0phh030daax315hdbsaqb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bind-key emacs-key-chord))
    (arguments '(#:files ("bind-chord.el")))
    (home-page
      "https://github.com/waymondo/use-package-chords")
    (synopsis
      "key-chord binding helper for use-package-chords")
    (description
      "Documentation at https://melpa.org/#/bind-chord")
    (license #f)))

(define-public emacs-binder
  (package
    (name "emacs-binder")
    (version "20211030.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/binder.git")
               (commit
                 "8cefdf0959f0da33250044cf4890b69cfdcf0c5b")))
        (sha256
          (base32
            "0q4cz07s8qzkvnym7ab2l111dk88nfigpf0r3x0jcxx2qivs52s4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/binder")
    (synopsis
      "Global minor mode to facilitate multi-file writing projects")
    (description
      "Documentation at https://melpa.org/#/binder")
    (license #f)))

(define-public emacs-bing-dict
  (package
    (name "emacs-bing-dict")
    (version "20200216.110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/bing-dict.el.git")
               (commit
                 "1d581aaa9622b34f8fb83af5579fa252aa24cfef")))
        (sha256
          (base32
            "1v0ncgnj9vv2r0qbwiipg63rlhnfjz8q23jx3la2l22l0i2lyivb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cute-jumper/bing-dict.el")
    (synopsis
      "Minimalists' English-Chinese Bing dictionary")
    (description
      "Documentation at https://melpa.org/#/bing-dict")
    (license #f)))

(define-public emacs-blackboard-bold-mode
  (package
    (name "emacs-blackboard-bold-mode")
    (version "20160813.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grettke/blackboard-bold-mode.git")
               (commit
                 "5299cb064ba71baa3e331b8560bf8dd38cbbc4ed")))
        (sha256
          (base32
            "00xbcgx4snz4sd7q7ys24rsnf5wdxjn402v8y5dgn4ayx88y1rrj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grettke/blackboard-bold-mode")
    (synopsis
      "Easily insert Unicode mathematical double-struck characters")
    (description
      "Documentation at https://melpa.org/#/blackboard-bold-mode")
    (license #f)))

(define-public emacs-blgrep
  (package
    (name "emacs-blgrep")
    (version "20150401.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataka/blgrep.git")
               (commit
                 "605beda210610a5829750a987f5fcebea97af546")))
        (sha256
          (base32
            "1pslwyaq18d1z7fay2ih3n27i6b49ss62drqqb095l1jxk42xxm0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clmemo))
    (home-page "unspecified")
    (synopsis "Block grep")
    (description
      "Documentation at https://melpa.org/#/blgrep")
    (license #f)))

(define-public emacs-bln-mode
  (package
    (name "emacs-bln-mode")
    (version "20181121.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgrachten/bln-mode.git")
               (commit
                 "a601b0bf975dd1432f6552ab6afe3f4f71133b4a")))
        (sha256
          (base32
            "19y1fs5bzp2sqvh6svmj0cpvgq13zmsn852027hi11zvwi6dzqz8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mgrachten/bln-mode")
    (synopsis
      "binary line navigation minor mode for cursor movement in long lines")
    (description
      "Documentation at https://melpa.org/#/bln-mode")
    (license #f)))

(define-public emacs-blox
  (package
    (name "emacs-blox")
    (version "20210225.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kennethloeffler/blox.git")
               (commit
                 "2bf0e618451fb1da11263d8a35ffcd9210590c0a")))
        (sha256
          (base32
            "0lkhdm9jhy8wlmrmd9nqrbrczh5k75q38n6bq3gfhppycmysh9d5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kennethloeffler/blox")
    (synopsis "Interaction with Roblox tooling")
    (description
      "Documentation at https://melpa.org/#/blox")
    (license #f)))

(define-public emacs-bm
  (package
    (name "emacs-bm")
    (version "20210421.1351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joodland/bm.git")
               (commit
                 "9a31c61f44e6f1033ca43bd7f3eb33ffdb2ca595")))
        (sha256
          (base32
            "0iizqcbxm8yjv1fz2lhn23vbyzmmc8g6xazk0glv9mrldmmppgn5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joodland/bm")
    (synopsis "Visible bookmarks in buffer.")
    (description
      "Documentation at https://melpa.org/#/bm")
    (license #f)))

(define-public emacs-brazilian-holidays
  (package
    (name "emacs-brazilian-holidays")
    (version "20210302.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jadler/brazilian-holidays.git")
               (commit
                 "68811fd5f3e9d9c0572995c3ca46ead2c35eb421")))
        (sha256
          (base32
            "03p3s5cxyi3dzi4ry9l30dwcs9a3rbg8ijsb595hj56al80k9y3q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jadler/brazilian-holidays")
    (synopsis "Brazilian holidays")
    (description
      "Documentation at https://melpa.org/#/brazilian-holidays")
    (license #f)))

(define-public emacs-brightscript-mode
  (package
    (name "emacs-brightscript-mode")
    (version "20200321.2126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/viseztrance/brightscript-mode.git")
               (commit
                 "71c555c2e254629c365e6fc44c2fc4d5b6d0ae8b")))
        (sha256
          (base32
            "03f0ipzmmpv64kk9dim8nihai3mz2ys7v2qvhywpd3a52nnmlqv4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/viseztrance/brightscript-mode")
    (synopsis
      "Major mode for editing Brightscript files")
    (description
      "Documentation at https://melpa.org/#/brightscript-mode")
    (license #f)))

(define-public emacs-bubbleberry-theme
  (package
    (name "emacs-bubbleberry-theme")
    (version "20141017.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-bubbleberry-theme.git")
               (commit
                 "22e9adf4586414024e4592972022ec297321b320")))
        (sha256
          (base32
            "1aha8rzilv4k300rr4l9qjfygydfwllkbw17lhm8jz0kh9w6bd28"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jasonm23/emacs-bubbleberry-theme")
    (synopsis
      "A theme based on LightTable for Emacs24")
    (description
      "Documentation at https://melpa.org/#/bubbleberry-theme")
    (license #f)))

(define-public emacs-buffer-flip
  (package
    (name "emacs-buffer-flip")
    (version "20180307.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/killdash9/buffer-flip.el.git")
               (commit
                 "b8ecbf0251a59c351a3e44607ee502af343da64b")))
        (sha256
          (base32
            "1zb4k5v4n6j42z7kzlw2y1jp4xbkp6w9zxls3ja36g326mz5mdjz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/killdash9/buffer-flip.el")
    (synopsis
      "Cycle through buffers like Alt-Tab in Windows")
    (description
      "Documentation at https://melpa.org/#/buffer-flip")
    (license #f)))

(define-public emacs-buffer-move
  (package
    (name "emacs-buffer-move")
    (version "20160615.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lukhas/buffer-move.git")
               (commit
                 "cb517ecf8409b5fdcda472d7190c6021f0c49751")))
        (sha256
          (base32
            "0gxy58v8nyv6pmzfn8552m8a14f5lzcbkndp5xpzq4g9qvmifmj6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lukhas/buffer-move")
    (synopsis "easily swap buffers")
    (description
      "Documentation at https://melpa.org/#/buffer-move")
    (license #f)))

(define-public emacs-buffer-wrap
  (package
    (name "emacs-buffer-wrap")
    (version "20200924.345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/buffer-wrap.git")
               (commit
                 "db7ab16c98307855e7e258f215703a54911be22c")))
        (sha256
          (base32
            "05g1k43ilkfx9mxqmikkd8v6yv89lri5m4mr0prpq4yqb3xv0bx3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/buffer-wrap")
    (synopsis
      "Wrap the beginning and the end of buffer")
    (description
      "Documentation at https://melpa.org/#/buffer-wrap")
    (license #f)))

(define-public emacs-bufshow
  (package
    (name "emacs-bufshow")
    (version "20130726.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pjones/bufshow.git")
               (commit
                 "d60a554e7239e6f7520d9c3436d5ecdbc9cf6957")))
        (sha256
          (base32
            "1rh848adjqdl42rw8yf1fqbr143m0pnbrlznx0d97v4vszvbby2s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page "https://github.com/pjones/bufshow")
    (synopsis
      "A simple presentation tool for Emacs.")
    (description
      "Documentation at https://melpa.org/#/bufshow")
    (license #f)))

(define-public emacs-bundler
  (package
    (name "emacs-bundler")
    (version "20200129.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/endofunky/bundler.el.git")
               (commit
                 "43efb6be4ed118b06d787ce7fbcffd68a31732a7")))
        (sha256
          (base32
            "1r7x3xw4l5bp4dfqk2v2nrd2yl0rs064gw75nx99ifm92n7nkmgh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inf-ruby))
    (home-page
      "http://github.com/endofunky/bundler.el")
    (synopsis "Interact with Bundler from Emacs")
    (description
      "Documentation at https://melpa.org/#/bundler")
    (license #f)))

(define-public emacs-burly
  (package
    (name "emacs-burly")
    (version "20211005.1159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/burly.el.git")
               (commit
                 "c94fe0a355859fe6ddfa34cf7d362dca896f38a1")))
        (sha256
          (base32
            "0jl8dj4mk4zc0kckdj3qmrhc21xxchp4x9cgd9fdhza50icbmy92"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/burly.el")
    (synopsis
      "Save and restore frame/window configurations with buffers")
    (description
      "Documentation at https://melpa.org/#/burly")
    (license #f)))

(define-public emacs-burnt-toast
  (package
    (name "emacs-burnt-toast")
    (version "20201113.814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cedarbaum/burnt-toast.el.git")
               (commit
                 "eed66036d65b0ee26ce02371d14dce16a360acb4")))
        (sha256
          (base32
            "070p6mziljnyqzadbvwwmdv11gdmwi4h6q4rbnlp6dj91yiizksi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-alert))
    (arguments
      '(#:files (:defaults ("icons" "icons/*.png"))))
    (home-page
      "https://github.com/cedarbaum/burnt-toast.el")
    (synopsis
      "Elisp integration with the BurntToast PowerShell module")
    (description
      "Documentation at https://melpa.org/#/burnt-toast")
    (license #f)))

(define-public emacs-bury-successful-compilation
  (package
    (name "emacs-bury-successful-compilation")
    (version "20181106.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/bury-successful-compilation.git")
               (commit
                 "674644c844184605a1bb4f9487a60f7a780a6fe7")))
        (sha256
          (base32
            "13ilv4zbzwb5rz0gf69z8pvxazvwlmb5shkb055l42ksxslp49hh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Bury the *compilation* buffer after successful compilation")
    (description
      "Documentation at https://melpa.org/#/bury-successful-compilation")
    (license #f)))

(define-public emacs-buster-snippets
  (package
    (name "emacs-buster-snippets")
    (version "20151125.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/buster-snippets.el.git")
               (commit
                 "bb8769dae132659858e74d52f3f4e8790399423a")))
        (sha256
          (base32
            "11djqlw4qf3qs2rwiz7dn5q2zw5i8sykwdf4hg4awsgv8g0bbxn6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis
      "Yasnippets for the Buster javascript testing framework")
    (description
      "Documentation at https://melpa.org/#/buster-snippets")
    (license #f)))

(define-public emacs-butler
  (package
    (name "emacs-butler")
    (version "20210928.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AshtonKem/Butler.git")
               (commit
                 "10943ccdf2030187b2f7bd97337d78acb7fd31c9")))
        (sha256
          (base32
            "028c5mqhxpq007s7c6rha47zzyj6nsf49mnh99b0mfg9d95s4057"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page
      "http://www.github.com/AshtonKem/Butler.git")
    (synopsis "Emacs client for Jenkins")
    (description
      "Documentation at https://melpa.org/#/butler")
    (license #f)))

(define-public emacs-buttercup
  (package
    (name "emacs-buttercup")
    (version "20210105.2255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/emacs-buttercup.git")
               (commit
                 "108d2298cc34d906b196178ad955e3dc139e1779")))
        (sha256
          (base32
            "1vwg82haclgwgjaq0r84gj416ribv7qn1lz8ixf05xhqsvq7ja87"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/jorgenschaefer/emacs-buttercup")
    (synopsis "Behavior-Driven Emacs Lisp Testing")
    (description
      "Documentation at https://melpa.org/#/buttercup")
    (license #f)))

(define-public emacs-buttons
  (package
    (name "emacs-buttons")
    (version "20201123.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erjoalgo/emacs-buttons.git")
               (commit
                 "de41b48244574a13000c4289fdb4216a2b0490ff")))
        (sha256
          (base32
            "1kxcxzzhvrkw8sk699gadf83sw9vv1sms6jf8w08vzblbd5na567"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/erjoalgo/emacs-buttons")
    (synopsis
      "Define and visualize hierarchies of keymaps")
    (description
      "Documentation at https://melpa.org/#/buttons")
    (license #f)))

(define-public emacs-c-c-combo
  (package
    (name "emacs-c-c-combo")
    (version "20151224.255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/c-c-combo.el.git")
               (commit
                 "a261a833499a7fdc29610863b3aafc74818770ba")))
        (sha256
          (base32
            "040mcq2cwzbrf96f9mghb4314cd8xwp7ki2ix9fxpmbwiy323ld5"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.wav")))
    (home-page
      "https://www.github.com/CestDiego/c-c-combo.el")
    (synopsis
      "Make stuff happen when you reach a target wpm")
    (description
      "Documentation at https://melpa.org/#/c-c-combo")
    (license #f)))

(define-public emacs-c-eval
  (package
    (name "emacs-c-eval")
    (version "20210611.705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-c-eval.git")
               (commit
                 "fd129bfcb75475ac6820cc33862bd8efb8097fae")))
        (sha256
          (base32
            "1xfgjc0j8ck03278n014mvf768m68knyawrc3lmybr2gj04b4cz9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-c-eval")
    (synopsis
      "Compile and run one-off C code snippets")
    (description
      "Documentation at https://melpa.org/#/c-eval")
    (license #f)))

(define-public emacs-ca65-mode
  (package
    (name "emacs-ca65-mode")
    (version "20210218.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wendelscardua/ca65-mode.git")
               (commit
                 "590d90cc0e1c1864dd7ce03df99b741ba866d52a")))
        (sha256
          (base32
            "0snmxnhi7g5qx7p1z9zzlpc2zd20iq94hfvf2vavjpxw1fz4sk46"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wendelscardua/ca65-mode")
    (synopsis "Major mode for ca65 assembly files")
    (description
      "Documentation at https://melpa.org/#/ca65-mode")
    (license #f)))

(define-public emacs-cache
  (package
    (name "emacs-cache")
    (version "20111019.2300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/cache.git")
               (commit
                 "7499586b6c8224df9f5c5bc4dec96b008258d580")))
        (sha256
          (base32
            "1hp6dk84vvgkmj5lzghvqlpq3axwzgx9c7gly2yx6497fgf9jlby"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "implementation of a hash table whose key-value pairs expire")
    (description
      "Documentation at https://melpa.org/#/cache")
    (license #f)))

(define-public emacs-cacoo
  (package
    (name "emacs-cacoo")
    (version "20120319.2359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-cacoo.git")
               (commit
                 "c9fa04fbe97639b24698709530361c2bb5f3273c")))
        (sha256
          (base32
            "07kzhyqr8ycjvkknijqhsfr26zd5jc8wxm9sl8bp6pzn4jbs1dmx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-concurrent))
    (home-page
      "https://github.com/kiwanami/emacs-cacoo/")
    (synopsis
      "Minor mode for Cacoo : http://cacoo.com")
    (description
      "Documentation at https://melpa.org/#/cacoo")
    (license #f)))

(define-public emacs-cakecrumbs
  (package
    (name "emacs-cakecrumbs")
    (version "20180929.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/cakecrumbs.el.git")
               (commit
                 "cf8c1df885eee004602f73c4f841301e200e5850")))
        (sha256
          (base32
            "0s5ga39dpn9rjxjk5inkylqh56w3qgaq2wmwwgv5gsydqdyil31f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kuanyui/cakecrumbs.el")
    (synopsis
      "Show parents on header for HTML/Jade/Sass/Stylus")
    (description
      "Documentation at https://melpa.org/#/cakecrumbs")
    (license #f)))

(define-public emacs-calendar-norway
  (package
    (name "emacs-calendar-norway")
    (version "20210608.1136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/calendar-norway.el.git")
               (commit
                 "4dd8c38ef30ad45931c8ae7bcdfd720c3fcffffc")))
        (sha256
          (base32
            "02xf57dincpn7km1f3c9dnq2qv6lk07m9z5hilm3nnns0wwzqdyw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Norwegian calendar")
    (description
      "Documentation at https://melpa.org/#/calendar-norway")
    (license #f)))

(define-public emacs-calfw-cal
  (package
    (name "emacs-calfw-cal")
    (version "20170320.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-cal.el")))
    (home-page "unspecified")
    (synopsis "calendar view for emacs diary")
    (description
      "Documentation at https://melpa.org/#/calfw-cal")
    (license #f)))

(define-public emacs-calfw-howm
  (package
    (name "emacs-calfw-howm")
    (version "20170704.4")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-howm.el")))
    (home-page "unspecified")
    (synopsis "calendar view for howm")
    (description
      "Documentation at https://melpa.org/#/calfw-howm")
    (license #f)))

(define-public emacs-calfw-ical
  (package
    (name "emacs-calfw-ical")
    (version "20150703.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-ical.el")))
    (home-page "unspecified")
    (synopsis "calendar view for ical format")
    (description
      "Documentation at https://melpa.org/#/calfw-ical")
    (license #f)))

(define-public emacs-carbon-now-sh
  (package
    (name "emacs-carbon-now-sh")
    (version "20201028.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/carbon-now-sh.el.git")
               (commit
                 "6444a77a6065803cf97c3321f811bd34a8063d76")))
        (sha256
          (base32
            "039zsvhicqj4qg5dzvchj8myqfbsib1ia4v668mmalhksijldyma"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/veelenga/carbon-now-sh.el")
    (synopsis "https://carbon.now.sh integration.")
    (description
      "Documentation at https://melpa.org/#/carbon-now-sh")
    (license #f)))

(define-public emacs-cargo
  (package
    (name "emacs-cargo")
    (version "20211007.739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/cargo.el.git")
               (commit
                 "c5e66a31eff5bdc0cc89e946e6cbf16af91602ec")))
        (sha256
          (base32
            "0kyb492w35igdzn2s1mhjpy7apydw8irv6sa098lwzbq7c9xm484"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page "unspecified")
    (synopsis
      "Emacs Minor Mode for Cargo, Rust's Package Manager.")
    (description
      "Documentation at https://melpa.org/#/cargo")
    (license #f)))

(define-public emacs-cargo-mode
  (package
    (name "emacs-cargo-mode")
    (version "20210605.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ayrat555/cargo-mode.git")
               (commit
                 "b98ea60ddec30eac174012671ee09e125748a193")))
        (sha256
          (base32
            "03vdinqm1hlbcflvks54ff9hqnjdzxih5bxnkm363s7mpr070d0d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ayrat555/cargo-mode")
    (synopsis
      "Cargo Major Mode. Cargo is the Rust package manager")
    (description
      "Documentation at https://melpa.org/#/cargo-mode")
    (license #f)))

(define-public emacs-cascading-dir-locals
  (package
    (name "emacs-cascading-dir-locals")
    (version "20211013.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/cascading-dir-locals.git")
               (commit
                 "345d4b70e837d45ee84014684127e7399932d5e6")))
        (sha256
          (base32
            "160ay9rf1s4hm9xmmsd7z0mkhqrj9wpm8dpd49hhibcng8hv6z6a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/cascading-dir-locals")
    (synopsis
      "Apply all (!) .dir-locals.el from root to current directory")
    (description
      "Documentation at https://melpa.org/#/cascading-dir-locals")
    (license #f)))

(define-public emacs-cask-mode
  (package
    (name "emacs-cask-mode")
    (version "20160410.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/cask-mode.git")
               (commit
                 "7c6719d3bb4fe552958634bd5a11abc56681f3a7")))
        (sha256
          (base32
            "0gywc2mzdzq3ny0jjffa3151vi7zb9i8ddy5d63x4yhicf5sxlh1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for editing Cask files")
    (description
      "Documentation at https://melpa.org/#/cask-mode")
    (license #f)))

(define-public emacs-cask-package-toolset
  (package
    (name "emacs-cask-package-toolset")
    (version "20170921.2256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/cask-package-toolset.el.git")
               (commit
                 "2c74cd827e88c7f8360581a841e45f0b794510e7")))
        (sha256
          (base32
            "1hk5q6p1j7cqg5srr3v21xfyy7aas4hfj1a66h21c2xvfjra3hxw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-commander
            emacs-ansi
            emacs-shut-up))
    (arguments
      '(#:files (:defaults "bin" "templates")))
    (home-page
      "http://github.com/AdrieanKhisbe/cask-package-toolset.el")
    (synopsis "Toolsettize your package")
    (description
      "Documentation at https://melpa.org/#/cask-package-toolset")
    (license #f)))

(define-public emacs-ccc
  (package
    (name "emacs-ccc")
    (version "20210501.820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skk-dev/ddskk.git")
               (commit
                 "251df5b02c91311140d2375b019c1de836655fd0")))
        (sha256
          (base32
            "1gk1sx6lhf8qxq5qfynn07yxn5qv34l42q2mqwpv5z4by6wf5p9a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ccc.el")))
    (home-page "https://github.com/skk-dev/ddskk")
    (synopsis
      "buffer local cursor color control library")
    (description
      "Documentation at https://melpa.org/#/ccc")
    (license #f)))

(define-public emacs-ccls
  (package
    (name "emacs-ccls")
    (version "20200820.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/emacs-ccls.git")
               (commit
                 "675a5704c14a27931e835a431beea3631d92e8e6")))
        (sha256
          (base32
            "0l4bhyr9d8ljz1f0cfg1s2cjcmh6fiwbk5mdlvc7rrwz5hxc21is"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash))
    (home-page
      "https://github.com/MaskRay/emacs-ccls")
    (synopsis "ccls client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/ccls")
    (license #f)))

(define-public emacs-celestial-mode-line
  (package
    (name "emacs-celestial-mode-line")
    (version "20180518.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/celestial-mode-line.git")
               (commit
                 "3f5794aca99b977f1592cf1ab4516ae7922196a1")))
        (sha256
          (base32
            "01kdpfjnfnjll40n1zdp641gw8pk2vnv93a59lyx1mw1f30yvfr6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ecraven/celestial-mode-line")
    (synopsis
      "Show lunar phase and sunrise/-set time in modeline")
    (description
      "Documentation at https://melpa.org/#/celestial-mode-line")
    (license #f)))

(define-public emacs-centaur-tabs
  (package
    (name "emacs-centaur-tabs")
    (version "20211130.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ema2159/centaur-tabs.git")
               (commit
                 "5860a5c40c2318797f1274ea4c6907ae77ea1ec9")))
        (sha256
          (base32
            "10xw1cz9b6fvkn4rjsds1m2xrz9hf22k9bbdy089v49nwla5xiyk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page
      "https://github.com/ema2159/centaur-tabs")
    (synopsis
      "Aesthetic, modern looking customizable tabs plugin")
    (description
      "Documentation at https://melpa.org/#/centaur-tabs")
    (license #f)))

(define-public emacs-centered-cursor-mode
  (package
    (name "emacs-centered-cursor-mode")
    (version "20200507.1529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andre-r/centered-cursor-mode.el.git")
               (commit
                 "4093821cc9759ca5a3c6e527d4cc915fc3a5ad74")))
        (sha256
          (base32
            "0r6dzhhlpbkh2n9dmb7iyd78b5rsnkxhk84wm0kgqjy541gfvbhk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andre-r/centered-cursor-mode.el")
    (synopsis "cursor stays vertically centered")
    (description
      "Documentation at https://melpa.org/#/centered-cursor-mode")
    (license #f)))

(define-public emacs-centered-window
  (package
    (name "emacs-centered-window")
    (version "20200426.1053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anler/centered-window-mode.git")
               (commit
                 "f50859941ab5c7cbeaee410f2d38716252b552ac")))
        (sha256
          (base32
            "1l7m3gfn7j1mxs0rj1pm5avknplw2f34dd2k24n5rldfm41pf8i8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anler/centered-window-mode")
    (synopsis
      "Center the text when there's only one window")
    (description
      "Documentation at https://melpa.org/#/centered-window")
    (license #f)))

(define-public emacs-cfml-mode
  (package
    (name "emacs-cfml-mode")
    (version "20190617.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amyers634/cfml-mode.git")
               (commit
                 "2de315abddb6af088a2346e142cc305889dcd775")))
        (sha256
          (base32
            "1hqyxsnnl6zbbbfbacipd226dvhc9zlfpxvacmn6g9iv7qfc8k53"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/am2605/cfml-mode")
    (synopsis "Emacs mode for editing CFML files")
    (description
      "Documentation at https://melpa.org/#/cfml-mode")
    (license #f)))

(define-public emacs-challenger-deep-theme
  (package
    (name "emacs-challenger-deep-theme")
    (version "20210120.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/challenger-deep-theme/emacs.git")
               (commit
                 "2a799259406a8b96a688873093ffab6630a3ad3b")))
        (sha256
          (base32
            "1rl3rkrbms96wv51mwxih9b4zg1dzh3jcmx4ylgamg77abd03sg3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/challenger-deep-theme/emacs")
    (synopsis "challenger-deep Theme")
    (description
      "Documentation at https://melpa.org/#/challenger-deep-theme")
    (license #f)))

(define-public emacs-change-inner
  (package
    (name "emacs-change-inner")
    (version "20210126.1456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/change-inner.el.git")
               (commit
                 "42cad58aed2caec260f8e8ff61f78a7d3db72d1b")))
        (sha256
          (base32
            "0hs5hw36yagchpihx18059gi8b85hrccm82ynh89y7dkk1pw3wy1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis
      "Change contents based on semantic units")
    (description
      "Documentation at https://melpa.org/#/change-inner")
    (license #f)))

(define-public emacs-chapel-mode
  (package
    (name "emacs-chapel-mode")
    (version "20210513.457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/chapel-mode.git")
               (commit
                 "39fd24bb7cf44808200354ac0496be4fc4fddd9a")))
        (sha256
          (base32
            "0nb6bz11vy2fb66xibk06rk3jvkpnz2ilpbfcgdg00nzhyzhf91k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/chapel-mode")
    (synopsis
      "A major mode for the Chapel programming language")
    (description
      "Documentation at https://melpa.org/#/chapel-mode")
    (license #f)))

(define-public emacs-char-menu
  (package
    (name "emacs-char-menu")
    (version "20210321.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/char-menu.git")
               (commit
                 "16e9ce0380a7661c6dae9ccec1172fe4757df682")))
        (sha256
          (base32
            "0cbs6lpljldz62vy2qqb3bdp3yarx84qpnmayyyah128snb9ic8v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy-menu))
    (home-page "https://github.com/mrkkrp/char-menu")
    (synopsis
      "Create your own menu for fast insertion of arbitrary symbols")
    (description
      "Documentation at https://melpa.org/#/char-menu")
    (license #f)))

(define-public emacs-cheat-sh
  (package
    (name "emacs-cheat-sh")
    (version "20210607.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/cheat-sh.el.git")
               (commit
                 "33bae22feae8d3375739c6bdef08d0dcdf47ee42")))
        (sha256
          (base32
            "0blyhgdk0li5slkhlj689jdal6d1qr4g2acz8i0jm4kvgysjilb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/cheat-sh.el")
    (synopsis "Interact with cheat.sh")
    (description
      "Documentation at https://melpa.org/#/cheat-sh")
    (license #f)))

(define-public emacs-chembalance
  (package
    (name "emacs-chembalance")
    (version "20210601.1653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergiruiztrepat/chembalance.git")
               (commit
                 "ae36c823ca151f1dc6144ec96b2f5e98181c0dbb")))
        (sha256
          (base32
            "1n01h4lwfcm0skf0pgh7p87bmk4x3r6qsr5jcgm1ldafsx35x60g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sergiruiztrepat/chembalance")
    (synopsis "Balance chemical equations")
    (description
      "Documentation at https://melpa.org/#/chembalance")
    (license #f)))

(define-public emacs-chinese-conv
  (package
    (name "emacs-chinese-conv")
    (version "20170807.2128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gucong/emacs-chinese-conv.git")
               (commit
                 "b56815bbb163d642e97fa73093b5a7e87cc32574")))
        (sha256
          (base32
            "1bc3yn8y60y6a4vpqv39arn1pkcpl4s4n0sz9446f6m1lcal4c3r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gucong/emacs-chinese-conv")
    (synopsis
      "Conversion between Chinese Characters with opencc or cconv")
    (description
      "Documentation at https://melpa.org/#/chinese-conv")
    (license #f)))

(define-public emacs-chinese-yasdcv
  (package
    (name "emacs-chinese-yasdcv")
    (version "20171015.144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/chinese-yasdcv.git")
               (commit
                 "5ab830daf1273d5a5cddcb94b56a9737f12d996f")))
        (sha256
          (base32
            "1mv1n6m73aamxj18i851ww53q7p4ydiqgaapxyvjbm6sx8ddz9ak"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (home-page
      "https://github.com/tumashu/chinese-yasdcv")
    (synopsis "Yet another StarDict frontend")
    (description
      "Documentation at https://melpa.org/#/chinese-yasdcv")
    (license #f)))

(define-public emacs-chocolate-theme
  (package
    (name "emacs-chocolate-theme")
    (version "20210128.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SavchenkoValeriy/emacs-chocolate-theme.git")
               (commit
                 "ccc05f7ad96d3d1332727689bf6250443adc7ec0")))
        (sha256
          (base32
            "1d8a9jwv9y0sncw24k840c8yyrig30f2d6q2zqlc09f05yzq9p9p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/SavchenkoValeriy/emacs-chocolate-theme")
    (synopsis "A dark chocolaty theme")
    (description
      "Documentation at https://melpa.org/#/chocolate-theme")
    (license #f)))

(define-public emacs-chronometer
  (package
    (name "emacs-chronometer")
    (version "20190304.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcelotoledo/chronometer.git")
               (commit
                 "8457b296ef87be339cbe47730b922757d60bdcd5")))
        (sha256
          (base32
            "1apzb0jccw91gdynqa1722bbalzj4kp9fq25zzw1rxsrgh3mgmc5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/marcelotoledo/chronometer")
    (synopsis "a [not so] simple chronometer")
    (description
      "Documentation at https://melpa.org/#/chronometer")
    (license #f)))

(define-public emacs-chronometrist-goal
  (package
    (name "emacs-chronometrist-goal")
    (version "20210510.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://tildegit.org/contrapunctus/chronometrist-goal.git")
               (commit
                 "6cb939d160f5d5966d7853aa23f3ed7c7ef9df44")))
        (sha256
          (base32
            "05jcn67fzf349h3vqvfrwhklan0i037mp0nq53wghfzapv1m7lv8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-chronometrist))
    (home-page
      "https://tildegit.org/contrapunctus/chronometrist-goal")
    (synopsis
      "Adds support for time goals to Chronometrist")
    (description
      "Documentation at https://melpa.org/#/chronometrist-goal")
    (license #f)))

(define-public emacs-chruby
  (package
    (name "emacs-chruby")
    (version "20180114.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plexus/chruby.el.git")
               (commit
                 "42bc6d521f832eca8e2ba210f30d03ad5529788f")))
        (sha256
          (base32
            "06pvjw40qk017py9km26vjrh90acycnkr5r04nxf664qqkjlg2mc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/plexus/chruby.el")
    (synopsis "Emacs integration for chruby")
    (description
      "Documentation at https://melpa.org/#/chruby")
    (license #f)))

(define-public emacs-cider
  (package
    (name "emacs-cider")
    (version "20211222.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/cider.git")
               (commit
                 "28bbde53949176e4c4e55728905a347291b90f7f")))
        (sha256
          (base32
            "0w5h9h84mndz1k5s8l7f5l5ysn0744gpjp9xl4wwsy1ykc06gs4y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clojure-mode
            emacs-parseedn
            emacs-pkg-info
            emacs-queue
            emacs-spinner
            emacs-sesman))
    (arguments
      '(#:files ("*.el" (:exclude ".dir-locals.el"))))
    (home-page
      "http://www.github.com/clojure-emacs/cider")
    (synopsis
      "Clojure Interactive Development Environment that Rocks")
    (description
      "Documentation at https://melpa.org/#/cider")
    (license #f)))

(define-public emacs-cinspect
  (package
    (name "emacs-cinspect")
    (version "20150716.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inlinestyle/cinspect-mode.git")
               (commit
                 "4e199a90f89b335cccda1518aa0963e0a1d4fbab")))
        (sha256
          (base32
            "190n4kdcqdwglhnawnj9mqjarmcaqylxipc07whmrii0jv279kjw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deferred emacs-python-environment))
    (home-page
      "https://github.com/inlinestyle/cinspect-mode")
    (synopsis
      "Use cinspect to look at the CPython source of builtins and other C objects!")
    (description
      "Documentation at https://melpa.org/#/cinspect")
    (license #f)))

(define-public emacs-circadian
  (package
    (name "emacs-circadian")
    (version "20181024.1256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/circadian.el.git")
               (commit
                 "925451a00e6defd4f5ac1a7fd76ffefefdbce3ef")))
        (sha256
          (base32
            "0bmjrfijaicwa5vvlfr47xmjcgj2npmqfcj63nczxc316kka4q9q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GuidoSchmidt/circadian")
    (synopsis "Theme-switching based on daytime")
    (description
      "Documentation at https://melpa.org/#/circadian")
    (license #f)))

(define-public emacs-circe-notifications
  (package
    (name "emacs-circe-notifications")
    (version "20180102.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eqyiel/circe-notifications.git")
               (commit
                 "291149ac12877bbd062da993479d3533a26862b0")))
        (sha256
          (base32
            "18mva5nn919c86sgk6kdh437vdnlh9bk7fg10xqcpics1yv3viaw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-circe emacs-alert))
    (home-page
      "https://github.com/eqyiel/circe-notifications")
    (synopsis "Add desktop notifications to Circe.")
    (description
      "Documentation at https://melpa.org/#/circe-notifications")
    (license #f)))

(define-public emacs-citeproc-org
  (package
    (name "emacs-citeproc-org")
    (version "20200915.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andras-simonyi/citeproc-org.git")
               (commit
                 "0fb4c96f48b3055a59a397af24d3f1a82cf77b66")))
        (sha256
          (base32
            "1n69016gds7kmf3253w36i40rf26g3qvgac7n0z67im9jvjfa6a7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-citeproc
            emacs-org-ref))
    (arguments
      '(#:files
        (:defaults
          "chicago-author-date.csl"
          "locales-en-US.xml")))
    (home-page
      "https://github.com/andras-simonyi/citeproc-org")
    (synopsis
      "Render org-mode references in CSL styles")
    (description
      "Documentation at https://melpa.org/#/citeproc-org")
    (license #f)))

(define-public emacs-cl-format
  (package
    (name "emacs-cl-format")
    (version "20210831.530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/akater/elisp-cl-format.git")
               (commit
                 "ad1a4fb6bc91e65ea90bcf6792cc5a1be5380f9d")))
        (sha256
          (base32
            "10z53j111wvgy0fbnxm3mpc9an75dblvy5zkq9733vjliycbbgv4"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/akater/elisp-cl-format")
    (synopsis "CL format routine.")
    (description
      "Documentation at https://melpa.org/#/cl-format")
    (license #f)))

(define-public emacs-cl-libify
  (package
    (name "emacs-cl-libify")
    (version "20181130.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/cl-libify.git")
               (commit
                 "f215866d7d7c52e84220cd541f40608a5b85abf0")))
        (sha256
          (base32
            "1k8x48cayanwajz81h5kfysqvnf58wrb9j4f9rbaqzg2nrnqw5sm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/cl-libify")
    (synopsis
      "Update elisp code to use cl-lib instead of cl")
    (description
      "Documentation at https://melpa.org/#/cl-libify")
    (license #f)))

(define-public emacs-click-mode
  (package
    (name "emacs-click-mode")
    (version "20180611.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmalehorn/click-mode.git")
               (commit
                 "b94ea8cce89cf0e753b2ab915202d49ffc470fb6")))
        (sha256
          (base32
            "0bz0wp40khha96k74g9vgnzm7xzsrh0wh4vks205pjhaxabhb5vh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bmalehorn/click-mode")
    (synopsis
      "Major mode for the Click Modular Router Project")
    (description
      "Documentation at https://melpa.org/#/click-mode")
    (license #f)))

(define-public emacs-clippy
  (package
    (name "emacs-clippy")
    (version "20161028.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/clippy.el.git")
               (commit
                 "e77f6b63e54d74e243be98accad474e38f7e2a86")))
        (sha256
          (base32
            "052xqscb63kjj6z9m0kk5jlfsy84g848lnpcn5yhz3km2r6nigqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pos-tip))
    (home-page "https://github.com/Fuco1/clippy.el")
    (synopsis
      "Show tooltip with function documentation at point")
    (description
      "Documentation at https://melpa.org/#/clippy")
    (license #f)))

(define-public emacs-cljr-helm
  (package
    (name "emacs-cljr-helm")
    (version "20160913.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philjackson/cljr-helm.git")
               (commit
                 "f2fc7b698a56e4a44d5dfbc6a55d77a93c0fa9a4")))
        (sha256
          (base32
            "0jy6hkz8sr1bplymwxnjg4q408cw2dgfrv70chlw3y5ddc4cingj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clj-refactor emacs-helm-core))
    (home-page
      "https://github.com/philjackson/cljr-helm")
    (synopsis
      "Wraps clojure refactor commands with helm")
    (description
      "Documentation at https://melpa.org/#/cljr-helm")
    (license #f)))

(define-public emacs-cljsbuild-mode
  (package
    (name "emacs-cljsbuild-mode")
    (version "20160402.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kototama/cljsbuild-mode.git")
               (commit
                 "fa2315660cb3ce944b5e16c679dcf5afd6a97f4c")))
        (sha256
          (base32
            "0flnfivz6w3pkham3g08m3xzy3jg1rzvxfa00vkr7ll8iyv4ypqc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kototama/cljsbuild-mode")
    (synopsis
      "A minor mode for the ClojureScript 'lein cljsbuild' command")
    (description
      "Documentation at https://melpa.org/#/cljsbuild-mode")
    (license #f)))

(define-public emacs-clojure-mode
  (package
    (name "emacs-clojure-mode")
    (version "20211119.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clojure-mode.git")
               (commit
                 "7d3c0c16e4aa14a051b393c249f0f4d307a2c74d")))
        (sha256
          (base32
            "1b3442z4awk3h1ns0fn0mif8vzlrdqzq1gbj9k848df5qz2qgvcv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("clojure-mode.el")))
    (home-page
      "http://github.com/clojure-emacs/clojure-mode")
    (synopsis "Major mode for Clojure code")
    (description
      "Documentation at https://melpa.org/#/clojure-mode")
    (license #f)))

(define-public emacs-clojure-quick-repls
  (package
    (name "emacs-clojure-quick-repls")
    (version "20150814.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/symfrog/clojure-quick-repls.git")
               (commit
                 "730311dd3ac4e0aceb0204f818b422017873467f")))
        (sha256
          (base32
            "1qxhgqldvzzbpr3cxkj3a1zhpjck04pcqli9nnnb75hawi7vi8si"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider emacs-dash))
    (home-page
      "https://github.com/symfrog/clojure-quick-repls")
    (synopsis
      "Quickly create Clojure and ClojureScript repls for a project.")
    (description
      "Documentation at https://melpa.org/#/clojure-quick-repls")
    (license #f)))

(define-public emacs-closql
  (package
    (name "emacs-closql")
    (version "20210927.2245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/closql.git")
               (commit
                 "15f906c393db1a0fb6577afc3cf59466531eafef")))
        (sha256
          (base32
            "1xa9rzyfm6bfskm2mfckd7jwmjwcraky7vsp7yyrnrqfksrl5na8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql-sqlite))
    (home-page
      "https://github.com/emacscollective/closql")
    (synopsis "store EIEIO objects using EmacSQL")
    (description
      "Documentation at https://melpa.org/#/closql")
    (license #f)))

(define-public emacs-clues-theme
  (package
    (name "emacs-clues-theme")
    (version "20161213.1127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-clues-theme.git")
               (commit
                 "abd61f2b7f3e98de58ca26e6d1230e70c6406cc7")))
        (sha256
          (base32
            "118k5bnlk9sc2n04saaxjncmc1a4m1wlf2y7xyklpffkazbd0m72"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/emacs-clues-theme")
    (synopsis
      "an Emacs 24 theme which may well be fully awesome...")
    (description
      "Documentation at https://melpa.org/#/clues-theme")
    (license #f)))

(define-public emacs-cmake-ide
  (package
    (name "emacs-cmake-ide")
    (version "20210610.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atilaneves/cmake-ide.git")
               (commit
                 "28dc4ab5bd01d99553901b4efeb7234280928b18")))
        (sha256
          (base32
            "01xpknvj5mm2d3z6xzaw6cyb26hrzhvs44763ajvgw9l43mviwy3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-levenshtein emacs-s))
    (home-page
      "http://github.com/atilaneves/cmake-ide")
    (synopsis
      "Calls CMake to find out include paths and other compiler flags")
    (description
      "Documentation at https://melpa.org/#/cmake-ide")
    (license #f)))

(define-public emacs-cmake-mode
  (package
    (name "emacs-cmake-mode")
    (version "20210104.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.kitware.com/cmake/cmake.git")
               (commit
                 "7de214699f2bfde97e21bc440be30e6866b6e746")))
        (sha256
          (base32
            "1076xha0rzwp6qrcvy0lcjwmv6rsfg3hxc91mba91xjmcqvvgi9h"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("Auxiliary/*.el")))
    (home-page "unspecified")
    (synopsis "major-mode for editing CMake sources")
    (description
      "Documentation at https://melpa.org/#/cmake-mode")
    (license #f)))

(define-public emacs-cobalt
  (package
    (name "emacs-cobalt")
    (version "20180304.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cobalt-org/cobalt.el.git")
               (commit
                 "88ef936373a5493183d49ec69ca541bcc749a109")))
        (sha256
          (base32
            "0mm9lj5mvidb69zq6a9daibdm4l6y4vw389hr5052qnj0qljb757"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cobalt-org/cobalt.el")
    (synopsis
      "Easily use the Cobalt.rs static site generator")
    (description
      "Documentation at https://melpa.org/#/cobalt")
    (license #f)))

(define-public emacs-cobra-mode
  (package
    (name "emacs-cobra-mode")
    (version "20140116.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Nekroze/cobra-mode.git")
               (commit
                 "acd6e53f6286af5176471d01f25257e5ddb6dd01")))
        (sha256
          (base32
            "1sx8grp3j7zcma3nb7zj6kijkdqx166vw1qgmm29hvx48bys6vlp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Nekroze/cobra-mode")
    (synopsis
      "Major mode for .NET-based Cobra language")
    (description
      "Documentation at https://melpa.org/#/cobra-mode")
    (license #f)))

(define-public emacs-code-archive
  (package
    (name "emacs-code-archive")
    (version "20190612.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/code-archive.git")
               (commit
                 "1ad9af6679d0294c3056eab9cad673f29c562721")))
        (sha256
          (base32
            "0s0zakrmbx9gr7ippnyqngc09xj9f7bsv0mv11p062a8pkilg219"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/code-archive")
    (synopsis
      "git supported code archive and reference for org-mode")
    (description
      "Documentation at https://melpa.org/#/code-archive")
    (license #f)))

(define-public emacs-code-cells
  (package
    (name "emacs-code-cells")
    (version "20211014.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astoff/code-cells.el.git")
               (commit
                 "68148cfc1f0723e554a09cbae4c732cfc348ecfd")))
        (sha256
          (base32
            "07y8ry0rwlxqdw39fi2maw114yyga8yzlbrxypw6irhnpm8mscjw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/astoff/code-cells.el")
    (synopsis
      "Work with code split into cells, including Jupyter notebooks")
    (description
      "Documentation at https://melpa.org/#/code-cells")
    (license #f)))

(define-public emacs-code-library
  (package
    (name "emacs-code-library")
    (version "20160426.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/code-library.git")
               (commit
                 "32d59c5c845d6dbdda18f9bd1c03a58d55417fc5")))
        (sha256
          (base32
            "1n00bb39jgx02zdgla85zx0a338xir0zh0af6xca14kg5bx07vsv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gist))
    (home-page "unspecified")
    (synopsis
      "use org-mode to collect code snippets")
    (description
      "Documentation at https://melpa.org/#/code-library")
    (license #f)))

(define-public emacs-codebug
  (package
    (name "emacs-codebug")
    (version "20140929.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shano/emacs-codebug.git")
               (commit
                 "ac0e4331ba94ccb5203fa492570e1ca6b90c3d52")))
        (sha256
          (base32
            "11v671c4338bsizbmm7ypp4x9s5hiwyddsg2ig6h157gfv2597pp"))))
    (build-system melpa-build-system)
    (home-page "http://www.shanedowling.com/")
    (synopsis "Interact with codebug")
    (description
      "Documentation at https://melpa.org/#/codebug")
    (license #f)))

(define-public emacs-coin-ticker
  (package
    (name "emacs-coin-ticker")
    (version "20170611.727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eklitzke/coin-ticker-mode.git")
               (commit
                 "9efab90fe4e6f29464af14e0d8fd1e20c0147b80")))
        (sha256
          (base32
            "0xnrh6v4s2s3fgvw0v9fl48dlk4r2p6axp7xf41gzb1ai81yczhv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/eklitzke/coin-ticker-mode")
    (synopsis "Show a cryptocurrency price ticker")
    (description
      "Documentation at https://melpa.org/#/coin-ticker")
    (license #f)))

(define-public emacs-color-theme-buffer-local
  (package
    (name "emacs-color-theme-buffer-local")
    (version "20170126.601")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vic/color-theme-buffer-local.git")
               (commit
                 "e606dec66f16a06140b9aad625a4fd52bca4f936")))
        (sha256
          (base32
            "0c04fy3hc8wc0aabilqx9mcipmd41rmshqjxc3z8m1w0bm4288g1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-color-theme))
    (arguments
      '(#:files ("color-theme-buffer-local.el")))
    (home-page
      "http://github.com/vic/color-theme-buffer-local")
    (synopsis "Install color-themes by buffer.")
    (description
      "Documentation at https://melpa.org/#/color-theme-buffer-local")
    (license #f)))

(define-public emacs-color-theme-modern
  (package
    (name "emacs-color-theme-modern")
    (version "20200729.921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/replace-colorthemes.git")
               (commit
                 "a996eca37f4df726eec95406deb76b538320771a")))
        (sha256
          (base32
            "1fgcd6vdqknqb1s1hwqqspk84a8xnxmrcnlic1j0x558i2yj4l2x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-jp/replace-colorthemes")
    (synopsis
      "Reimplement colortheme with Emacs 24 theme framework.")
    (description
      "Documentation at https://melpa.org/#/color-theme-modern")
    (license #f)))

(define-public emacs-color-theme-sanityinc-solarized
  (package
    (name "emacs-color-theme-sanityinc-solarized")
    (version "20200805.603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/color-theme-sanityinc-solarized.git")
               (commit
                 "7ef39ac9d99bfb699903cfc3623521c0ceec7b86")))
        (sha256
          (base32
            "18x1hhq5v9agv2gvragwvxgzxfixfqy8pcbqhi63yqxmx30zlqj1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/color-theme-sanityinc-solarized")
    (synopsis
      "A version of Ethan Schoonover's Solarized themes")
    (description
      "Documentation at https://melpa.org/#/color-theme-sanityinc-solarized")
    (license #f)))

(define-public emacs-colorless-themes
  (package
    (name "emacs-colorless-themes")
    (version "20210102.1035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("colorless-themes.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A macro to generate mostly colorless themes")
    (description
      "Documentation at https://melpa.org/#/colorless-themes")
    (license #f)))

(define-public emacs-column-enforce-mode
  (package
    (name "emacs-column-enforce-mode")
    (version "20200605.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/column-enforce-mode.git")
               (commit
                 "14a7622f2268890e33536ccd29510024d51ee96f")))
        (sha256
          (base32
            "1vxra5vk78yns2sw89m41bggczqg1akq6xvzfs9kylhkg5yz3g7g"))))
    (build-system melpa-build-system)
    (home-page
      "www.github.com/jordonbiondo/column-enforce-mode")
    (synopsis
      "Highlight text that extends beyond a  column")
    (description
      "Documentation at https://melpa.org/#/column-enforce-mode")
    (license #f)))

(define-public emacs-comb
  (package
    (name "emacs-comb")
    (version "20201010.1147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyrus-and/comb.git")
               (commit
                 "31f3e94afb2a7f7d18d30c2468a0c683700f7a66")))
        (sha256
          (base32
            "00xwlx9w76g557qhkgifdbxx3qr2i3l1vqldyhwa4qny3qmy6h2w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cyrus-and/comb")
    (synopsis
      "Interactive code auditing and grep tool")
    (description
      "Documentation at https://melpa.org/#/comb")
    (license #f)))

(define-public emacs-comby
  (package
    (name "emacs-comby")
    (version "20200629.140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/comby.el.git")
               (commit
                 "928b8b8959a2556aba5526f2a25801341eb59dc3")))
        (sha256
          (base32
            "1f0155fyvh1m20ahl6wqask4qx6jp3lfwxj894cda9j4y8gnr5iq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/s-kostyaev/comby.el")
    (synopsis "Emacs comby integration")
    (description
      "Documentation at https://melpa.org/#/comby")
    (license #f)))

(define-public emacs-command-queue
  (package
    (name "emacs-command-queue")
    (version "20160328.1725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/command-queue.git")
               (commit
                 "f327c6f852592229a755ec6de0c62c6aeafd6659")))
        (sha256
          (base32
            "0216hzdl4h1jssw5g2y95z4yx7abqsaxpk1s78r35w5cnx7kplrc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Yuki-Inoue/command-queue")
    (synopsis "shell command queue")
    (description
      "Documentation at https://melpa.org/#/command-queue")
    (license #f)))

(define-public emacs-comment-dwim-2
  (package
    (name "emacs-comment-dwim-2")
    (version "20210101.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remyferre/comment-dwim-2.git")
               (commit
                 "7cdafd6d98234a7402865b8abdae54a2f2551c94")))
        (sha256
          (base32
            "0f9gzgn4d2ir79nvv5vqhn4s4131dphzpfzfcb0iy4fx6mhmca5b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remyferre/comment-dwim-2")
    (synopsis
      "An all-in-one comment command to rule them all")
    (description
      "Documentation at https://melpa.org/#/comment-dwim-2")
    (license #f)))

(define-public emacs-comment-tags
  (package
    (name "emacs-comment-tags")
    (version "20170910.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vincekd/comment-tags.git")
               (commit
                 "7d914097f0a03484af71e621db533737fc692f58")))
        (sha256
          (base32
            "0s86a7078arck9z4gzkp2hnxyklprl0zh5hsw7nkyyscjydly80i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vincekd/comment-tags")
    (synopsis
      "Highlight & navigate comment tags like 'TODO'.")
    (description
      "Documentation at https://melpa.org/#/comment-tags")
    (license #f)))

(define-public emacs-company
  (package
    (name "emacs-company")
    (version "20211223.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-mode.git")
               (commit
                 "54cf6f8d0990b4e9210ea55af86eae13603d3f33")))
        (sha256
          (base32
            "18i74w9wrzn4c007a1icl20x5my77pmil0bxd704riyj59kc49lh"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons")))
    (home-page "http://company-mode.github.io/")
    (synopsis "Modular text completion framework")
    (description
      "Documentation at https://melpa.org/#/company")
    (license #f)))

(define-public emacs-company-ansible
  (package
    (name "emacs-company-ansible")
    (version "20200306.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krzysztof-magosa/company-ansible.git")
               (commit
                 "79dd421b161efa49fbdffad57fa40edb41f484a3")))
        (sha256
          (base32
            "0b05n6m47vyhirxfqzapzl4gf179aks1296qsw1sw8v84kb5kl0x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/krzysztof-magosa/company-ansible")
    (synopsis "A company back-end for ansible")
    (description
      "Documentation at https://melpa.org/#/company-ansible")
    (license #f)))

(define-public emacs-company-arduino
  (package
    (name "emacs-company-arduino")
    (version "20160306.1739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/company-arduino.git")
               (commit
                 "d7e369702b8eee63e6dfdeba645ce28b6dc66fb1")))
        (sha256
          (base32
            "06v7y7gxlxrxdaqy8c93niy1di80r738cq7rkghnhqi174pwl1wv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-irony
            emacs-company-irony
            emacs-company-c-headers
            emacs-arduino-mode))
    (home-page
      "https://github.com/yuutayamada/company-arduino")
    (synopsis "company-mode for Arduino")
    (description
      "Documentation at https://melpa.org/#/company-arduino")
    (license #f)))

(define-public emacs-company-axiom
  (package
    (name "emacs-company-axiom")
    (version "20191027.1928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pdo/axiom-environment")
               (commit
                 "e60de5ed107ffeb530a56d24d04f38988124d12b")))
        (sha256
          (base32
            "0p8kbxfcrx1ib8g17g6h2i2ygy35qq992n3s2xa6ysij7wrfn4hd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-axiom-environment))
    (arguments '(#:files ("company-axiom.el")))
    (home-page "unspecified")
    (synopsis
      "A company-mode backend for the axiom-environment system")
    (description
      "Documentation at https://melpa.org/#/company-axiom")
    (license #f)))

(define-public emacs-company-coq
  (package
    (name "emacs-company-coq")
    (version "20210708.2357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/company-coq.git")
               (commit
                 "382db93374380e5db56f02934ee32bbe39159019")))
        (sha256
          (base32
            "1vlbw54a02qy77ad2qgd6sy7y3b6x1y1nm3bjxcd7f67hnncjg0p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-yasnippet
            emacs-company
            emacs-company-math))
    (arguments '(#:files (:defaults "refman")))
    (home-page
      "https://github.com/cpitclaudel/company-coq")
    (synopsis
      "A collection of extensions for Proof General's Coq mode")
    (description
      "Documentation at https://melpa.org/#/company-coq")
    (license #f)))

(define-public emacs-company-ctags
  (package
    (name "emacs-company-ctags")
    (version "20211211.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/company-ctags.git")
               (commit
                 "313508ba5d4f1e4b5d5d554faaa74076201c3248")))
        (sha256
          (base32
            "0hf7lq6rcs6xhmgpc8bwk115rykyfvakcjqpanlsh5m3fdswjq03"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/redguardtoo/company-ctags")
    (synopsis
      "Fastest company-mode completion backend for ctags")
    (description
      "Documentation at https://melpa.org/#/company-ctags")
    (license #f)))

(define-public emacs-company-distel
  (package
    (name "emacs-company-distel")
    (version "20180827.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/distel-completion.git")
               (commit
                 "acc4c0a5521904203d797fe96b08e5fae4233c7e")))
        (sha256
          (base32
            "0yvp3dwa9mwfyrqla27ycwyjad4bp1267bxv0chxcr4528hnygl3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-distel-completion-lib))
    (arguments '(#:files ("company-distel.el")))
    (home-page
      "github.com/sebastiw/distel-completion")
    (synopsis
      "Erlang/distel completion backend for company-mode")
    (description
      "Documentation at https://melpa.org/#/company-distel")
    (license #f)))

(define-public emacs-company-erlang
  (package
    (name "emacs-company-erlang")
    (version "20170123.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/company-erlang.git")
               (commit
                 "bc0524a16f17b66c7397690e4ca0e004f09ea6c5")))
        (sha256
          (base32
            "04wm3i65fpzln7sdcny88hfjfm0n7wy44ffsr3697x4l95d0bnyh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy-erlang-complete emacs-company))
    (arguments '(#:files (:defaults)))
    (home-page "unspecified")
    (synopsis
      "company backend based on ivy-erlang-complete")
    (description
      "Documentation at https://melpa.org/#/company-erlang")
    (license #f)))

(define-public emacs-company-fuzzy
  (package
    (name "emacs-company-fuzzy")
    (version "20211104.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/company-fuzzy.git")
               (commit
                 "44ef04f5f21285d68bd419f4f153e192777d9991")))
        (sha256
          (base32
            "1gca3i7ylk28wx7wa722ismy6irya96k8qf1zjh851sn2m7bkfin"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-s emacs-ht))
    (home-page
      "https://github.com/jcs-elpa/company-fuzzy")
    (synopsis "Fuzzy matching for `company-mode'")
    (description
      "Documentation at https://melpa.org/#/company-fuzzy")
    (license #f)))

(define-public emacs-company-glsl
  (package
    (name "emacs-company-glsl")
    (version "20210109.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/company-glsl.git")
               (commit
                 "3a40501ba831a30a7fd3e8529b20d1305d0454aa")))
        (sha256
          (base32
            "0khpvi23jbgs2rbwjawl56a219z8r3i44s4zq10an91r0q8d8n4l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-glsl-mode))
    (home-page
      "https://github.com/guidoschmidt/company-glsl")
    (synopsis "Support glsl in company-mode")
    (description
      "Documentation at https://melpa.org/#/company-glsl")
    (license #f)))

(define-public emacs-company-irony-c-headers
  (package
    (name "emacs-company-irony-c-headers")
    (version "20151018.909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hotpxl/company-irony-c-headers.git")
               (commit
                 "72c386aeb079fb261d9ec02e39211272f76bbd97")))
        (sha256
          (base32
            "1f462v8xq2hdsr4ks4i79icpfz6fjpb4q7khnx6si55agxj3rvaq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-irony))
    (home-page
      "https://github.com/hotpxl/company-irony-c-headers")
    (synopsis
      "Company mode backend for C/C++ header files with Irony")
    (description
      "Documentation at https://melpa.org/#/company-irony-c-headers")
    (license #f)))

(define-public emacs-company-lean
  (package
    (name "emacs-company-lean")
    (version "20210305.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "4a90f2ae6e33c162a3dd6f624fb080c2ed8e8494")))
        (sha256
          (base32
            "1zikz4qaxabs3j86gljpp2qbhbzxsjzz544k9vsngibd468dszlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-company
            emacs-lean-mode))
    (arguments '(#:files ("company-lean.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "A company backend for lean-mode")
    (description
      "Documentation at https://melpa.org/#/company-lean")
    (license #f)))

(define-public emacs-company-ledger
  (package
    (name "emacs-company-ledger")
    (version "20210910.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/debanjum/company-ledger.git")
               (commit
                 "c6911b7e39b29c0d5f2541392ff485b0f53fd366")))
        (sha256
          (base32
            "08g4f8w9lhfypy4m3vcfg8d8gqn7w2g8qjksl7bzcnwg2d0yqld8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/debanjum/company-ledger")
    (synopsis
      "Fuzzy auto-completion for Ledger & friends")
    (description
      "Documentation at https://melpa.org/#/company-ledger")
    (license #f)))

(define-public emacs-company-manually
  (package
    (name "emacs-company-manually")
    (version "20200709.913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yanghaoxie/company-manually.git")
               (commit
                 "44c7a655e5f2a462835a96d1f0ed2ce434848416")))
        (sha256
          (base32
            "007zyvr5mw16j7gxxx8bm0jpy8hyph9xrmxsi1dy2pshb2fnpq95"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-ivy))
    (home-page
      "https://github.com/yanghaoxie/company-manually")
    (synopsis
      "A company backend that lets you manually build candidates")
    (description
      "Documentation at https://melpa.org/#/company-manually")
    (license #f)))

(define-public emacs-company-nand2tetris
  (package
    (name "emacs-company-nand2tetris")
    (version "20171201.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/nand2tetris.el.git")
               (commit
                 "33acee34d24b1c6a87db833b7d23449cf858f64f")))
        (sha256
          (base32
            "0sfa674g1qm280s0pc3n6qiiphj5i9ibknckx5capkrkxb5cwpkw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nand2tetris emacs-company))
    (arguments '(#:files ("company-nand2tetris.el")))
    (home-page
      "http://www.github.com/CestDiego/nand2tetris.el/")
    (synopsis
      "Company backend for nand2tetris major mode")
    (description
      "Documentation at https://melpa.org/#/company-nand2tetris")
    (license #f)))

(define-public emacs-company-native-complete
  (package
    (name "emacs-company-native-complete")
    (version "20200315.2144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/emacs-native-shell-complete.git")
               (commit
                 "cf142e84eaa4dd91bc75d96a5d26dab5e38eba4c")))
        (sha256
          (base32
            "01li6c271v5j35chg3a8nl9az3bwq4hk1j8lfjq5a27p91iszpc0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-native-complete))
    (arguments
      '(#:files ("company-native-complete.el")))
    (home-page
      "https://github.com/CeleritasCelery/emacs-native-shell-complete")
    (synopsis
      "Company completion using native-complete")
    (description
      "Documentation at https://melpa.org/#/company-native-complete")
    (license #f)))

(define-public emacs-company-php
  (package
    (name "emacs-company-php")
    (version "20211204.558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "fc834dcc193e7168ffa0b3ae81ab3eefa4fd3c59")))
        (sha256
          (base32
            "08hnw5dbcs4ww2ir7ilnfc6r0b123alh4l8i1mzvng0h3mvmlhgq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ac-php-core emacs-company))
    (arguments '(#:files ("company-php.el")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "A company back-end for PHP.")
    (description
      "Documentation at https://melpa.org/#/company-php")
    (license #f)))

(define-public emacs-company-plsense
  (package
    (name "emacs-company-plsense")
    (version "20180118.58")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/company-plsense.git")
               (commit
                 "b48e3181e08ec597269621d621aa06636f02d883")))
        (sha256
          (base32
            "14rawd5xfgnkhdpp43mz4a5mf480949ny5hr5w6v5djmsibqxw5s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-s))
    (home-page
      "https://github.com/CeleritasCelery/company-plsense")
    (synopsis "Company backend for Perl")
    (description
      "Documentation at https://melpa.org/#/company-plsense")
    (license #f)))

(define-public emacs-company-reftex
  (package
    (name "emacs-company-reftex")
    (version "20210418.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheBB/company-reftex.git")
               (commit
                 "42eb98c6504e65989635d95ab81b65b9d5798e76")))
        (sha256
          (base32
            "0x5zhhy70cdhbark2vm364bazg2mbwlhy7123qyq02knsjdwwqrl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-company))
    (home-page
      "https://github.com/TheBB/company-reftex")
    (synopsis "Company backend based on RefTeX.")
    (description
      "Documentation at https://melpa.org/#/company-reftex")
    (license #f)))

(define-public emacs-company-sourcekit
  (package
    (name "emacs-company-sourcekit")
    (version "20210430.2155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nathankot/company-sourcekit.git")
               (commit
                 "a1860ad4dd3a542acd2fa0dfac2a388cbdf4af0c")))
        (sha256
          (base32
            "18pv1hcilj7kndr7a29jjskp21khh1sd0wy01h8y8y9mf70kikg6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-sourcekit))
    (arguments '(#:files ("company-sourcekit.el")))
    (home-page
      "https://github.com/nathankot/company-sourcekit")
    (synopsis
      "company-mode completion backend for SourceKit")
    (description
      "Documentation at https://melpa.org/#/company-sourcekit")
    (license #f)))

(define-public emacs-company-statistics
  (package
    (name "emacs-company-statistics")
    (version "20170210.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-statistics.git")
               (commit
                 "e62157d43b2c874d2edbd547c3bdfb05d0a7ae5c")))
        (sha256
          (base32
            "12mwviz1mwx4ywks2lkmybbgh1wny67wkzlq5y3ml8gvyc288n3i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/company-mode/company-statistics")
    (synopsis
      "Sort candidates using completion history")
    (description
      "Documentation at https://melpa.org/#/company-statistics")
    (license #f)))

(define-public emacs-company-tabnine
  (package
    (name "emacs-company-tabnine")
    (version "20210310.2247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TommyX12/company-tabnine.git")
               (commit
                 "98e9e8b38b6ca289fbe265b0a7b62c7fe38ed0e2")))
        (sha256
          (base32
            "162ca70xwmdd8lsdawzpykd6kaqfljflaxy2nwjn8f89f80ih3fg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-dash
            emacs-s
            emacs-unicode-escape))
    (home-page
      "https://github.com/TommyX12/company-tabnine/")
    (synopsis "A company-mode backend for TabNine")
    (description
      "Documentation at https://melpa.org/#/company-tabnine")
    (license #f)))

(define-public emacs-company-terraform
  (package
    (name "emacs-company-terraform")
    (version "20190607.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rafalcieslak/emacs-company-terraform.git")
               (commit
                 "2d11a21fee2f298e48968e479ddcaeda4d736e12")))
        (sha256
          (base32
            "0hxilq7289djrn6kgw7n926zpz0pr7iyd1wm6cy8yfhxf546a4px"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-terraform-mode))
    (home-page
      "https://github.com/rafalcieslak/emacs-company-terraform")
    (synopsis "A company backend for terraform")
    (description
      "Documentation at https://melpa.org/#/company-terraform")
    (license #f)))

(define-public emacs-company-try-hard
  (package
    (name "emacs-company-try-hard")
    (version "20200417.1603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/company-try-hard.git")
               (commit
                 "2b41136b5ed6e02032d99bcdb0599ecf00394fa5")))
        (sha256
          (base32
            "07c4vsrixqw6d6d2mqm6xzzzc9l9mgwgabcc6jlnw78cxij1wrsx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash))
    (home-page
      "https://github.com/Wilfred/company-try-hard")
    (synopsis
      "get all completions from company backends")
    (description
      "Documentation at https://melpa.org/#/company-try-hard")
    (license #f)))

(define-public emacs-company-wordfreq
  (package
    (name "emacs-company-wordfreq")
    (version "20210201.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johannes-mueller/company-wordfreq.el.git")
               (commit
                 "3787785af2135c42af7b22562da554628141afdb")))
        (sha256
          (base32
            "0iwhi1pw14finc9n9avlv79wnyl8628cmdka5j83hjv1bs2fnysw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/johannes-mueller/company-wordfreq.el")
    (synopsis
      "Company backend for human language texts")
    (description
      "Documentation at https://melpa.org/#/company-wordfreq")
    (license #f)))

(define-public emacs-company-ycm
  (package
    (name "emacs-company-ycm")
    (version "20140904.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neuromage/ycm.el.git")
               (commit
                 "4da8a14abcd0f4fa3235042ade2e12b5068c0601")))
        (sha256
          (base32
            "0znchya89zzk30mwl4qfm0q9sfa5m3jspapb892ydj0mck5n4nyj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ycm))
    (arguments '(#:files ("company-ycm.el")))
    (home-page "unspecified")
    (synopsis "company-ycm")
    (description
      "Documentation at https://melpa.org/#/company-ycm")
    (license #f)))

(define-public emacs-compdef
  (package
    (name "emacs-compdef")
    (version "20200304.611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/compdef.git")
               (commit
                 "30fb5846ed851efee641ce8c5d8879ad36cd7ac6")))
        (sha256
          (base32
            "0qn99jynafjyxc6fy9z888h7j7drs2mz34acwq8yh22v314x2639"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/jjzmajic/compdef")
    (synopsis "A local completion definer")
    (description
      "Documentation at https://melpa.org/#/compdef")
    (license #f)))

(define-public emacs-competitive-programming-snippets
  (package
    (name "emacs-competitive-programming-snippets")
    (version "20201115.1702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/competitive-programming-snippets.git")
               (commit
                 "3b43c1aeaa6676d1d3d0c47e78790db9bee150b6")))
        (sha256
          (base32
            "1pmwsjwj1sb9dqy46p7ky94m9dawd79klcjg1vpl9l7mfvz5i34m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/sei40kr/competitive-programming-snippets")
    (synopsis
      "Competitive Programming snippets for yasnippet")
    (description
      "Documentation at https://melpa.org/#/competitive-programming-snippets")
    (license #f)))

(define-public emacs-composable
  (package
    (name "emacs-composable")
    (version "20201024.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paldepind/composable.el.git")
               (commit
                 "6f2efaa7018feb854720cc2518e4274ad708f793")))
        (sha256
          (base32
            "101shj0z8piww7idb6ha67synhw12x1lwgp3w48w1khrcw43zq7f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "composable editing")
    (description
      "Documentation at https://melpa.org/#/composable")
    (license #f)))

(define-public emacs-composer
  (package
    (name "emacs-composer")
    (version "20200616.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/composer.el.git")
               (commit
                 "7c7f89df226cac69664d7eca5e913b544dc475c5")))
        (sha256
          (base32
            "0iyajdlp95mii462xqy6fqbv5q7vai3ya4jip8433zwwr2pkdbsr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-php-runtime))
    (home-page
      "https://github.com/zonuexe/composer.el")
    (synopsis "Interface to PHP Composer")
    (description
      "Documentation at https://melpa.org/#/composer")
    (license #f)))

(define-public emacs-comware-router-mode
  (package
    (name "emacs-comware-router-mode")
    (version "20201229.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daviderestivo/comware-router-mode.git")
               (commit
                 "f0f884f0fe9ab2c3420e62d27eadc59ac2209a4a")))
        (sha256
          (base32
            "1zcvpj7bxry2v8whijgpqw773l3l64nrgaxdwyd053ahl0nv7mpf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/daviderestivo/comware-router-mode")
    (synopsis
      "Major mode for editing Comware configuration files")
    (description
      "Documentation at https://melpa.org/#/comware-router-mode")
    (license #f)))

(define-public emacs-consult
  (package
    (name "emacs-consult")
    (version "20211214.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/consult.git")
               (commit
                 "39366355f4897dfae73d14d93dbe6ca97f7fc713")))
        (sha256
          (base32
            "1f2dafi3gxz7jslxrm1zbndyhfjyn6b3fhab25sg29ns4vjx4hp1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/minad/consult")
    (synopsis "Consulting completing-read")
    (description
      "Documentation at https://melpa.org/#/consult")
    (license #f)))

(define-public emacs-consult-company
  (package
    (name "emacs-consult-company")
    (version "20211021.1152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/consult-company.git")
               (commit
                 "ef1c553b4a72b23297b55708bf6f6dd1b27cc68e")))
        (sha256
          (base32
            "1wqs6ryx7vihmcd11x6ankfrhwn6bhvkld2hw390y1bmxq30pw3n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-consult))
    (home-page
      "https://github.com/mohkale/consult-company")
    (synopsis "Consult frontend for company")
    (description
      "Documentation at https://melpa.org/#/consult-company")
    (license #f)))

(define-public emacs-consult-dir
  (package
    (name "emacs-consult-dir")
    (version "20211007.2352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/consult-dir.git")
               (commit
                 "08f543ae6acbfc1ffe579ba1d00a5414012d5c0b")))
        (sha256
          (base32
            "1cff4ssrn1mw2s5n090pdmwdirnfih8idg5f0ll2bi2djc4hq5kn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/karthink/consult-dir")
    (synopsis
      "Insert paths into the minibuffer prompt")
    (description
      "Documentation at https://melpa.org/#/consult-dir")
    (license #f)))

(define-public emacs-consult-ghq
  (package
    (name "emacs-consult-ghq")
    (version "20210606.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomoya/consult-ghq.git")
               (commit
                 "c8619d66bd8f8728e43ed15096078b89eb4d2083")))
        (sha256
          (base32
            "1zrxigf7bnx6l9lv2xvnn3ba6c9dndijw1vlnli56cv215i0r4f6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-affe))
    (home-page
      "https://github.com/tomoya/consult-ghq")
    (synopsis "Ghq interface using consult")
    (description
      "Documentation at https://melpa.org/#/consult-ghq")
    (license #f)))

(define-public emacs-consult-projectile
  (package
    (name "emacs-consult-projectile")
    (version "20211018.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/OlMon/consult-projectile.git")
               (commit
                 "655b328ce3fe51a8ff89d7b0a839bc8dfe9e51c0")))
        (sha256
          (base32
            "1gy6vg5vrd9i0y2sck20fbqrdz0bgcr6647rvnl2nvpv3shzlsbj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-projectile))
    (arguments '(#:files ("consult-projectile.el")))
    (home-page
      "https://gitlab.com/OlMon/consult-projectile")
    (synopsis "Consult integration for porjectile")
    (description
      "Documentation at https://melpa.org/#/consult-projectile")
    (license #f)))

(define-public emacs-consult-recoll
  (package
    (name "emacs-consult-recoll")
    (version "20211113.1958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/consult-recoll.git")
               (commit
                 "42dea1d40fedf7894e2515b4566a783b7b85486a")))
        (sha256
          (base32
            "0nzch4x58vgvmcjr6p622lkzms2gvjfdgpvi6bbj5qdzkln5q23a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://codeberg.org/jao/consult-recoll")
    (synopsis "Recoll queries using consult")
    (description
      "Documentation at https://melpa.org/#/consult-recoll")
    (license #f)))

(define-public emacs-consult-spotify
  (package
    (name "emacs-consult-spotify")
    (version "20211114.2258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify")
               (commit
                 "5c1dcf0182135cda4191d4ba206fe2f265100293")))
        (sha256
          (base32
            "06wj2pixhjgqddl9g2wkv7cq9gz9yjb46cb1jrlbya3rdjyfb6h5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-espotify))
    (arguments '(#:files ("consult-spotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Spotify queries using consult")
    (description
      "Documentation at https://melpa.org/#/consult-spotify")
    (license #f)))

(define-public emacs-contextual
  (package
    (name "emacs-contextual")
    (version "20180726.800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/e-user/contextual.git")
               (commit
                 "e3c0de4a2e06757a0e8407c3c6e75930026191e3")))
        (sha256
          (base32
            "1nl2748s5x252f6sx4xpgzfdcas9ky38bnqfdx9l562agmcp9615"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/lshift-de/contextual")
    (synopsis "Contextual profile management system")
    (description
      "Documentation at https://melpa.org/#/contextual")
    (license #f)))

(define-public emacs-contextual-menubar
  (package
    (name "emacs-contextual-menubar")
    (version "20180205.709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/contextual-menubar.git")
               (commit
                 "f76f55232ac07df76ef9a334a0c527dfab97c40b")))
        (sha256
          (base32
            "0zks4w99nbhz1xvr67isgg6yjghpzbh5s5wd839zi0ly30x4riqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronjensen/contextual-menubar")
    (synopsis
      "display the menubar only on a graphical display")
    (description
      "Documentation at https://melpa.org/#/contextual-menubar")
    (license #f)))

(define-public emacs-conventional-changelog
  (package
    (name "emacs-conventional-changelog")
    (version "20211212.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/emacs-conventional-changelog.git")
               (commit
                 "40c2ee58364422b776e81dc153918205bfbeda86")))
        (sha256
          (base32
            "1zxs0sgrdhzlfixahss4m3a7jx2qdkaccqkg9jbyf4vsdm17im48"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient))
    (home-page
      "https://github.com/liuyinz/emacs-conventional-changelog")
    (synopsis "Conventional Changelog Generator")
    (description
      "Documentation at https://melpa.org/#/conventional-changelog")
    (license #f)))

(define-public emacs-copyit
  (package
    (name "emacs-copyit")
    (version "20190919.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emacs-copyit.git")
               (commit
                 "c4f2c28e5b6270e8e3364341619f1154bb4e682e")))
        (sha256
          (base32
            "17xqpshwc48srwljpbad7vhx3rkxqav0ygp0ff4xh7wgy21fp2mp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("copyit.el")))
    (home-page
      "https://github.com/zonuexe/emacs-copyit")
    (synopsis "Copy it, yank anything!")
    (description
      "Documentation at https://melpa.org/#/copyit")
    (license #f)))

(define-public emacs-copyit-pandoc
  (package
    (name "emacs-copyit-pandoc")
    (version "20190919.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emacs-copyit.git")
               (commit
                 "c4f2c28e5b6270e8e3364341619f1154bb4e682e")))
        (sha256
          (base32
            "17xqpshwc48srwljpbad7vhx3rkxqav0ygp0ff4xh7wgy21fp2mp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-copyit emacs-pandoc))
    (arguments '(#:files ("copyit-pandoc.el")))
    (home-page
      "https://github.com/zonuexe/emacs-copyit")
    (synopsis "Copy it, yank anything!")
    (description
      "Documentation at https://melpa.org/#/copyit-pandoc")
    (license #f)))

(define-public emacs-corral
  (package
    (name "emacs-corral")
    (version "20160502.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nivekuil/corral.git")
               (commit
                 "e7ab6aa118e46b93d4933d1364bc273f57cd6911")))
        (sha256
          (base32
            "00055gzv032xxzqm1hffipljy8fzgsm58cbv8dzajh035jvdgpv7"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/nivekuil/corral")
    (synopsis
      "Quickly surround text with delimiters")
    (description
      "Documentation at https://melpa.org/#/corral")
    (license #f)))

(define-public emacs-cort
  (package
    (name "emacs-cort")
    (version "20211020.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/cort.el.git")
               (commit
                 "3f64a7b03a4c5b768ec21fd5987acd0d62d16c7b")))
        (sha256
          (base32
            "1bkyx8sd2qqnhmmqbl9wyxk3xhrplq9zprmfpyhf5k0zin3zd31y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ansi))
    (home-page "https://github.com/conao3/cort.el")
    (synopsis
      "Simplify extended unit test framework")
    (description
      "Documentation at https://melpa.org/#/cort")
    (license #f)))

(define-public emacs-counsel
  (package
    (name "emacs-counsel")
    (version "20210928.949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "1c6b3da377a840e898b14020133f59fca9ceea1c")))
        (sha256
          (base32
            "1w8x2qk8lafnn6ksv1anixayyl476y1j6hp2amfnqmdkh0vnh63v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-swiper))
    (arguments '(#:files ("counsel.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis
      "Various completion functions using Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel")
    (license #f)))

(define-public emacs-counsel-etags
  (package
    (name "emacs-counsel-etags")
    (version "20211210.1127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/counsel-etags.git")
               (commit
                 "bafd22a20c3328b0cf81aa9c35bfa37a095cf9c3")))
        (sha256
          (base32
            "1p651ykxbakzhwlrxcz4v62kj4f78l83f67qcghi58sq9cvwg1gi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "http://github.com/redguardtoo/counsel-etags")
    (synopsis
      "Fast and complete Ctags/Etags solution using ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-etags")
    (license #f)))

(define-public emacs-counsel-osx-app
  (package
    (name "emacs-counsel-osx-app")
    (version "20160821.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/counsel-osx-app.git")
               (commit
                 "b1c54cbc033c4939966910d85ce035503079e108")))
        (sha256
          (base32
            "0p3j60hjai3v8yny9zlzbxppy0pl9s3yf4x6z5rac6n86xx0iix8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/d12frosted/counsel-osx-app")
    (synopsis
      "launch osx applications via ivy interface")
    (description
      "Documentation at https://melpa.org/#/counsel-osx-app")
    (license #f)))

(define-public emacs-counsel-projectile
  (package
    (name "emacs-counsel-projectile")
    (version "20211004.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericdanan/counsel-projectile.git")
               (commit
                 "e30150792a96968f55f34638cbfe63eaa30839cc")))
        (sha256
          (base32
            "1vp39r5njfzchkqv9g0w77whazp070anh9gmbkp3z4n3xxbik27f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-projectile))
    (home-page
      "https://github.com/ericdanan/counsel-projectile")
    (synopsis "Ivy integration for Projectile")
    (description
      "Documentation at https://melpa.org/#/counsel-projectile")
    (license #f)))

(define-public emacs-counsel-pydoc
  (package
    (name "emacs-counsel-pydoc")
    (version "20171018.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/co-dh/pydoc_utils.git")
               (commit
                 "1d8ff8ca3b9d69453cde423b1887fbb490a95c9e")))
        (sha256
          (base32
            "06kf93y8wb9nwvs70xi4lkd5x4g6sl8f83diy2wl7ha657dwx3m8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/co-dh/pydoc_utils")
    (synopsis "run pydoc with counsel")
    (description
      "Documentation at https://melpa.org/#/counsel-pydoc")
    (license #f)))

(define-public emacs-counsel-web
  (package
    (name "emacs-counsel-web")
    (version "20210609.2156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mnewt/counsel-web.git")
               (commit
                 "1359b3b204fcdac7a3d6664c7d540a88b5acecfd")))
        (sha256
          (base32
            "1y5dnhsx5q8jvrr5hjr8cp53nvdq25c9q9im61ym75nccl9lwp4v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-request))
    (home-page
      "https://github.com/mnewt/counsel-web")
    (synopsis "Search the Web using Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-web")
    (license #f)))

(define-public emacs-counsel-world-clock
  (package
    (name "emacs-counsel-world-clock")
    (version "20190709.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kchenphy/counsel-world-clock.git")
               (commit
                 "674e4c6b82a92ea765af97cc5f017b357284c7dc")))
        (sha256
          (base32
            "1wm6g6g5jlk3k2h2zb6mjzdnl95yr3x7hk8x1ikpbpfd4xdc64kb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-s))
    (home-page
      "https://github.com/kchenphy/counsel-world-clock")
    (synopsis "Display world clock using Ivy.")
    (description
      "Documentation at https://melpa.org/#/counsel-world-clock")
    (license #f)))

(define-public emacs-cowsay
  (package
    (name "emacs-cowsay")
    (version "20210510.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-cowsay.git")
               (commit
                 "d8a72a311c6875f1aef6a30b3d23a1b02df75941")))
        (sha256
          (base32
            "0sczdlhpqs0pgka426ngvvcf01c6lvgk2aykajc5b2zgxywkfg40"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-cowsay")
    (synopsis
      "Poorly drawn ASCII cartoons saying things")
    (description
      "Documentation at https://melpa.org/#/cowsay")
    (license #f)))

(define-public emacs-cpanfile-mode
  (package
    (name "emacs-cpanfile-mode")
    (version "20161001.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zakame/cpanfile-mode.git")
               (commit
                 "eda675703525198df1f76ddf250bffa40217ec5d")))
        (sha256
          (base32
            "07xivp1i9f884gs17lhp5jm0zk916c7gwazxnkm6m8rl3z2mcq0l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zakame/cpanfile-mode")
    (synopsis "Major mode for cpanfiles")
    (description
      "Documentation at https://melpa.org/#/cpanfile-mode")
    (license #f)))

(define-public emacs-cquery
  (package
    (name "emacs-cquery")
    (version "20190118.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cquery-project/emacs-cquery.git")
               (commit
                 "555e50984ebda177421fdcdc8c76cb29235d9694")))
        (sha256
          (base32
            "1d1m1lgc93fkg7dxb8d6ch68vh6w1zp3yy31bv78vaz8siqrmk16"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash))
    (home-page
      "https://github.com/jacobdufault/cquery")
    (synopsis "cquery client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/cquery")
    (license #f)))

(define-public emacs-creole-mode
  (package
    (name "emacs-creole-mode")
    (version "20130722.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/creole-mode.git")
               (commit
                 "b5e79b2ec5f19fb5aacf689b5febc3e0b61515c4")))
        (sha256
          (base32
            "0japww5x89vd1ahjm2bc3biz6wxv94vvqq5fyyzkqsblgk5bys0h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicferrier/creole-mode")
    (synopsis "a markup mode for creole")
    (description
      "Documentation at https://melpa.org/#/creole-mode")
    (license #f)))

(define-public emacs-crontab-mode
  (package
    (name "emacs-crontab-mode")
    (version "20210715.133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/crontab-mode.git")
               (commit
                 "7412f3df0958812bfcacd5875a409fa795fa8ecc")))
        (sha256
          (base32
            "0jfdak85r9j0qlbzc53mkbfqqgqs9ghg0x6fhlv8i22873y650gm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/crontab-mode")
    (synopsis "Major mode for crontab(5)")
    (description
      "Documentation at https://melpa.org/#/crontab-mode")
    (license #f)))

(define-public emacs-crux
  (package
    (name "emacs-crux")
    (version "20210811.436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/crux.git")
               (commit
                 "6bfd212a7f7ae32e455802fde1f9e3f4fba932a0")))
        (sha256
          (base32
            "01727k1fxiq1v2q6slp23gc98yqhflp6dcy3yr0yn9ibqx3pi93q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bbatsov/crux")
    (synopsis
      "A Collection of Ridiculously Useful eXtensions")
    (description
      "Documentation at https://melpa.org/#/crux")
    (license #f)))

(define-public emacs-csgo-conf-mode
  (package
    (name "emacs-csgo-conf-mode")
    (version "20161209.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wynro/emacs-csgo-conf-mode.git")
               (commit
                 "57e7224f87a3ccc76b5564cc95fa0ff43bb6807c")))
        (sha256
          (base32
            "14wzh3rlq7xb8djncbjkfiq9hl5frp7gp42sz2ic7aky4qajbcdv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wynro/emacs-csgo-conf-mode")
    (synopsis
      "CS:GO Configuration files syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/csgo-conf-mode")
    (license #f)))

(define-public emacs-csproj-mode
  (package
    (name "emacs-csproj-mode")
    (version "20200801.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/csproj-mode.git")
               (commit
                 "a7f0f4610c976a28c41b9b8299892f88b5d0336c")))
        (sha256
          (base32
            "0j8m7rhkf98zqkg6zydcks6qs4msw6vz51nbqya23hka2wpz7f81"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/omajid/csproj-mode")
    (synopsis
      "Work with .NET project files (csproj, vbproj)")
    (description
      "Documentation at https://melpa.org/#/csproj-mode")
    (license #f)))

(define-public emacs-css-autoprefixer
  (package
    (name "emacs-css-autoprefixer")
    (version "20180311.1600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kkweon/emacs-css-autoprefixer.git")
               (commit
                 "386a5defc8543a3b87820f1761c075c7d1d93b38")))
        (sha256
          (base32
            "0ymba9bhzfi7kkrha4d4sn0hrc3sid4b5k8lhakwwdwafhym0jjb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kkweon/emacs-css-autoprefixer")
    (synopsis "Adds autoprefix to CSS")
    (description
      "Documentation at https://melpa.org/#/css-autoprefixer")
    (license #f)))

(define-public emacs-css-comb
  (package
    (name "emacs-css-comb")
    (version "20160416.559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bitspook/css-comb.el.git")
               (commit
                 "6fa45e5af8a8bd3af6c1154cde3540e32c4206ee")))
        (sha256
          (base32
            "0nvl6y90p9crk12j7aw0cqdjhli7xbrx3hqckxsnvrnxy4zax7nk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/channikhabra/css-comb.el")
    (synopsis
      "Sort CSS properties in a particular order using CSS Comb")
    (description
      "Documentation at https://melpa.org/#/css-comb")
    (license #f)))

(define-public emacs-css-eldoc
  (package
    (name "emacs-css-eldoc")
    (version "20150125.323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenozeng/css-eldoc.git")
               (commit
                 "c558ac4c470742c98a37290e6b409db28183df30")))
        (sha256
          (base32
            "1mgc6bd0dzrp1dq1yj8m2qxjnpysd8ppdk2yp96d3zd07zllw4rx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("css-eldoc.el" "css-eldoc-hash-table.el")))
    (home-page "unspecified")
    (synopsis
      "an eldoc-mode plugin for CSS source code")
    (description
      "Documentation at https://melpa.org/#/css-eldoc")
    (license #f)))

(define-public emacs-cssh
  (package
    (name "emacs-cssh")
    (version "20150810.1709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/cssh.git")
               (commit
                 "2fe2754235225a59b63f08b130cfd4352e2e1c3f")))
        (sha256
          (base32
            "1xf2hy077frfz8qf91c0l0qppcjxzr4bsbb622bx6fidqkpa3a1a"))))
    (build-system melpa-build-system)
    (home-page "http://tapoueh.org/emacs/cssh.html")
    (synopsis "clusterssh implementation for emacs")
    (description
      "Documentation at https://melpa.org/#/cssh")
    (license #f)))

(define-public emacs-ct
  (package
    (name "emacs-ct")
    (version "20210219.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neeasade/ct.el.git")
               (commit
                 "c302ee94feee0c5efc511e8f9fd8cb2f6dfe3490")))
        (sha256
          (base32
            "0230h5qvg5jbpyry4xxmh41c0wpinmm04k5hc1qsc2mvqhv3n9n5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hsluv))
    (home-page "https://github.com/neeasade/ct.el")
    (synopsis "Color Tools - a color api")
    (description
      "Documentation at https://melpa.org/#/ct")
    (license #f)))

(define-public emacs-ctable
  (package
    (name "emacs-ctable")
    (version "20210128.629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-ctable.git")
               (commit
                 "48b73742757a3ae5736d825fe49e00034cc453b5")))
        (sha256
          (base32
            "16yrx1z44xs24z2a0gwzf1xhhks1wrzafc5ihf6lbw843rq2jar0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ctable.el")))
    (home-page
      "https://github.com/kiwanami/emacs-ctable")
    (synopsis "Table component for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ctable")
    (license #f)))

(define-public emacs-ctags-update
  (package
    (name "emacs-ctags-update")
    (version "20190609.613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/ctags-update.git")
               (commit
                 "67faf248b92388442958a069263c62a345425a1b")))
        (sha256
          (base32
            "0442jdxvn33i0bnb4fspvpdn66gxqyazyc6n3wqjmpn3fqvzwsrp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jixiuf/ctags-update")
    (synopsis
      "(auto) update TAGS in parent directory using exuberant-ctags")
    (description
      "Documentation at https://melpa.org/#/ctags-update")
    (license #f)))

(define-public emacs-ctrlxo
  (package
    (name "emacs-ctrlxo")
    (version "20201021.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-ctrlxo.git")
               (commit
                 "8ad95a81bd1ece06ebe40e2a83490775db64b419")))
        (sha256
          (base32
            "1d84nx8zdy5jcfm4bavlg989ygv55gfb3mwjibsrbmn9vgckrdgr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-ctrlxo")
    (synopsis
      "Switch to the most recently used window")
    (description
      "Documentation at https://melpa.org/#/ctrlxo")
    (license #f)))

(define-public emacs-ctune
  (package
    (name "emacs-ctune")
    (version "20210205.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maurooaranda/ctune.git")
               (commit
                 "3f7abc6e74d4e5954b476ba9a1dc652f96b10c05")))
        (sha256
          (base32
            "1lcgkh0hhgx4rvc84kgbg3sczqp53gz6859c30hq1agn1zhbwrvy"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "doclicense.texi" "docstyle.texi"))))
    (home-page
      "https://github.com/maurooaranda/ctune")
    (synopsis "Tune out CC Mode Noise Macros")
    (description
      "Documentation at https://melpa.org/#/ctune")
    (license #f)))

(define-public emacs-ctxmenu
  (package
    (name "emacs-ctxmenu")
    (version "20140303.2142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-ctxmenu.git")
               (commit
                 "5c2376859562b98c07c985d2b483658e4c0e888e")))
        (sha256
          (base32
            "1jlr2miwqsg06hk2clvsrw9fa98m2n76qfq8qv5svrb8dpil04wb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-log4e emacs-yaxception))
    (home-page
      "https://github.com/aki2o/emacs-ctxmenu")
    (synopsis
      "Provide a context menu like right-click.")
    (description
      "Documentation at https://melpa.org/#/ctxmenu")
    (license #f)))

(define-public emacs-cubicle-mode
  (package
    (name "emacs-cubicle-mode")
    (version "20171009.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cubicle-model-checker/cubicle.git")
               (commit
                 "00f09bb2d4bb496549775e770d7ada08bc1e4866")))
        (sha256
          (base32
            "18m10xyyjw8zyiq4v4qvajal0mvp9iy637a6sc375qxnr829x23m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/cubicle-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for the Cubicle model checker")
    (description
      "Documentation at https://melpa.org/#/cubicle-mode")
    (license #f)))

(define-public emacs-currency-convert
  (package
    (name "emacs-currency-convert")
    (version "20210427.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-currency-convert.git")
               (commit
                 "12805ea66aa8421de5eedda39d23f709de634460")))
        (sha256
          (base32
            "1p304k3s0iawsrlpndc9vrjxm1vv4nlkv0fb51x8pmcqw5ivy1dg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-currency-convert")
    (synopsis "Currency converter")
    (description
      "Documentation at https://melpa.org/#/currency-convert")
    (license #f)))

(define-public emacs-cycbuf
  (package
    (name "emacs-cycbuf")
    (version "20131203.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martinp26/cycbuf.git")
               (commit
                 "1079b41c3eb27d65b66d4399959bb6253f84858e")))
        (sha256
          (base32
            "1d5i8sm1xrsp4v4myidfyb40hm3wp7hgva7dizg9gbb7prmn1p5w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/martinp26/cycbuf")
    (synopsis
      "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el")
    (description
      "Documentation at https://melpa.org/#/cycbuf")
    (license #f)))

(define-public emacs-cycle-themes
  (package
    (name "emacs-cycle-themes")
    (version "20150403.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/toroidal-code/cycle-themes.el.git")
               (commit
                 "6e125d11fdbc6b78fc9f219eb2609a5e29815898")))
        (sha256
          (base32
            "125s6vwbb9zpx6h3vrxnn7nr8pb45vhxd70ba2r3f87dlxah93am"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/toroidal-code/cycle-themes.el")
    (synopsis
      "A global minor mode to make switching themes easier")
    (description
      "Documentation at https://melpa.org/#/cycle-themes")
    (license #f)))

(define-public emacs-cython-mode
  (package
    (name "emacs-cython-mode")
    (version "20211111.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cython/cython.git")
               (commit
                 "fcabbe3d8cff75a34cf1cda27c1f5d3fc37720e4")))
        (sha256
          (base32
            "1rcd0j4p0g4ysc2cxhfjn924wnfp8dwvkiw4wzga01y028pa1j9n"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("Tools/*.el")))
    (home-page "unspecified")
    (synopsis "Major mode for editing Cython files")
    (description
      "Documentation at https://melpa.org/#/cython-mode")
    (license #f)))

(define-public emacs-dad-joke
  (package
    (name "emacs-dad-joke")
    (version "20170928.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/dad-joke.el.git")
               (commit
                 "bee47e7b746b403228fa7d7361cb095de19ac9ba")))
        (sha256
          (base32
            "14snnnjs28jg6k8x6g90m3dbcx10306ipcd256d3l6czk9p17vpd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/dad-joke.el")
    (synopsis "Get/display dad jokes")
    (description
      "Documentation at https://melpa.org/#/dad-joke")
    (license #f)))

(define-public emacs-daemons
  (package
    (name "emacs-daemons")
    (version "20211214.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cbowdon/daemons.el.git")
               (commit
                 "e18e84ccc13101f1609c213029cf011ae0ad1178")))
        (sha256
          (base32
            "0ylcwwp6asl3w9fmx46z822wpr4mrlr0mgny6n1hi3wnsvcjagka"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cbowdon/daemons.el")
    (synopsis
      "UI for managing init system daemons (services)")
    (description
      "Documentation at https://melpa.org/#/daemons")
    (license #f)))

(define-public emacs-dark-krystal-theme
  (package
    (name "emacs-dark-krystal-theme")
    (version "20170808.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-dark-krystal-theme.git")
               (commit
                 "79084b99665dc9ffb0ec62cc092349a5ecebebbc")))
        (sha256
          (base32
            "1d3cdsaba71qxdqrbj1jrlq8a0iw3h50l5grcdjvxixdnf5nsa4c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Dark Krystal (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/dark-krystal-theme")
    (license #f)))

(define-public emacs-dark-souls
  (package
    (name "emacs-dark-souls")
    (version "20140314.1128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomjakubowski/dark-souls.el.git")
               (commit
                 "94122b1215423e58dcf18584a2bd022029d54d4b")))
        (sha256
          (base32
            "1w0y2j0j9n107dbk7ksr9bipshjfs9dk08qbs9m6h5aqh4hmwa4r"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/tomjakubowski/dark-souls.el")
    (synopsis "Prepare to die")
    (description
      "Documentation at https://melpa.org/#/dark-souls")
    (license #f)))

(define-public emacs-darkburn-theme
  (package
    (name "emacs-darkburn-theme")
    (version "20170423.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gorauskas/darkburn-theme.git")
               (commit
                 "0af794ff7fac19778ac8a7efb92455c6f6c2158f")))
        (sha256
          (base32
            "0nv917r8pbj6mfncjl8d7hq4763c69q491d4iwnff1n3wzlcp42s"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/gorauskas/darkburn-theme")
    (synopsis
      "A not-so-low contrast color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/darkburn-theme")
    (license #f)))

(define-public emacs-darkmine-theme
  (package
    (name "emacs-darkmine-theme")
    (version "20160406.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pierre-lecocq/darkmine-theme.git")
               (commit
                 "7f7e82ca03bcad52911fa41fb3e204e32d6ee63e")))
        (sha256
          (base32
            "0d2g4iyp8gyfrcc1gkvl40p1shlw1sadswzhry0m1lgbyxiiklrz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pierre-lecocq/darkmine-theme")
    (synopsis "Yet another emacs dark color theme.")
    (description
      "Documentation at https://melpa.org/#/darkmine-theme")
    (license #f)))

(define-public emacs-darkokai-theme
  (package
    (name "emacs-darkokai-theme")
    (version "20200614.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sjrmanning/darkokai.git")
               (commit
                 "5820aeddfc8c869ba840cc534eba776936656a66")))
        (sha256
          (base32
            "1bj7l5sh6nzxcw575kjcscjpjqmwlxhvi30qviqg4d6aymzkgr53"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/sjrmanning/darkokai")
    (synopsis "A darker variant on Monokai.")
    (description
      "Documentation at https://melpa.org/#/darkokai-theme")
    (license #f)))

(define-public emacs-darktooth-theme
  (package
    (name "emacs-darktooth-theme")
    (version "20201215.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-darktooth.git")
               (commit
                 "ec03b30ee7f43f89ca4c382bb3fe4ee560c028a8")))
        (sha256
          (base32
            "00ijwqchvrwln2wl3nfcq5v3i2p232z4qsy67x1v51q20876mc9j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-darktooth")
    (synopsis "From the darkness... it watches")
    (description
      "Documentation at https://melpa.org/#/darktooth-theme")
    (license #f)))

(define-public emacs-dashboard
  (package
    (name "emacs-dashboard")
    (version "20211221.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-dashboard/emacs-dashboard.git")
               (commit
                 "1bb5c43b6be65f72c2ff3ab948697c902458a32f")))
        (sha256
          (base32
            "18k73aqnlcxzlcqzlls6haps2h5j5qngp3lssiyyk0m4731dpi26"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "banners")))
    (home-page
      "https://github.com/emacs-dashboard/emacs-dashboard")
    (synopsis
      "A startup screen extracted from Spacemacs")
    (description
      "Documentation at https://melpa.org/#/dashboard")
    (license #f)))

(define-public emacs-dashboard-hackernews
  (package
    (name "emacs-dashboard-hackernews")
    (version "20190109.205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hyakt/emacs-dashboard-hackernews.git")
               (commit
                 "b71814716d8f78181b9d1990f06072460de0797e")))
        (sha256
          (base32
            "1dvv10xn2mh0nh85cd78y23cn8p9ygdhj4k7xs4fa6r7bhp0xvqm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dashboard emacs-request))
    (home-page
      "https://github.com/hyakt/emacs-dashboard-hackernews")
    (synopsis "Display Hacker News on dashboard")
    (description
      "Documentation at https://melpa.org/#/dashboard-hackernews")
    (license #f)))

(define-public emacs-dashboard-ls
  (package
    (name "emacs-dashboard-ls")
    (version "20211222.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-dashboard/dashboard-ls.git")
               (commit
                 "5c6a11bfda542892775b5c55c8430773cc82b3c9")))
        (sha256
          (base32
            "0fcfjy4gvnzm5s3235pd2mkb8jd386jblh8r9hyw2351ln1pwnjn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dashboard))
    (home-page
      "https://github.com/emacs-dashboard/dashboard-ls")
    (synopsis
      "Display files/directories in current directory on Dashboard")
    (description
      "Documentation at https://melpa.org/#/dashboard-ls")
    (license #f)))

(define-public emacs-date-at-point
  (package
    (name "emacs-date-at-point")
    (version "20150308.1243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/date-at-point.el.git")
               (commit
                 "38df823d05df08ec0748a4185113fae5f99090e9")))
        (sha256
          (base32
            "024jx6q0dik4w2wb8nrk1q73asvjgrsl5mslns0ci3zsya343rch"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/date-at-point.el")
    (synopsis
      "Add `date' to `thing-at-point' function")
    (description
      "Documentation at https://melpa.org/#/date-at-point")
    (license #f)))

(define-public emacs-dayone
  (package
    (name "emacs-dayone")
    (version "20160105.1240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mori-dev/emacs-dayone.git")
               (commit
                 "ab628274f0806451f23bce16f62a6a11cbf91a2b")))
        (sha256
          (base32
            "1j0mk8vyr6sniliq0ix77jldx8vzl73nd5yhh82klzgyymal58ms"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-uuid emacs-mustache emacs-ht))
    (arguments '(#:files ("*.el" "*.mustache")))
    (home-page
      "https://github.com/mori-dev/emacs-dayone")
    (synopsis "Utility script for Day One")
    (description
      "Documentation at https://melpa.org/#/dayone")
    (license #f)))

(define-public emacs-db
  (package
    (name "emacs-db")
    (version "20140421.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-db.git")
               (commit
                 "b3a423fb8e72f9013009cbe033d654df2ce31438")))
        (sha256
          (base32
            "0syv4kr319d34yqi4q61b8jh5yy22wvd148x1m3pc511znh2ry5k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kv))
    (arguments '(#:files ("db.el")))
    (home-page "unspecified")
    (synopsis "A database for EmacsLisp")
    (description
      "Documentation at https://melpa.org/#/db")
    (license #f)))

(define-public emacs-db-pg
  (package
    (name "emacs-db-pg")
    (version "20130131.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-db-pg.git")
               (commit
                 "7d5ab86b74b05fe003b3b434d4835f37f3f3eded")))
        (sha256
          (base32
            "15r0qwjkl33p8kh2k5kxz9wnbkv1k470b1h0i6svvljkx9ynk68a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pg emacs-db))
    (home-page "unspecified")
    (synopsis "A PostgreSQL adapter for emacs-db")
    (description
      "Documentation at https://melpa.org/#/db-pg")
    (license #f)))

(define-public emacs-dbc
  (package
    (name "emacs-dbc")
    (version "20201001.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/display-buffer-control.git")
               (commit
                 "6728e72f72347d098b7d75ac4c29a7d687cc9ed3")))
        (sha256
          (base32
            "1bkiwg1wp3l904159gycdr83xkb3i0h2k0da7akzkwc957abvp8w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "https://gitlab.com/matsievskiysv/display-buffer-control")
    (synopsis "Control how to open buffers")
    (description
      "Documentation at https://melpa.org/#/dbc")
    (license #f)))

(define-public emacs-ddskk-posframe
  (package
    (name "emacs-ddskk-posframe")
    (version "20200812.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/ddskk-posframe.el.git")
               (commit
                 "299493dd951e5a0b43b8213321e3dc0bac10f762")))
        (sha256
          (base32
            "1rsy0wjncxzjhis8jrxpxjh9l9pw0bngg1sb4dj5qvhsgszhawpn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-ddskk))
    (home-page
      "https://github.com/conao3/ddskk-posframe.el")
    (synopsis
      "Show Henkan tooltip for ddskk via posframe")
    (description
      "Documentation at https://melpa.org/#/ddskk-posframe")
    (license #f)))

(define-public emacs-decide
  (package
    (name "emacs-decide")
    (version "20211127.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lifelike/decide-mode.git")
               (commit
                 "668fa559b95b50f140e73f26a21fad559c1ffa77")))
        (sha256
          (base32
            "1wbiy8lda6p888qf4ak8j02cp42h25y17xnz5bq5p032xgq731n0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "rolling dice and other random things")
    (description
      "Documentation at https://melpa.org/#/decide")
    (license #f)))

(define-public emacs-decl
  (package
    (name "emacs-decl")
    (version "20171212.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/preetpalS/decl.el.git")
               (commit
                 "ff7f8a4f1225cbdf141c86172104e67a4cf58c86")))
        (sha256
          (base32
            "1ns1ni6aalr541df3a0ylqy0gj68fcsxdfvm4m1ga5532kxnswnj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("decl.el")))
    (home-page
      "https://github.com/preetpalS/decl.el")
    (synopsis
      "Library for organizing code declaratively")
    (description
      "Documentation at https://melpa.org/#/decl")
    (license #f)))

(define-public emacs-dedukti-mode
  (package
    (name "emacs-dedukti-mode")
    (version "20171103.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rafoo/dedukti-mode.git")
               (commit
                 "d7c3505a1046187de3c3aeb144455078d514594e")))
        (sha256
          (base32
            "1842wikq24c8rg0ac84vb1qby9ng1nssxswyyni4kq85lng5lcrp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rafoo/dedukti-mode")
    (synopsis "Major mode for Dedukti files")
    (description
      "Documentation at https://melpa.org/#/dedukti-mode")
    (license #f)))

(define-public emacs-delim-kill
  (package
    (name "emacs-delim-kill")
    (version "20100517.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomas11/delim-kill.git")
               (commit
                 "1dbe47344f2d2cbc8c54beedf0cf0bf10fd203c1")))
        (sha256
          (base32
            "06a20sd8nc273azrgha40l1fbqvv9qmxsmkjiqbf6dcf1blkwjyf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/thomas11/delim-kill/tree/master")
    (synopsis "Kill text between delimiters.")
    (description
      "Documentation at https://melpa.org/#/delim-kill")
    (license #f)))

(define-public emacs-demangle-mode
  (package
    (name "emacs-demangle-mode")
    (version "20210822.2210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liblit/demangle-mode.git")
               (commit
                 "04f545adab066708d6151f13da65aaf519f8ac4e")))
        (sha256
          (base32
            "0jkw3n7fp0fd1pmaxszncx2lvb5g3hszsm2n6axbvy8waqxydz2w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liblit/demangle-mode")
    (synopsis
      "Automatically demangle C++, D, and Rust symbols")
    (description
      "Documentation at https://melpa.org/#/demangle-mode")
    (license #f)))

(define-public emacs-demo-it
  (package
    (name "emacs-demo-it")
    (version "20211221.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/howardabrams/demo-it.git")
               (commit
                 "e399fd7ceb73caeae7cb50b247359bafcaee2a3f")))
        (sha256
          (base32
            "1hbhdgp69sqab1qd388flv5dzxprwf44b127da0fpl8mpqf94npa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Create demonstrations")
    (description
      "Documentation at https://melpa.org/#/demo-it")
    (license #f)))

(define-public emacs-dfmt
  (package
    (name "emacs-dfmt")
    (version "20170728.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/qsimpleq/elisp-dfmt.git")
               (commit
                 "21b9094e907b7ac53f5ecb4ff4539613a9d12434")))
        (sha256
          (base32
            "11r1i8nlz98z49fqb447abg1pv6838q54ly19wyg82k52875ms7m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/qsimpleq/elisp-dfmt")
    (synopsis
      "Emacs Interface to D indenting/formatting tool dfmt.")
    (description
      "Documentation at https://melpa.org/#/dfmt")
    (license #f)))

(define-public emacs-dianyou
  (package
    (name "emacs-dianyou")
    (version "20210525.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/dianyou.git")
               (commit
                 "f77d9e76be5d8022fa6ee5426144f13f38dd09f2")))
        (sha256
          (base32
            "08pwp1pv8c3klingl0qpymdh9ybqrjj47rdd191vhah2ahn5bs1g"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/dianyou")
    (synopsis "Search and analyze mails in Gnus")
    (description
      "Documentation at https://melpa.org/#/dianyou")
    (license #f)))

(define-public emacs-diary-manager
  (package
    (name "emacs-diary-manager")
    (version "20210404.1821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/diary-manager.git")
               (commit
                 "0fa122be62dd296cefe23bcf5074cc6159bd9868")))
        (sha256
          (base32
            "0zhhfba9ak7j713xp2qhxfdc3h9a9a1grp1nprlz7qnz3pkl2rjj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/raxod502/diary-manager")
    (synopsis "Simple personal diary")
    (description
      "Documentation at https://melpa.org/#/diary-manager")
    (license #f)))

(define-public emacs-didyoumean
  (package
    (name "emacs-didyoumean")
    (version "20200905.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/kisaragi-hiu/didyoumean.el.git")
               (commit
                 "ce5edcce160b86e7f6480f0381be785d43f97e19")))
        (sha256
          (base32
            "0a89bp9vz8lzg5klhmzpfmc0mhqmx667ivr86ckkjhiwr2mmzq0s"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/kisaragi-hiu/didyoumean.el")
    (synopsis "Did you mean to open another file?")
    (description
      "Documentation at https://melpa.org/#/didyoumean")
    (license #f)))

(define-public emacs-diff-at-point
  (package
    (name "emacs-diff-at-point")
    (version "20210921.603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-diff-at-point.git")
               (commit
                 "63951d8236163d86d5261b35d6c9a3f3f280e876")))
        (sha256
          (base32
            "1l1smrb2xmnz4cyimyvhq9hl406w364gkvqsk32b1q4jcvqhmdz4"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-diff-at-point")
    (synopsis "Diff navigation")
    (description
      "Documentation at https://melpa.org/#/diff-at-point")
    (license #f)))

(define-public emacs-diffpdf
  (package
    (name "emacs-diffpdf")
    (version "20210626.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/diffpdf.el.git")
               (commit
                 "a5b203b549e373cb9b0ef3f00c0010bd34dd644a")))
        (sha256
          (base32
            "0bd09ljvlzffb02fgcvjjvysrj762a1wfvad0ywph4722dvnjfn0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient))
    (home-page
      "https://github.com/ShuguangSun/diffpdf.el")
    (synopsis "Transient diffpdf")
    (description
      "Documentation at https://melpa.org/#/diffpdf")
    (license #f)))

(define-public emacs-diffscuss-mode
  (package
    (name "emacs-diffscuss-mode")
    (version "20141014.2357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomheon/diffscuss.git")
               (commit
                 "53f2d001bd3a5cb80c6ada16b4e570afd1989a09")))
        (sha256
          (base32
            "0ivy5ydww69gnxws6y37hgvyyvs9gssvdljzs1h13pcycm05hdxb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("diffscuss-mode/*.el")))
    (home-page "unspecified")
    (synopsis "Major mode for diffscuss files.")
    (description
      "Documentation at https://melpa.org/#/diffscuss-mode")
    (license #f)))

(define-public emacs-digitalocean
  (package
    (name "emacs-digitalocean")
    (version "20190607.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/olymk2/emacs-digitalocean.git")
               (commit
                 "6c32d3593286e2a62d9afab0057c829407b0d1e8")))
        (sha256
          (base32
            "08708nfqfgcd6hzh91li0yhr4kz9lxw6i80brlnis9bfk3cs4m9x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/olymk2/emacs-digitalocean")
    (synopsis
      "Create and manipulate digitalocean droplets")
    (description
      "Documentation at https://melpa.org/#/digitalocean")
    (license #f)))

(define-public emacs-dim-autoload
  (package
    (name "emacs-dim-autoload")
    (version "20210615.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/dim-autoload.git")
               (commit
                 "77b6a5814ffb49e33679fd67b53b9f05042b6ebc")))
        (sha256
          (base32
            "1a1xhmsm1c4k3mkbbhzd7fmb8q60fhs0lrf39m261180kz0wnhrq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/dim-autoload")
    (synopsis "dim or hide autoload cookie lines")
    (description
      "Documentation at https://melpa.org/#/dim-autoload")
    (license #f)))

(define-public emacs-dime
  (package
    (name "emacs-dime")
    (version "20210329.604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dylan-lang/dylan-emacs-support.git")
               (commit
                 "d85409dc3cba57a390ca85da95822f8078ecbfa2")))
        (sha256
          (base32
            "1cm4l2ycaw47mfgc6ms021zxkas1jajgwpnykqlkcwcbakbczxjl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dylan))
    (arguments '(#:files ("dime*.el")))
    (home-page "https://opendylan.org/")
    (synopsis "Dylan interaction mode")
    (description
      "Documentation at https://melpa.org/#/dime")
    (license #f)))

(define-public emacs-diminish
  (package
    (name "emacs-diminish")
    (version "20191127.1326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myrjola/diminish.el.git")
               (commit
                 "6ec6ebc391371418efc6c98d70b013f34af5a2ee")))
        (sha256
          (base32
            "0q8pihj9fwq9w978ycmvzv8kq8ksrdf8zfadjy8i2iwc4ib0jg7y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myrjola/diminish.el")
    (synopsis
      "Diminished modes are minor modes with no modeline display")
    (description
      "Documentation at https://melpa.org/#/diminish")
    (license #f)))

(define-public emacs-dionysos
  (package
    (name "emacs-dionysos")
    (version "20160810.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/dionysos.git")
               (commit
                 "0aac21caadabc5a7f09e18a9dcb02f3dec26588b")))
        (sha256
          (base32
            "1g6p9cr3p85i7ay3jmvn7f8c5k8d49fcynb3ymns7rgsf3ypvpyc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-libmpdee
            emacs-alert
            emacs-s
            emacs-dash
            emacs-pkg-info))
    (home-page
      "https://github.com/nlamirault/dionysos")
    (synopsis "Dionysos, a music player for Emacs")
    (description
      "Documentation at https://melpa.org/#/dionysos")
    (license #f)))

(define-public emacs-dir-treeview
  (package
    (name "emacs-dir-treeview")
    (version "20210625.2358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tilmanrassy/emacs-dir-treeview.git")
               (commit
                 "c48b0e12eb02ae046cf6dc97fe006db31ded3f2b")))
        (sha256
          (base32
            "07hhy41h1qx38rrf6f9b2r13chs3v4mzyplhpx1r6wjrj0nmh2pv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-treeview))
    (home-page
      "https://github.com/tilmanrassy/emacs-dir-treeview")
    (synopsis
      "A directory tree browser and simple file manager")
    (description
      "Documentation at https://melpa.org/#/dir-treeview")
    (license #f)))

(define-public emacs-dired-explorer
  (package
    (name "emacs-dired-explorer")
    (version "20180607.221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jidaikobo-shibata/dired-explorer.git")
               (commit
                 "3ade0a31b5340271d05e9bf443f2504960f6c6dd")))
        (sha256
          (base32
            "0lbm326na005k3pa11rqq5nbhvm55dydi2a7fzs3bzlqwbx7d6fq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "minor-mode provides Explorer like select file at dired.")
    (description
      "Documentation at https://melpa.org/#/dired-explorer")
    (license #f)))

(define-public emacs-dired-filter
  (package
    (name "emacs-dired-filter")
    (version "20191105.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "7c0ef09d57a80068a11edc74c3568e5ead5cc15a")))
        (sha256
          (base32
            "0qqj16r7p6pidlyj7fi0s3xhi13065642j20hlnply8nrq782vpj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils emacs-f))
    (arguments '(#:files ("dired-filter.el")))
    (home-page "unspecified")
    (synopsis "Ibuffer-like filtering for dired")
    (description
      "Documentation at https://melpa.org/#/dired-filter")
    (license #f)))

(define-public emacs-dired-hide-dotfiles
  (package
    (name "emacs-dired-hide-dotfiles")
    (version "20210222.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattiasb/dired-hide-dotfiles.git")
               (commit
                 "6a379f23f64045f5950d229254ce6f32dbbf5364")))
        (sha256
          (base32
            "0cwsjndvnv9a62ism7ckj27jdqx362947lyizka78qvmv369avv3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mattiasb/dired-hide-dotfiles")
    (synopsis "Hide dotfiles in dired")
    (description
      "Documentation at https://melpa.org/#/dired-hide-dotfiles")
    (license #f)))

(define-public emacs-dired-k
  (package
    (name "emacs-dired-k")
    (version "20211002.2358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dired-k.git")
               (commit
                 "1ddd8e0ea06f0e25cd5dedb2370cfa0cacfa8c9d")))
        (sha256
          (base32
            "1vxzcd159afljpacylz8dnjbnnkc97s44f3y0zdv35wcplszgjhr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/dired-k")
    (synopsis
      "Highlight dired by size, date, git status")
    (description
      "Documentation at https://melpa.org/#/dired-k")
    (license #f)))

(define-public emacs-dired-lsi
  (package
    (name "emacs-dired-lsi")
    (version "20200812.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/dired-lsi.el.git")
               (commit
                 "0f4038c8b47f6cfc70f82062800700c14c9912c2")))
        (sha256
          (base32
            "1bb46cla9pa4697njyqlycjjxf63i0nsxppg9sb0762xsashyz9s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/conao3/dired-lsi.el")
    (synopsis
      "Add memo to directory and show it in dired")
    (description
      "Documentation at https://melpa.org/#/dired-lsi")
    (license #f)))

(define-public emacs-dired-open
  (package
    (name "emacs-dired-open")
    (version "20180922.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "7c0ef09d57a80068a11edc74c3568e5ead5cc15a")))
        (sha256
          (base32
            "0qqj16r7p6pidlyj7fi0s3xhi13065642j20hlnply8nrq782vpj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-open.el")))
    (home-page "unspecified")
    (synopsis
      "Open files from dired using using custom actions")
    (description
      "Documentation at https://melpa.org/#/dired-open")
    (license #f)))

(define-public emacs-dired-rainbow
  (package
    (name "emacs-dired-rainbow")
    (version "20190722.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "7c0ef09d57a80068a11edc74c3568e5ead5cc15a")))
        (sha256
          (base32
            "0qqj16r7p6pidlyj7fi0s3xhi13065642j20hlnply8nrq782vpj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-rainbow.el")))
    (home-page "unspecified")
    (synopsis
      "Extended file highlighting according to its type")
    (description
      "Documentation at https://melpa.org/#/dired-rainbow")
    (license #f)))

(define-public emacs-dired-ranger
  (package
    (name "emacs-dired-ranger")
    (version "20180401.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "7c0ef09d57a80068a11edc74c3568e5ead5cc15a")))
        (sha256
          (base32
            "0qqj16r7p6pidlyj7fi0s3xhi13065642j20hlnply8nrq782vpj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-ranger.el")))
    (home-page "unspecified")
    (synopsis
      "Implementation of useful ranger features for dired")
    (description
      "Documentation at https://melpa.org/#/dired-ranger")
    (license #f)))

(define-public emacs-dired-toggle-sudo
  (package
    (name "emacs-dired-toggle-sudo")
    (version "20211216.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/renard/dired-toggle-sudo.git")
               (commit
                 "9f86cdf858225b15c20affb97ed105e4109047bf")))
        (sha256
          (base32
            "19p2yl61m7krjj2p6pg9cjw8n4zm3a6shv1k9vq0xvxjq86dx59l"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Browse directory with sudo privileges.")
    (description
      "Documentation at https://melpa.org/#/dired-toggle-sudo")
    (license #f)))

(define-public emacs-direx
  (package
    (name "emacs-direx")
    (version "20170422.1327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/direx.git")
               (commit
                 "a79bfdb5980cf6ed7bfb3b41ddc471a7b6c0ede4")))
        (sha256
          (base32
            "0fl9hdnrq54awx43635p6pmc8bqyppa02gs1d76nifi0q4g9v4m7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Simple Directory Explorer")
    (description
      "Documentation at https://melpa.org/#/direx")
    (license #f)))

(define-public emacs-direx-grep
  (package
    (name "emacs-direx-grep")
    (version "20140515.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/direx-grep.git")
               (commit
                 "1109a512a80b2673a70b18b8568514049017faad")))
        (sha256
          (base32
            "0swdh0qynpijsv6a2d308i42hfa0jwqsnmf4sm8vrhaf3vv25f5h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-direx))
    (home-page "https://github.com/aki2o/direx-grep")
    (synopsis
      "Grep node of direx.el using incremental search like anything.el/helm.el")
    (description
      "Documentation at https://melpa.org/#/direx-grep")
    (license #f)))

(define-public emacs-dirtree
  (package
    (name "emacs-dirtree")
    (version "20140129.832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dirtree.git")
               (commit
                 "ba55f1e716e386fdd37cb8e7f48616e405dc7251")))
        (sha256
          (base32
            "0abs3r4zzfnf4igiakrv3bpyxz7qlnw26l57rynsk7c3w3s5ya29"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-mode emacs-windata))
    (home-page "unspecified")
    (synopsis "Directory tree views")
    (description
      "Documentation at https://melpa.org/#/dirtree")
    (license #f)))

(define-public emacs-dirvish
  (package
    (name "emacs-dirvish")
    (version "20211223.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexluigit/dirvish.git")
               (commit
                 "82819c2e548d64a98c592c930c7c3330210206dc")))
        (sha256
          (base32
            "0ys9mbsl8mbi2bgw9920bjxscjydcs2w0r8lh1fm1k2mz2ylxnfw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (home-page
      "https://github.com/alexluigit/dirvish")
    (synopsis
      "A modern file manager based on dired mode")
    (description
      "Documentation at https://melpa.org/#/dirvish")
    (license #f)))

(define-public emacs-discover-js2-refactor
  (package
    (name "emacs-discover-js2-refactor")
    (version "20140129.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/discover-js2-refactor.git")
               (commit
                 "3812abf61f39f3e73a9f3daefa6fed4f21a429ba")))
        (sha256
          (base32
            "1vnbn4asz3lifscvy4shzisl6r0gkgq0qsa3kpgif3853wcd2rvn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-refactor emacs-discover))
    (home-page "unspecified")
    (synopsis
      "Adds discover context menu for js2-refactor")
    (description
      "Documentation at https://melpa.org/#/discover-js2-refactor")
    (license #f)))

(define-public emacs-disk
  (package
    (name "emacs-disk")
    (version "20171116.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kensanata/disk.git")
               (commit
                 "283e54e3be7d08f959076240b2ab324e25632137")))
        (sha256
          (base32
            "15fkfl9kjlpsg9p5g0xhm384ipvrzclwxvqk8vz1zixq0wam2ajm"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/DiskKey")
    (synopsis
      "simplified find-file, revert-file, save-buffer interface")
    (description
      "Documentation at https://melpa.org/#/disk")
    (license #f)))

(define-public emacs-dispass
  (package
    (name "emacs-dispass")
    (version "20140202.1531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/dispass.el.git")
               (commit
                 "b6e8f89040ebaaf0e7609b04bc27a8979f0ae861")))
        (sha256
          (base32
            "075gj81rnhrvv061wnldixpfmlsyfbnvacnk107z6f9v3m2m3vl1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://projects.ryuslash.org/dispass.el/")
    (synopsis "Emacs wrapper for DisPass")
    (description
      "Documentation at https://melpa.org/#/dispass")
    (license #f)))

(define-public emacs-dix-evil
  (package
    (name "emacs-dix-evil")
    (version "20170105.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/dix.git")
               (commit
                 "80d5ea3bceff75b842065e2f99657f3f70c7e604")))
        (sha256
          (base32
            "0l7ls9967km1vsmhqqrmbyykc6hx21frz5pjr8znasz5yhflbzwg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dix emacs-evil))
    (arguments '(#:files ("dix-evil.el")))
    (home-page "http://wiki.apertium.org/wiki/Emacs")
    (synopsis
      "optional evil-integration with dix.el")
    (description
      "Documentation at https://melpa.org/#/dix-evil")
    (license #f)))

(define-public emacs-django-commands
  (package
    (name "emacs-django-commands")
    (version "20191107.1830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-django-commands.git")
               (commit
                 "bef7ca848d6d1721ebb22b181c50dcfbef16e434")))
        (sha256
          (base32
            "1zd98xkbxvikp4sf5nxf6vb2sk7a5s3q9ida0l5f4z4jc48xx5zm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-django-commands")
    (synopsis "Run django commands")
    (description
      "Documentation at https://melpa.org/#/django-commands")
    (license #f)))

(define-public emacs-django-snippets
  (package
    (name "emacs-django-snippets")
    (version "20131229.1611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unrelentingtech/django-mode.git")
               (commit
                 "a71b8dd984e7f724b8321246e5c353a4ae5c986e")))
        (sha256
          (base32
            "0xf33ri5phy2mrb1dwvqb8waba33gj9bwmf6jhl6n0ksm43x0z40"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("django-snippets.el" "snippets")))
    (home-page
      "https://github.com/myfreeweb/django-mode")
    (synopsis "Yasnippets for django")
    (description
      "Documentation at https://melpa.org/#/django-snippets")
    (license #f)))

(define-public emacs-djangonaut
  (package
    (name "emacs-djangonaut")
    (version "20200503.921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/djangonaut.git")
               (commit
                 "75f642114e3997308a1e7e67c3025738cecee0fe")))
        (sha256
          (base32
            "1bka2nj2hqhpjiwdghp56y7z3jdxrpqw10s9divpa910mk33vay8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit-popup
            emacs-pythonic
            emacs-f
            emacs-s))
    (home-page
      "https://github.com/proofit404/djangonaut")
    (synopsis
      "Minor mode to interact with Django projects")
    (description
      "Documentation at https://melpa.org/#/djangonaut")
    (license #f)))

(define-public emacs-djinni-mode
  (package
    (name "emacs-djinni-mode")
    (version "20190303.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielmartin/djinni-mode.git")
               (commit
                 "6f84bc60d078725cc8b922a259ec5f4c7de83681")))
        (sha256
          (base32
            "1x77f0a0gz9xfmlma6bdvm0x5rn4w08fkmdbjqvllqvca1630s12"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danielmartin/djinni-mode")
    (synopsis "Major-mode for editing Djinni files.")
    (description
      "Documentation at https://melpa.org/#/djinni-mode")
    (license #f)))

(define-public emacs-dkdo
  (package
    (name "emacs-dkdo")
    (version "20131110.1119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidkeegan/dkdo.git")
               (commit
                 "fd6bb105e8331fafb6385c5238c988c4c5bbe2da")))
        (sha256
          (base32
            "1nbvdnw9g3zbbb0n2sn2kxfzs5wichhl9qid3qjp8dsiq1wpv459"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dkmisc))
    (arguments
      '(#:files ("*.el" "*.texi" "dir" "*.do")))
    (home-page "https://github.com/davidkeegan/dkdo")
    (synopsis
      "Do List major mode based on org-mode.")
    (description
      "Documentation at https://melpa.org/#/dkdo")
    (license #f)))

(define-public emacs-dkl
  (package
    (name "emacs-dkl")
    (version "20161005.7")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/dkl.git")
               (commit
                 "6b4584f86037bda3383960c678d51f340229fb91")))
        (sha256
          (base32
            "1xpidgj5xk0g4ajpglhbhi02s5il8qqcvh2ccf4ac9daa1r34kxp"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "keyboards" "layouts")))
    (home-page "https://github.com/flexibeast/dkl")
    (synopsis "Display keyboard layout.")
    (description
      "Documentation at https://melpa.org/#/dkl")
    (license #f)))

(define-public emacs-dmacro
  (package
    (name "emacs-dmacro")
    (version "20200803.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/dmacro.git")
               (commit
                 "3480b97aaad9e65fa03c6a9d1a0a8111be1179f8")))
        (sha256
          (base32
            "1vb2jz4z4z9bhw76b1l08jf8gd3kq6c8zsxxvmlan87nwkj211wz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emacs-jp/dmacro")
    (synopsis
      "Repeated detection and execution of key operation")
    (description
      "Documentation at https://melpa.org/#/dmacro")
    (license #f)))

(define-public emacs-dmenu
  (package
    (name "emacs-dmenu")
    (version "20190908.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-dmenu.git")
               (commit
                 "e8cc9b27c79d3ecc252267c082ab8e9c82eab264")))
        (sha256
          (base32
            "098ncygms1r33zhjlq4fj2p4jc91v5whqrm3fazzdk7sd6dilf25"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "simulate the dmenu command line program")
    (description
      "Documentation at https://melpa.org/#/dmenu")
    (license #f)))

(define-public emacs-docbook-snippets
  (package
    (name "emacs-docbook-snippets")
    (version "20150714.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhradilek/emacs-docbook-snippets.git")
               (commit
                 "b06297fdec039a541aaa6312cb328a11062cfab4")))
        (sha256
          (base32
            "1nbm3wzd12rsrhnwlcc6b72b1ala328mfpcp5bwlfcdshw6mfcrq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("docbook-snippets.el" "snippets")))
    (home-page
      "https://github.com/jhradilek/emacs-docbook-snippets")
    (synopsis "Yasnippets for DocBook")
    (description
      "Documentation at https://melpa.org/#/docbook-snippets")
    (license #f)))

(define-public emacs-docean
  (package
    (name "emacs-docean")
    (version "20180605.1744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/docean.git")
               (commit
                 "bbe2298fd21f7876fc2d5c52a69b931ff59df979")))
        (sha256
          (base32
            "1fzs6k76nyz2xjvydks6v6d2ib7qqj181s7c8r57w9ylr2zqfacj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/emacs-pe/docean.el")
    (synopsis
      "Interact with DigitalOcean from Emacs.")
    (description
      "Documentation at https://melpa.org/#/docean")
    (license #f)))

(define-public emacs-docker-cli
  (package
    (name "emacs-docker-cli")
    (version "20190524.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bosko/docker-cli.git")
               (commit
                 "c4b02894466d8642ad3d49df4c4a80e023a672aa")))
        (sha256
          (base32
            "0q1c943m0ncxbwi5mb1vf7lavkcz0dbx14m3i8a981pqkaksl1lw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bosko/docker-cli")
    (synopsis
      "Running various commands in docker containers")
    (description
      "Documentation at https://melpa.org/#/docker-cli")
    (license #f)))

(define-public emacs-docker-compose-mode
  (package
    (name "emacs-docker-compose-mode")
    (version "20200830.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meqif/docker-compose-mode.git")
               (commit
                 "abaa4f3aeb5c62d7d16e186dd7d77f4e846e126a")))
        (sha256
          (base32
            "123msjiw5jsgmb5r1vmp3h2m4qia2pjg9wrb9cjhi3fjlspk9x2d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-yaml-mode))
    (arguments
      '(#:files
        (:defaults
          (:exclude "docker-compose-mode-helpers.el"))))
    (home-page
      "https://github.com/meqif/docker-compose-mode")
    (synopsis
      "Major mode for editing docker-compose files")
    (description
      "Documentation at https://melpa.org/#/docker-compose-mode")
    (license #f)))

(define-public emacs-docopt
  (package
    (name "emacs-docopt")
    (version "20201211.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/docopt.el.git")
               (commit
                 "6e1105347decbf9b4b848d952858455f9b145c56")))
        (sha256
          (base32
            "0vkmgfgw8qica21hcqila62ivqxshkay2r2dyy4dxxj3xypk3083"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-parsec
            emacs-s
            emacs-transient))
    (arguments '(#:files (:defaults "src/*.el")))
    (home-page "https://github.com/r0man/docopt.el")
    (synopsis "A Docopt implementation in Elisp")
    (description
      "Documentation at https://melpa.org/#/docopt")
    (license #f)))

(define-public emacs-docstr
  (package
    (name "emacs-docstr")
    (version "20211004.722")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/docstr.git")
               (commit
                 "aa2e30dc6b1d3fa6fb1da309fb87df683eab1e62")))
        (sha256
          (base32
            "1pqs4z97vs6s08g7pfbp3qqjx1q3z09lrjdzxjb24vrcfkki9cmi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files (:defaults "langs/*.el")))
    (home-page "https://github.com/jcs-elpa/docstr")
    (synopsis "A document string minor mode")
    (description
      "Documentation at https://melpa.org/#/docstr")
    (license #f)))

(define-public emacs-dokuwiki-mode
  (package
    (name "emacs-dokuwiki-mode")
    (version "20170223.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kai2nenobu/emacs-dokuwiki-mode.git")
               (commit
                 "e4e116f6fcc373e3f5937c1a7daa5c2c9c6d3fa1")))
        (sha256
          (base32
            "0bmcm7lvzm8sg2l1j7bg02jasxb8g81q9ilycblmsl1ckbfwq0yp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kai2nenobu/emacs-dokuwiki-mode")
    (synopsis "Major mode for DokuWiki document")
    (description
      "Documentation at https://melpa.org/#/dokuwiki-mode")
    (license #f)))

(define-public emacs-dollaro
  (package
    (name "emacs-dollaro")
    (version "20151123.1302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/dollaro.git")
               (commit
                 "500127f0172ac7a1eec627e026b59136580a74ac")))
        (sha256
          (base32
            "1xyqsnymgdd8ic3az2lgwv7s7vld6d4pcycb234bxm4in9fixgdj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis "simple text templates")
    (description
      "Documentation at https://melpa.org/#/dollaro")
    (license #f)))

(define-public emacs-doom-modeline-now-playing
  (package
    (name "emacs-doom-modeline-now-playing")
    (version "20210831.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elken/doom-modeline-now-playing.git")
               (commit
                 "ef9158dfdf32e8eb789b69e7394d0bddaa68f42c")))
        (sha256
          (base32
            "1namv6qfmf5xxwbhsl5887cp41y8krr7g9vf3dzvi5n924ixlm2l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-doom-modeline emacs-async))
    (home-page
      "https://github.com/elken/doom-modeline-now-playing")
    (synopsis
      "Segment for Doom Modeline to show playerctl information")
    (description
      "Documentation at https://melpa.org/#/doom-modeline-now-playing")
    (license #f)))

(define-public emacs-doom-themes
  (package
    (name "emacs-doom-themes")
    (version "20211221.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doomemacs/themes.git")
               (commit
                 "2d7bf3daa50a4e0a612faed43cd8cd4af33b9e19")))
        (sha256
          (base32
            "01cm9x2p8wsrj0kgqacmfhjf760n518gbv7vmwfqx9x1pmnjx0pa"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "themes/*.el"
          "themes/*/*.el"
          "extensions/*.el")))
    (home-page
      "https://github.com/hlissner/emacs-doom-themes")
    (synopsis
      "an opinionated pack of modern color-themes")
    (description
      "Documentation at https://melpa.org/#/doom-themes")
    (license #f)))

(define-public emacs-download-region
  (package
    (name "emacs-download-region")
    (version "20210306.415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/download-region.git")
               (commit
                 "e0a721858a22896fa1d7f1d5689dd0878dbc58fa")))
        (sha256
          (base32
            "1hvnwqx61g4idqww1axs4xa3jxrd68lvipgvca22ybr2fpdny1xx"))))
    (build-system melpa-build-system)
    (home-page "http://zk-phi.github.io/")
    (synopsis "Simple in-buffer download manager")
    (description
      "Documentation at https://melpa.org/#/download-region")
    (license #f)))

(define-public emacs-doxy-graph-mode
  (package
    (name "emacs-doxy-graph-mode")
    (version "20210604.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gustavopuche/doxy-graph-mode.git")
               (commit
                 "88af6ef4bc9c8918b66c7774f0a115b2addc310e")))
        (sha256
          (base32
            "0adis4gprh7gzi1nm274gqgzr794fsq4zfjfwz3nh96agc8h8g7j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gustavopuche/doxy-graph-mode")
    (synopsis
      "Links source code editing with doxygen call graphs")
    (description
      "Documentation at https://melpa.org/#/doxy-graph-mode")
    (license #f)))

(define-public emacs-dracula-theme
  (package
    (name "emacs-dracula-theme")
    (version "20211206.1333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dracula/emacs.git")
               (commit
                 "049257458288cbc2d94737e30bc0005601c9727c")))
        (sha256
          (base32
            "0nry6fjjlwm0n8rqwk0g6jbjzqf97hzicaq1mf438f06f7h6h2mr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dracula/emacs")
    (synopsis "Dracula Theme")
    (description
      "Documentation at https://melpa.org/#/dracula-theme")
    (license #f)))

(define-public emacs-drag-stuff
  (package
    (name "emacs-drag-stuff")
    (version "20161108.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/drag-stuff.el.git")
               (commit
                 "6d06d846cd37c052d79acd0f372c13006aa7e7c8")))
        (sha256
          (base32
            "1fsj88n1j50cxjzx62khzxrajsvf33si8iwgbaz6z7z8pwh91qcd"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/drag-stuff")
    (synopsis
      "Drag stuff (lines, words, region, etc...) around")
    (description
      "Documentation at https://melpa.org/#/drag-stuff")
    (license #f)))

(define-public emacs-drone
  (package
    (name "emacs-drone")
    (version "20161106.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olymk2/emacs-drone.git")
               (commit
                 "1d4ee037ad3208847a4235426edf0c4a3e7b1899")))
        (sha256
          (base32
            "1dwxgzf32cvfi7b6zw3qzamj82zs2c0ap6i1w0jqqgzmkz20dqvf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/olymk2/emacs-drone")
    (synopsis
      "Launch your drone test suite if drone.yml is present")
    (description
      "Documentation at https://melpa.org/#/drone")
    (license #f)))

(define-public emacs-drupal-mode
  (package
    (name "emacs-drupal-mode")
    (version "20200210.2222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnested/drupal-mode.git")
               (commit
                 "4f3cffa76d8359449bf0e960f884320130f24b85")))
        (sha256
          (base32
            "1fdhlb25w0ig7cg51w58h63zy416fwbcbvm63zr4s9gbzsdidmjs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-php-mode))
    (arguments
      '(#:files
        ("drupal-mode.el" "drush-make-mode.el" "drupal")))
    (home-page
      "https://github.com/arnested/drupal-mode")
    (synopsis
      "Advanced minor mode for Drupal development")
    (description
      "Documentation at https://melpa.org/#/drupal-mode")
    (license #f)))

(define-public emacs-dsvn
  (package
    (name "emacs-dsvn")
    (version "20190316.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/dsvn.git")
               (commit
                 "c37d2412ba92aad647bcf5aeb151e620e8069f8d")))
        (sha256
          (base32
            "1bv4ivv9j5r0ax4vay1kmwv753y44qj6qprr38yh7ky0fpsml34c"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Subversion interface")
    (description
      "Documentation at https://melpa.org/#/dsvn")
    (license #f)))

(define-public emacs-dtb-mode
  (package
    (name "emacs-dtb-mode")
    (version "20210105.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/schspa/dtb-mode.git")
               (commit
                 "7f66de945a0be2be5a26b4619cae097288fb55cd")))
        (sha256
          (base32
            "1ljmjc0a0ich5wixqq8v0k7gh51va9smq5a340c23zfbia17mmw5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/schspa/dtb-mode")
    (synopsis "Show device tree souce in dtbs")
    (description
      "Documentation at https://melpa.org/#/dtb-mode")
    (license #f)))

(define-public emacs-dtk
  (package
    (name "emacs-dtk")
    (version "20210926.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dtk01/dtk.git")
               (commit
                 "f6a94d86263041f9a172cb7df90e00d1ec44604a")))
        (sha256
          (base32
            "1q29lpza8rd209zh0n04ia6n359p372czkm57hhmvcd9cmi91fc8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/dtk01/dtk.el")
    (synopsis "access SWORD content via diatheke")
    (description
      "Documentation at https://melpa.org/#/dtk")
    (license #f)))

(define-public emacs-ducpel
  (package
    (name "emacs-ducpel")
    (version "20140702.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/ducpel.git")
               (commit
                 "b53b935ab95c02b82ccf38f63c89e39e99477a55")))
        (sha256
          (base32
            "07cgwkfi69xjjxx9hs5rdblsil1h3bpbx9k7hwyv1dg3ivihm04s"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "*.info" "dir" "levels")))
    (home-page "https://github.com/alezost/ducpel")
    (synopsis "Logic game with sokoban elements")
    (description
      "Documentation at https://melpa.org/#/ducpel")
    (license #f)))

(define-public emacs-dumb-diff
  (package
    (name "emacs-dumb-diff")
    (version "20171211.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacktasia/dumb-diff.git")
               (commit
                 "1a2331d283049b71a07c1b06b1e0627a950d55f4")))
        (sha256
          (base32
            "05gmpp4s9y2ql27vb5vpqn3xh35qjfxgq9gzyvg86df43qfl8wvl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "fast arbitrary diffs")
    (description
      "Documentation at https://melpa.org/#/dumb-diff")
    (license #f)))

(define-public emacs-dummyparens
  (package
    (name "emacs-dummyparens")
    (version "20141009.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/snosov1/dummyparens.git")
               (commit
                 "9798ef1d0eaa24e4fe66f8aa6022a8c62714cc89")))
        (sha256
          (base32
            "0g72nnz0j6dvllyxyrw20z1vg6p7sy46yy0fq017pa77sgqm0xzh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/snosov1/dummyparens")
    (synopsis
      "parenthesis auto-pairing and wrapping")
    (description
      "Documentation at https://melpa.org/#/dummyparens")
    (license #f)))

(define-public emacs-dune
  (package
    (name "emacs-dune")
    (version "20210909.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/dune.git")
               (commit
                 "6046bb8319b51b6344f0422731ce2b36d2921f40")))
        (sha256
          (base32
            "1jp5rk6yjr7lb7wdhnlvi9ypsn0pj4h6jfkfmcv2f4rbzhm1h2bz"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("editor-integration/emacs/*.el")))
    (home-page "https://github.com/ocaml/dune")
    (synopsis
      "Integration with the dune build system")
    (description
      "Documentation at https://melpa.org/#/dune")
    (license #f)))

(define-public emacs-dut-mode
  (package
    (name "emacs-dut-mode")
    (version "20170729.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dut-lang/dut-mode.git")
               (commit
                 "9235c7acaa6690942e9de8b7acd1e4be0c859dc1")))
        (sha256
          (base32
            "0fpqsm6y23anyx57gp4c6whzxrn8x03cp76iwx27c4gkq6ph1z8n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dut-lang/dut-mode")
    (synopsis
      "Major mode for the Dut programming language")
    (description
      "Documentation at https://melpa.org/#/dut-mode")
    (license #f)))

(define-public emacs-dylan
  (package
    (name "emacs-dylan")
    (version "20210613.1431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dylan-lang/dylan-emacs-support.git")
               (commit
                 "d85409dc3cba57a390ca85da95822f8078ecbfa2")))
        (sha256
          (base32
            "1cm4l2ycaw47mfgc6ms021zxkas1jajgwpnykqlkcwcbakbczxjl"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("dylan*.el")))
    (home-page "https://opendylan.org/")
    (synopsis "Dylan editing modes")
    (description
      "Documentation at https://melpa.org/#/dylan")
    (license #f)))

(define-public emacs-dynamic-ruler
  (package
    (name "emacs-dynamic-ruler")
    (version "20160602.808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/dynamic-ruler.git")
               (commit
                 "c9c0de6fe5721f06b50e01d9b4684b519c71b367")))
        (sha256
          (base32
            "09skp2d5likqjlrsfis3biqw59sjkgid5249fld9ahqm5f1wq296"))))
    (build-system melpa-build-system)
    (home-page
      "http://rocher.github.io/dynamic-ruler")
    (synopsis "Displays a dynamic ruler at point.")
    (description
      "Documentation at https://melpa.org/#/dynamic-ruler")
    (license #f)))

(define-public emacs-e2wm-r
  (package
    (name "emacs-e2wm-r")
    (version "20151230.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/e2wm-R.git")
               (commit
                 "4350601ee1a96bf89777b3f09f1b79b88e2e6e4d")))
        (sha256
          (base32
            "1g77gf24abwcvf7z52vs762s6jp978pnvza8zmzwkwfvp1mkx233"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-e2wm emacs-inliner emacs-ess))
    (home-page "https://github.com/myuhe/e2wm-R.el")
    (synopsis
      "some e2wm plugin and perspective for GNU R")
    (description
      "Documentation at https://melpa.org/#/e2wm-R")
    (license #f)))

(define-public emacs-e2wm-sww
  (package
    (name "emacs-e2wm-sww")
    (version "20200805.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/e2wm-sww.git")
               (commit
                 "8926d0c70be05c7b4ef821e22e411e8813973687")))
        (sha256
          (base32
            "0941mfz6a398jq5cb8kgr5cikzkzrpjnfbbx2f9c1yy9wj1awklk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2wm))
    (home-page "https://github.com/aki2o/e2wm-sww")
    (synopsis
      "Plugin of e2wm.el to switch plugin quickly")
    (description
      "Documentation at https://melpa.org/#/e2wm-sww")
    (license #f)))

(define-public emacs-easy-after-load
  (package
    (name "emacs-easy-after-load")
    (version "20170817.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pd/easy-after-load.git")
               (commit
                 "29e20145da49ac9ea40463c552130777408040de")))
        (sha256
          (base32
            "00xgd39qc760lmxpbggzn98aks5nad08b5ry54pkszjlmh37yqj7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pd/easy-after-load")
    (synopsis
      "eval-after-load for all files in a directory")
    (description
      "Documentation at https://melpa.org/#/easy-after-load")
    (license #f)))

(define-public emacs-easy-escape
  (package
    (name "emacs-easy-escape")
    (version "20210917.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/easy-escape.git")
               (commit
                 "938497a21e65ba6b3ff8ec90e93a6d0ab18dc9b4")))
        (sha256
          (base32
            "0bqwn6cd7lrk7f8vgcvclryvlpxvl2bndsmwmbn0zxmvqkdba7l1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cpitclaudel/easy-escape")
    (synopsis
      "Improve readability of escape characters in regular expressions")
    (description
      "Documentation at https://melpa.org/#/easy-escape")
    (license #f)))

(define-public emacs-easy-kill-extras
  (package
    (name "emacs-easy-kill-extras")
    (version "20210529.945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/easy-kill-extras.el.git")
               (commit
                 "74e9d0fcafc38d5f24e6209671a552bc1ba5a867")))
        (sha256
          (base32
            "0yxfsp4zzzw9v4swgslsr4v35hs04sczskfyfdvw8wk0aahxcwrx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-easy-kill))
    (home-page
      "https://github.com/knu/easy-kill-extras.el")
    (synopsis "Extra functions for easy-kill.")
    (description
      "Documentation at https://melpa.org/#/easy-kill-extras")
    (license #f)))

(define-public emacs-easy-repeat
  (package
    (name "emacs-easy-repeat")
    (version "20150516.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/easy-repeat.el.git")
               (commit
                 "060f0e6801c82c40c06961dc0528a00e18947a8c")))
        (sha256
          (base32
            "18bm5ns1qrxq0rrz9sylshr62wkymh1m6b7ch2y74f8rcwdwjgnq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/easy-repeat.el")
    (synopsis "Repeat easily")
    (description
      "Documentation at https://melpa.org/#/easy-repeat")
    (license #f)))

(define-public emacs-ebf
  (package
    (name "emacs-ebf")
    (version "20210225.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/ebf.git")
               (commit
                 "6cbeb4d62416f4cfd5be8906667342af8ecc44a6")))
        (sha256
          (base32
            "1d9vbn8gmiqcpxqmsv8ir3cc7clm7x1c6hz8drws3cakxk0wffn9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/rexim/ebf")
    (synopsis
      "brainfuck language transpiler to Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ebf")
    (license #f)))

(define-public emacs-ebib
  (package
    (name "emacs-ebib")
    (version "20211216.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/ebib.git")
               (commit
                 "2e11ff76407ad79f3d08445647920f380e83e298")))
        (sha256
          (base32
            "0brrl4pyjpwp714f4nfw6y4xgfv144ivhbra6v5aq924drv4yvgq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parsebib))
    (home-page "http://joostkremers.github.io/ebib/")
    (synopsis "a BibTeX database manager")
    (description
      "Documentation at https://melpa.org/#/ebib")
    (license #f)))

(define-public emacs-ebuku
  (package
    (name "emacs-ebuku")
    (version "20211001.246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/ebuku.git")
               (commit
                 "0f853e9fd7647a33b38925727d283f5731fafef8")))
        (sha256
          (base32
            "18f4yk45b2l3w5i05nwqy67phm4ai1kyjf2r4yjcr89bv7bvd1ag"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/flexibeast/ebuku")
    (synopsis
      "Interface to the buku Web bookmark manager")
    (description
      "Documentation at https://melpa.org/#/ebuku")
    (license #f)))

(define-public emacs-eclipse-theme
  (package
    (name "emacs-eclipse-theme")
    (version "20191113.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/eclipse-theme.git")
               (commit
                 "dcf97865512ed450f9d5137c1a05e12edb5b7f80")))
        (sha256
          (base32
            "0nv0cwn9pjvy54b2pv9ncr6xmh6nnrdcdyqmcahrzmlvgy4ks8ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/eclipse-theme")
    (synopsis "Theme based on Eclipse circa 2010")
    (description
      "Documentation at https://melpa.org/#/eclipse-theme")
    (license #f)))

(define-public emacs-ecukes
  (package
    (name "emacs-ecukes")
    (version "20210202.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecukes/ecukes.git")
               (commit
                 "d173cdf487bc2c62305e2232db96290bc021950f")))
        (sha256
          (base32
            "182qgddfv8nd89y1l55rs5vm5i61ayc8cxbplb8zx0alnid9xrw1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-commander
            emacs-espuds
            emacs-ansi
            emacs-dash
            emacs-s
            emacs-f))
    (arguments
      '(#:files
        ("ecukes*" "templates" "bin" "reporters")))
    (home-page "unspecified")
    (synopsis "Cucumber for Emacs.")
    (description
      "Documentation at https://melpa.org/#/ecukes")
    (license #f)))

(define-public emacs-edbi
  (package
    (name "emacs-edbi")
    (version "20160225.141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-edbi.git")
               (commit
                 "6f50aaf4bde75255221f2292c7a4ad3fa9d918c0")))
        (sha256
          (base32
            "0x0igyvdcm4863n7zndvcv6wgzwgn7324cbfjja6xd7r0k936zdy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable emacs-epc))
    (arguments '(#:files ("edbi*.el" "edbi*.pl")))
    (home-page
      "https://github.com/kiwanami/emacs-edbi")
    (synopsis "Emacs Database Interface")
    (description
      "Documentation at https://melpa.org/#/edbi")
    (license #f)))

(define-public emacs-edebug-inline-result
  (package
    (name "emacs-edebug-inline-result")
    (version "20210213.25")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/edebug-inline-result.git")
               (commit
                 "86a9ed9e4f58c2e9870b8918dc898ccd78d2d3f8")))
        (sha256
          (base32
            "1zf09s03xkhpbhkj99ilzp679lhkyiaaa5kmyj4lb380di1nrw2w"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/stardiviner/edebug-inline-result")
    (synopsis "Show Edebug result inline")
    (description
      "Documentation at https://melpa.org/#/edebug-inline-result")
    (license #f)))

(define-public emacs-edit-chrome-textarea
  (package
    (name "emacs-edit-chrome-textarea")
    (version "20200324.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/edit-chrome-textarea.el.git")
               (commit
                 "e9ef6a72bdc6b58f932c51aa161869cee11b4bc9")))
        (sha256
          (base32
            "1akyxq0ja06q5bywa6nb4klnbvrw6f6d83bzrjdz2sc7ddk3a4hz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page
      "https://github.com/xuchunyang/edit-chrome-textarea.el")
    (synopsis "Edit Chrome Textarea")
    (description
      "Documentation at https://melpa.org/#/edit-chrome-textarea")
    (license #f)))

(define-public emacs-edwina
  (package
    (name "emacs-edwina")
    (version "20200113.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajgrf/edwina.git")
               (commit
                 "c5368716a504c93407fd8cb4ef925a8d8eb62698")))
        (sha256
          (base32
            "0rsi1v9rr76crbgb7f13g31rfq5bjk0hchqr356h97xlqr39168y"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ajgrf/edwina")
    (synopsis "Dynamic window manager")
    (description
      "Documentation at https://melpa.org/#/edwina")
    (license #f)))

(define-public emacs-eglot
  (package
    (name "emacs-eglot")
    (version "20211215.2131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/eglot.git")
               (commit
                 "17afdf52089b824ab6ff2000c6c5916135a4eca9")))
        (sha256
          (base32
            "18r53ipkycn59v6n6p0v3l0ziga685p0rxbj519jai6jd154apfz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joaotavora/eglot")
    (synopsis
      "Client for Language Server Protocol (LSP) servers")
    (description
      "Documentation at https://melpa.org/#/eglot")
    (license #f)))

(define-public emacs-eglot-java
  (package
    (name "emacs-eglot-java")
    (version "20211213.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yveszoundi/eglot-java.git")
               (commit
                 "66b9615ab021d26d92de34e5131cee44f8e58886")))
        (sha256
          (base32
            "0lfifd43fz09avwgy6gs7j06s2xxlll6vkrbfbb9gl4r6q17786y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eglot))
    (home-page
      "https://github.com/yveszoundi/eglot-java")
    (synopsis
      "Java extension for the eglot LSP client")
    (description
      "Documentation at https://melpa.org/#/eglot-java")
    (license #f)))

(define-public emacs-eglot-jl
  (package
    (name "emacs-eglot-jl")
    (version "20211208.359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/non-Jedi/eglot-jl.git")
               (commit
                 "2e35cf9768d97a0429a72deddbe30d6d7722d454")))
        (sha256
          (base32
            "15d4pym6dv08jp6iki00xpf1i4vc92yd2rcjv21k64h6fc862gps"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot emacs-julia-mode))
    (arguments
      '(#:files (:defaults "*.jl" "*.toml")))
    (home-page
      "https://github.com/non-Jedi/eglot-jl")
    (synopsis "Julia support for eglot")
    (description
      "Documentation at https://melpa.org/#/eglot-jl")
    (license #f)))

(define-public emacs-ein
  (package
    (name "emacs-ein")
    (version "20211213.2119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/millejoh/emacs-ipython-notebook.git")
               (commit
                 "c6696c12eb7ced9418cd37b3353089633e7e9884")))
        (sha256
          (base32
            "1vclk4068ailb8imaangl2gwwbrm34q51z8wmmafmr662c5gqwr4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket
            emacs-anaphora
            emacs-request
            emacs-deferred
            emacs-polymode
            emacs-dash
            emacs-with-editor))
    (arguments
      '(#:files ("lisp/*" (:exclude "lisp/zeroein.el"))))
    (home-page
      "https://github.com/dickmao/emacs-ipython-notebook")
    (synopsis "Emacs IPython Notebook")
    (description
      "Documentation at https://melpa.org/#/ein")
    (license #f)))

(define-public emacs-ejc-sql
  (package
    (name "emacs-ejc-sql")
    (version "20211119.1910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/ejc-sql.git")
               (commit
                 "b8d534cec8f75dc95961dca72e39a096c5eea980")))
        (sha256
          (base32
            "0xl6mb1s70ljb5wkd41qrjvr0gdnds4yli2y3mmrcvry0cp3kp0f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clomacs
            emacs-dash
            emacs-spinner
            emacs-direx))
    (arguments
      '(#:files
        (:defaults "project.clj" "src" "snippets")))
    (home-page "https://github.com/kostafey/ejc-sql")
    (synopsis "Emacs SQL client uses Clojure JDBC.")
    (description
      "Documentation at https://melpa.org/#/ejc-sql")
    (license #f)))

(define-public emacs-ejson-mode
  (package
    (name "emacs-ejson-mode")
    (version "20190720.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/ejson-mode.git")
               (commit
                 "9630dfac9549779711dbe89e621f516bb4b3a354")))
        (sha256
          (base32
            "1j4v34m7jfiivbpps2pdvzl9q2gwj7rzcna9x93pj0qkw1xaqc3l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dantecatalfamo/ejson-mode")
    (synopsis "Major mode for editing ejson files.")
    (description
      "Documentation at https://melpa.org/#/ejson-mode")
    (license #f)))

(define-public emacs-el-init
  (package
    (name "emacs-el-init")
    (version "20150728.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/el-init.git")
               (commit
                 "7538e1511ff7ceea2ba65ed4783c57e2f9176ee6")))
        (sha256
          (base32
            "1x71qqw6bq86cpfldz3jgchpm93200z8xcq8vwryyg3ynz681b0a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-anaphora))
    (home-page "https://github.com/HKey/el-init")
    (synopsis "A loader inspired by init-loader")
    (description
      "Documentation at https://melpa.org/#/el-init")
    (license #f)))

(define-public emacs-el-mock
  (package
    (name "emacs-el-mock")
    (version "20170824.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/el-mock.el.git")
               (commit
                 "5df1d3a956544f1d3ad0bcd81daf47fff33ab8cc")))
        (sha256
          (base32
            "06ldnrpqvbdxfzr8v7pj9xacgvkp36xjlhvjkpxldmqj1l5v8a6w"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/el-mock.el")
    (synopsis
      "Tiny Mock and Stub framework in Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/el-mock")
    (license #f)))

(define-public emacs-el-secretario
  (package
    (name "emacs-el-secretario")
    (version "20211208.1038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~zetagon/el-secretario")
               (commit
                 "2a5290ad57d9800d4b56896a768e37631bef06b0")))
        (sha256
          (base32
            "15b2jz0ddvikpfg8m85l1m84ddmj1l9pvai0frw61p6mg5rnwxaj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-hercules))
    (arguments
      '(#:files
        ("el-secretario.el"
         "el-secretario-source.el"
         "el-secretario-message.el"
         "el-secretario-function.el")))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis
      "Unify all your inboxes with the Emacs secretary")
    (description
      "Documentation at https://melpa.org/#/el-secretario")
    (license #f)))

(define-public emacs-el-secretario-mu4e
  (package
    (name "emacs-el-secretario-mu4e")
    (version "20211214.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~zetagon/el-secretario")
               (commit
                 "2a5290ad57d9800d4b56896a768e37631bef06b0")))
        (sha256
          (base32
            "15b2jz0ddvikpfg8m85l1m84ddmj1l9pvai0frw61p6mg5rnwxaj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-el-secretario))
    (arguments '(#:files ("el-secretario-mu4e.el")))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis "Add mu4e inboxes to el-secretario")
    (description
      "Documentation at https://melpa.org/#/el-secretario-mu4e")
    (license #f)))

(define-public emacs-el-sprunge
  (package
    (name "emacs-el-sprunge")
    (version "20200312.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/el-sprunge.git")
               (commit
                 "e4365ea0bdf60969817619376bdcc98003fec33d")))
        (sha256
          (base32
            "13d2dr5r9nv97ma3abcnhqgq86rqwqlwvq64z3hm0qibsxxajdhq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-server emacs-htmlize))
    (home-page "unspecified")
    (synopsis
      "Command line paste server with Emacs highlighting")
    (description
      "Documentation at https://melpa.org/#/el-sprunge")
    (license #f)))

(define-public emacs-el-spy
  (package
    (name "emacs-el-spy")
    (version "20131226.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/el-spy.git")
               (commit
                 "b1dead9d1877660856ada22d906ac4e54695aec7")))
        (sha256
          (base32
            "016l3inzb7dby0w58najj2pvymwk6gllsxvqj2fkz3599i36p1pn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/uk-ar/el-spy")
    (synopsis
      "Mocking framework for Emacs lisp. It also support spy, proxy.")
    (description
      "Documentation at https://melpa.org/#/el-spy")
    (license #f)))

(define-public emacs-el2markdown
  (package
    (name "emacs-el2markdown")
    (version "20170630.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/el2markdown.git")
               (commit
                 "368d99313683cd943c99feaffca356be60bdb636")))
        (sha256
          (base32
            "1h0cr8qcvj9r3acb6bf5nyglvi5gdglwflkfl5jbzp0nm1p9iqcg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/el2markdown")
    (synopsis
      "Convert commentary section of elisp files to markdown.")
    (description
      "Documentation at https://melpa.org/#/el2markdown")
    (license #f)))

(define-public emacs-el2org
  (package
    (name "emacs-el2org")
    (version "20200408.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/el2org.git")
               (commit
                 "7db77fdd73f378d4e60e34c11bbdf00677adc32c")))
        (sha256
          (base32
            "196nrg4cp57calv36if0fkc8bjiz6qzisr29ry49zmkgjlqaafq3"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/el2org")
    (synopsis "Convert elisp file to org file")
    (description
      "Documentation at https://melpa.org/#/el2org")
    (license #f)))

(define-public emacs-elbank
  (package
    (name "emacs-elbank")
    (version "20180316.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/elbank.git")
               (commit
                 "fa9bc7dec0a8fd489e90b9f178719344cc8d315a")))
        (sha256
          (base32
            "08jxxkbgn2z4kvqkhbimf3lj999yxmyi14wpq8wgbhgcf6q6zx8a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Personal finances reporting application")
    (description
      "Documentation at https://melpa.org/#/elbank")
    (license #f)))

(define-public emacs-elcontext
  (package
    (name "emacs-elcontext")
    (version "20210109.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rollacaster/elcontext.git")
               (commit
                 "2efd3dd8c5176c4f071bb048be6cb069b05d6e9e")))
        (sha256
          (base32
            "1xi37jpx8wj2cq6n8la1p4wmqzrwga2ixp6rllbnbhq2fpm9fjsr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-hydra
            emacs-f
            emacs-osx-location
            emacs-uuidgen))
    (home-page
      "https://github.com/rollacaster/elcontext")
    (synopsis "Create context specific actions")
    (description
      "Documentation at https://melpa.org/#/elcontext")
    (license #f)))

(define-public emacs-elcord
  (package
    (name "emacs-elcord")
    (version "20211218.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Mstrodl/elcord.git")
               (commit
                 "eb4ae2e7e03a5fc26b054ba2fa9a1d308e239c76")))
        (sha256
          (base32
            "0wznxssmh2f0jx4c8mci5idzsixpzcxyaa7yxi9ip5h4qig73sqm"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "stdpipe.ps1")))
    (home-page "https://github.com/Mstrodl/elcord")
    (synopsis
      "Allows you to integrate Rich Presence from Discord")
    (description
      "Documentation at https://melpa.org/#/elcord")
    (license #f)))

(define-public emacs-eldoc-eval
  (package
    (name "emacs-eldoc-eval")
    (version "20200902.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/eldoc-eval.git")
               (commit
                 "f6e639047d9b3695877e63dd3de8f24e704d6d23")))
        (sha256
          (base32
            "0avl9yfprf4q1xpnvhdx0dbcgrf25sln7w7d76jqjmp93cn4idrc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Enable eldoc support when minibuffer is in use.")
    (description
      "Documentation at https://melpa.org/#/eldoc-eval")
    (license #f)))

(define-public emacs-eldoc-overlay
  (package
    (name "emacs-eldoc-overlay")
    (version "20210630.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/eldoc-overlay.git")
               (commit
                 "3edbfb23836bdef253f4a5fd125952e55877d2b2")))
        (sha256
          (base32
            "1r2fjdra4bav16c108jzzjd2qhng7493i7l7znbasialf40j3cbs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inline-docs emacs-quick-peek))
    (home-page
      "https://github.com/stardiviner/eldoc-overlay")
    (synopsis
      "Display eldoc with contextual documentation overlay.")
    (description
      "Documentation at https://melpa.org/#/eldoc-overlay")
    (license #f)))

(define-public emacs-eldoc-toml
  (package
    (name "emacs-eldoc-toml")
    (version "20211026.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/it-is-wednesday/eldoc-toml.git")
               (commit
                 "61106be3c3f3a5b293c3f285eec8c6f400142b6d")))
        (sha256
          (base32
            "079vxv575v4qhdc05jn0ba17f8451nqmdpvh6x4wbg5vdchrqvyp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/it-is-wednesday/eldoc-toml")
    (synopsis "TOML table name at point for ElDoc")
    (description
      "Documentation at https://melpa.org/#/eldoc-toml")
    (license #f)))

(define-public emacs-electric-spacing
  (package
    (name "emacs-electric-spacing")
    (version "20211025.1016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xwl/electric-spacing.git")
               (commit
                 "859f4ab05eff9b00b3fd460b69010a03e010130e")))
        (sha256
          (base32
            "1s10sn14386dgjxkb7y6mlf5amcb5pq5p3akr0xjdh0dkdwy3db0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Insert operators with surrounding spaces smartly")
    (description
      "Documentation at https://melpa.org/#/electric-spacing")
    (license #f)))

(define-public emacs-elegant-agenda-mode
  (package
    (name "emacs-elegant-agenda-mode")
    (version "20210115.353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justinbarclay/elegant-agenda-mode.git")
               (commit
                 "5cbc688584ba103ea3be7d7b30e5d94e52f59eb6")))
        (sha256
          (base32
            "13jv4dars81b42593zijpjm0qci0z7hizbjsjab3xfxi3m3r4pk4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justinbarclay/elegant-agenda-mode")
    (synopsis "An elegant theme for your org-agenda")
    (description
      "Documentation at https://melpa.org/#/elegant-agenda-mode")
    (license #f)))

(define-public emacs-elf-mode
  (package
    (name "emacs-elf-mode")
    (version "20161009.748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/elf-mode.git")
               (commit
                 "cd280d683cd3341d8bb31af6db7e3b74a133e6ab")))
        (sha256
          (base32
            "0cbvjbk2893ag1iy8ggixpirfiyhssm7fii96hb9jqdz874cdl0k"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/elf-mode")
    (synopsis "Show symbols in binaries")
    (description
      "Documentation at https://melpa.org/#/elf-mode")
    (license #f)))

(define-public emacs-elfeed
  (package
    (name "emacs-elfeed")
    (version "20210606.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elfeed.git")
               (commit
                 "162d7d545ed41c27967d108c04aa31f5a61c8e16")))
        (sha256
          (base32
            "0v49l289wiral01pvgm30wyv79h5d3ly3i05dmcw1q93g4z4l56d"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/skeeto/elfeed")
    (synopsis "an Emacs Atom/RSS feed reader")
    (description
      "Documentation at https://melpa.org/#/elfeed")
    (license #f)))

(define-public emacs-elfeed-autotag
  (package
    (name "emacs-elfeed-autotag")
    (version "20210607.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paulelms/elfeed-autotag.git")
               (commit
                 "bc62c37fb79b720ff8b6d67f04f2268841306dcd")))
        (sha256
          (base32
            "0vmvl3c465i2gkm9079hj7l3qxna37q3rrs498r8dby11c0dgcax"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elfeed
            emacs-elfeed-protocol
            emacs-dash
            emacs-s))
    (home-page
      "https://github.com/paulelms/elfeed-autotag")
    (synopsis "Easy auto-tagging for elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-autotag")
    (license #f)))

(define-public emacs-elfeed-web
  (package
    (name "emacs-elfeed-web")
    (version "20210226.258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elfeed.git")
               (commit
                 "162d7d545ed41c27967d108c04aa31f5a61c8e16")))
        (sha256
          (base32
            "0v49l289wiral01pvgm30wyv79h5d3ly3i05dmcw1q93g4z4l56d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-simple-httpd emacs-elfeed))
    (arguments '(#:files ("web/*")))
    (home-page "https://github.com/skeeto/elfeed")
    (synopsis "web interface to Elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-web")
    (license #f)))

(define-public emacs-elforth
  (package
    (name "emacs-elforth")
    (version "20210522.928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/elforth.git")
               (commit
                 "2d8540434a28e7edaa04a992c3c362832b2fd61e")))
        (sha256
          (base32
            "0p4d6blqa3g6mpbn00vqysshga4i93l2s6i7nm2ckg4zrrn27pl5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lassik/elforth")
    (synopsis
      "Do you have what it takes to hack Emacs Lisp in Forth?")
    (description
      "Documentation at https://melpa.org/#/elforth")
    (license #f)))

(define-public emacs-elhome
  (package
    (name "emacs-elhome")
    (version "20161025.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/demyanrogozhin/elhome.git")
               (commit
                 "e789e806469af3e9705f72298683c21f6c3a516d")))
        (sha256
          (base32
            "1q9glli1czbfp62aalblaak55j8rj2nl8bm8nifnnb8jrzj1qrn0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-initsplit))
    (arguments '(#:files ("elhome.el" "startup")))
    (home-page
      "http://github.com/demyanrogozhin/elhome")
    (synopsis
      "A framework for a \"home\" Emacs configuration")
    (description
      "Documentation at https://melpa.org/#/elhome")
    (license #f)))

(define-public emacs-elisp-depend
  (package
    (name "emacs-elisp-depend")
    (version "20190325.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/elisp-depend.git")
               (commit
                 "6679da9a6be5a845bb4804224c8394a9bc62168f")))
        (sha256
          (base32
            "09xbrk1li76fwa85kvd5xpr0zswrkh51p7a62sb8g422wpaqxiwx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Parse depend libraries of elisp file.")
    (description
      "Documentation at https://melpa.org/#/elisp-depend")
    (license #f)))

(define-public emacs-elisp-depmap
  (package
    (name "emacs-elisp-depmap")
    (version "20200714.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/elisp-depmap.el.git")
               (commit
                 "98676e6ffcc4efb70cc991e659c79cb599b01bc7")))
        (sha256
          (base32
            "0ybqbyv1jnjk25z6ys90d5lddd4qxqspn2xppkzvby21x634s2ry"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mtekman/elisp-depmap.el")
    (synopsis
      "Generate an elisp dependency map in graphviz")
    (description
      "Documentation at https://melpa.org/#/elisp-depmap")
    (license #f)))

(define-public emacs-elisp-docstring-mode
  (package
    (name "emacs-elisp-docstring-mode")
    (version "20170304.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/elisp-docstring-mode.git")
               (commit
                 "f512e509dd690f65133e55563ebbfd2dede5034f")))
        (sha256
          (base32
            "0al8m75p359h4n82rf0dsl22qfdg9cwwywn5pn7x6gb96c7qrqaa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing elisp docstrings.")
    (description
      "Documentation at https://melpa.org/#/elisp-docstring-mode")
    (license #f)))

(define-public emacs-elisp-format
  (package
    (name "emacs-elisp-format")
    (version "20160508.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/elisp-format.git")
               (commit
                 "03cc293eb2f78ec58fc1d84279af06816a04b979")))
        (sha256
          (base32
            "17l2xsixx3p93dmx9jsg0a3xqdg19nwp1di2pymlg41pw0kdf3x3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Yuki-Inoue/elisp-format")
    (synopsis "Format elisp code")
    (description
      "Documentation at https://melpa.org/#/elisp-format")
    (license #f)))

(define-public emacs-elisp-lint
  (package
    (name "emacs-elisp-lint")
    (version "20211018.212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/elisp-lint.git")
               (commit
                 "a5ae046c35a898a88eff05137fe9e5159ae610d8")))
        (sha256
          (base32
            "0vzgqjsx8crikr13r87vczjr47sh2xm3hckqc10s6b26hc2jbxrv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-package-lint))
    (home-page
      "http://github.com/gonewest818/elisp-lint/")
    (synopsis "Basic linting for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/elisp-lint")
    (license #f)))

(define-public emacs-elisp-sandbox
  (package
    (name "emacs-elisp-sandbox")
    (version "20131116.1842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joelmccracken/elisp-sandbox.git")
               (commit
                 "d894d68934ef09c42f72ac4e1173a0bedc23f139")))
        (sha256
          (base32
            "0r70axda1piwxznksygby9vid49q4lzjwcrhx7gl5midjs961531"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("elisp-sandbox.el")))
    (home-page
      "https://github.com/joelmccracken/elisp-sandbox")
    (synopsis
      "Evaluate EmacsLisp expressions in a sandbox")
    (description
      "Documentation at https://melpa.org/#/elisp-sandbox")
    (license #f)))

(define-public emacs-elmacro
  (package
    (name "emacs-elmacro")
    (version "20210716.639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/elmacro.git")
               (commit
                 "d2e05012cee4f54fab6d8d8d6aced6e5eeef4f31")))
        (sha256
          (base32
            "1mmhgl85880bhhwibf9ksifghdc7w22vrhpg8y8rvpjh91fdg0lz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://github.com/Silex/elmacro")
    (synopsis
      "Convert keyboard macros to emacs lisp")
    (description
      "Documentation at https://melpa.org/#/elmacro")
    (license #f)))

(define-public emacs-elmine
  (package
    (name "emacs-elmine")
    (version "20200520.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/elmine.git")
               (commit
                 "c78cc8705c2dffbf649b858f02b5028225943482")))
        (sha256
          (base32
            "05z9v3lcc0mm40k0y08v8mhnlxb4krlgj6zghfavwwz6nhxn61g3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("elmine.el")))
    (home-page "http://github.com/leoc/elmine")
    (synopsis "Redmine API access via elisp.")
    (description
      "Documentation at https://melpa.org/#/elmine")
    (license #f)))

(define-public emacs-elpa-audit
  (package
    (name "emacs-elpa-audit")
    (version "20141023.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/elpa-audit.git")
               (commit
                 "727da50e626977351aff2675b6540a36818bbbe6")))
        (sha256
          (base32
            "0wlhdzsrlj266jfvp925zrgzg2mxfba93klgky0hc8zialmmb50b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/elpa-audit")
    (synopsis
      "Handy functions for inspecting and comparing package archives")
    (description
      "Documentation at https://melpa.org/#/elpa-audit")
    (license #f)))

(define-public emacs-elpa-mirror
  (package
    (name "emacs-elpa-mirror")
    (version "20210614.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/elpa-mirror.git")
               (commit
                 "a3e5b974ca9a7004ed6cf72f9d831ba525432c67")))
        (sha256
          (base32
            "19hmvrck77pxxm2pq6a6hfdk2azl6nlhffwyzymr80rqcpx0hysx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("elpa-mirror.el" "elpa-mirror.js" "index.html")))
    (home-page
      "http://github.com/redguardtoo/elpa-mirror")
    (synopsis
      "Create local package repository from installed packages")
    (description
      "Documentation at https://melpa.org/#/elpa-mirror")
    (license #f)))

(define-public emacs-elpher
  (package
    (name "emacs-elpher")
    (version "20211008.1217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://thelambdalab.xyz/git/elpher.git")
               (commit
                 "79336f8191caa394710722799e6b764493e80a52")))
        (sha256
          (base32
            "16cnk4zp67ld0xaa70qbnsq168xpck0drn3f8jndqgs93nag0r1r"))))
    (build-system melpa-build-system)
    (home-page "https://thelambdalab.xyz/elpher")
    (synopsis "A friendly gopher and gemini client")
    (description
      "Documentation at https://melpa.org/#/elpher")
    (license #f)))

(define-public emacs-elpy
  (package
    (name "emacs-elpy")
    (version "20211211.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/elpy.git")
               (commit
                 "9e4382fe99fa922a23a25320bad5df268026e78c")))
        (sha256
          (base32
            "0dlii04byyqr48mnvs3wh8np2zx5r30rhhpbind0z64ahq10a1zh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-highlight-indentation
            emacs-pyvenv
            emacs-yasnippet
            emacs-s))
    (arguments
      '(#:files ("*.el" "NEWS.rst" "snippets" "elpy")))
    (home-page
      "https://github.com/jorgenschaefer/elpy")
    (synopsis "Emacs Python Development Environment")
    (description
      "Documentation at https://melpa.org/#/elpy")
    (license #f)))

(define-public emacs-elvish-mode
  (package
    (name "emacs-elvish-mode")
    (version "20180809.1612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ALSchwalm/elvish-mode.git")
               (commit
                 "a13fcaf209d803e2e450ca2bf80dea94b40a0141")))
        (sha256
          (base32
            "1zcmqi2jmg5mah6n4i10gdnr9lwmap1iblbp23bks20cmv64q9hn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ALSchwalm/elvish-mode")
    (synopsis "Defines a major mode for Elvish")
    (description
      "Documentation at https://melpa.org/#/elvish-mode")
    (license #f)))

(define-public emacs-elx
  (package
    (name "emacs-elx")
    (version "20210918.1436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/elx.git")
               (commit
                 "a457a596401dc5caa9c9a2ebb627bd4af0607780")))
        (sha256
          (base32
            "0670dxmvy38rl3mh2gh2ab8hp4y7z90kg3w340mfgx50fbwbcfs4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacscollective/elx")
    (synopsis
      "extract information from Emacs Lisp libraries")
    (description
      "Documentation at https://melpa.org/#/elx")
    (license #f)))

(define-public emacs-emacsc
  (package
    (name "emacs-emacsc")
    (version "20210302.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/emacsc.git")
               (commit
                 "409fc548bb650c6e832b459c756b13de68147117")))
        (sha256
          (base32
            "04k3gnfhqy0i4vb03k1jr3r43sfpxs6dyx863gsgz6qnkkbqrydn"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el" "bin")))
    (home-page "https://github.com/knu/emacsc")
    (synopsis "helper for emacsc(1)")
    (description
      "Documentation at https://melpa.org/#/emacsc")
    (license #f)))

(define-public emacs-emacsql
  (package
    (name "emacs-emacsql")
    (version "20210615.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacsql.git")
               (commit
                 "9dca5996168c4963eb67e61c7f17fdcb8228e314")))
        (sha256
          (base32
            "1gjwll970avjv0ah4m8w56ybi4l4bc4n8p29wq77za56m0g6jzrg"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacsql.el"
         "emacsql-compiler.el"
         "emacsql-system.el"
         "README.md")))
    (home-page "https://github.com/skeeto/emacsql")
    (synopsis "high-level SQL database front-end")
    (description
      "Documentation at https://melpa.org/#/emacsql")
    (license #f)))

(define-public emacs-emacsql-mysql
  (package
    (name "emacs-emacsql-mysql")
    (version "20171219.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacsql.git")
               (commit
                 "9dca5996168c4963eb67e61c7f17fdcb8228e314")))
        (sha256
          (base32
            "1gjwll970avjv0ah4m8w56ybi4l4bc4n8p29wq77za56m0g6jzrg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments '(#:files ("emacsql-mysql.el")))
    (home-page "https://github.com/skeeto/emacsql")
    (synopsis "EmacSQL back-end for MySQL")
    (description
      "Documentation at https://melpa.org/#/emacsql-mysql")
    (license #f)))

(define-public emacs-emacsql-psql
  (package
    (name "emacs-emacsql-psql")
    (version "20171219.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacsql.git")
               (commit
                 "9dca5996168c4963eb67e61c7f17fdcb8228e314")))
        (sha256
          (base32
            "1gjwll970avjv0ah4m8w56ybi4l4bc4n8p29wq77za56m0g6jzrg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments
      '(#:files ("emacsql-psql.el" "emacsql-pg.el")))
    (home-page "https://github.com/skeeto/emacsql")
    (synopsis
      "EmacSQL back-end for PostgreSQL via psql")
    (description
      "Documentation at https://melpa.org/#/emacsql-psql")
    (license #f)))

(define-public emacs-emacsql-sqlite
  (package
    (name "emacs-emacsql-sqlite")
    (version "20190727.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacsql.git")
               (commit
                 "9dca5996168c4963eb67e61c7f17fdcb8228e314")))
        (sha256
          (base32
            "1gjwll970avjv0ah4m8w56ybi4l4bc4n8p29wq77za56m0g6jzrg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments
      '(#:files ("emacsql-sqlite.el" "sqlite")))
    (home-page "https://github.com/skeeto/emacsql")
    (synopsis "EmacSQL back-end for SQLite")
    (description
      "Documentation at https://melpa.org/#/emacsql-sqlite")
    (license #f)))

(define-public emacs-emacsql-sqlite3
  (package
    (name "emacs-emacsql-sqlite3")
    (version "20200914.508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cireu/emacsql-sqlite3.git")
               (commit
                 "209fd0c2649db0c7532e543ec12e7ba881a3325c")))
        (sha256
          (base32
            "0zr56gwn8rcgvaa9halhfxpxnn0x6yqc66z6r7vqzx5jbj7d6q46"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (home-page
      "https://github.com/cireu/emacsql-sqlite3")
    (synopsis
      "Yet another EmacSQL backend for SQLite")
    (description
      "Documentation at https://melpa.org/#/emacsql-sqlite3")
    (license #f)))

(define-public emacs-emacsshot
  (package
    (name "emacs-emacsshot")
    (version "20191206.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/emacsshot.git")
               (commit
                 "fe958b11056f3c671ebdd604d5aa574323284ca5")))
        (sha256
          (base32
            "0zg52b3hl0rp9hjz04546kngssxs0l64dm01bwp9hapy7pichbci"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/emacsshot")
    (synopsis
      "Snapshot a frame or window from within")
    (description
      "Documentation at https://melpa.org/#/emacsshot")
    (license #f)))

(define-public emacs-embark
  (package
    (name "emacs-embark")
    (version "20211224.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/embark.git")
               (commit
                 "ab1ee58dcc31e5c88428a7e258c12510f68b6898")))
        (sha256
          (base32
            "1d0wwrrdahwbix50lb3f18cj53lh9hy29ns6ay8ql5b7gmhcjibd"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("embark.el" "embark.texi")))
    (home-page "https://github.com/oantolin/embark")
    (synopsis
      "Conveniently act on minibuffer completions")
    (description
      "Documentation at https://melpa.org/#/embark")
    (license #f)))

(define-public emacs-ember-mode
  (package
    (name "emacs-ember-mode")
    (version "20200208.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/madnificent/ember-mode.git")
               (commit
                 "a587c423041b2fcb065fd5b6a03b2899b764e462")))
        (sha256
          (base32
            "0x5fnrflbgafwcqr6v0jj6522j2j086s7msh2mr6yysmrfjhx2zk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Ember navigation mode for emacs")
    (description
      "Documentation at https://melpa.org/#/ember-mode")
    (license #f)))

(define-public emacs-emidje
  (package
    (name "emacs-emidje")
    (version "20190209.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nubank/emidje.git")
               (commit
                 "7e92f053964d925c97dc8cca8d4d70a3030021db")))
        (sha256
          (base32
            "0xg2bw9vzwvkx6xh4k2n6qhyhqg5iifl6aa0s7svvdnw35x00hv2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-magit-popup))
    (home-page "https://github.com/nubank/emidje")
    (synopsis
      "Test runner and report viewer for Midje")
    (description
      "Documentation at https://melpa.org/#/emidje")
    (license #f)))

(define-public emacs-emoji-display
  (package
    (name "emacs-emoji-display")
    (version "20140117.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikazuhiro/emoji-display.git")
               (commit
                 "bb4217f6400151a9cfa6d4524b8427f01feb5193")))
        (sha256
          (base32
            "0sh4q4sb4j58ryvvmlsx7scry9inzgv2ssa87vbyzpxq0435l229"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikazuhiro/emoji-display")
    (synopsis "emoji displaying module")
    (description
      "Documentation at https://melpa.org/#/emoji-display")
    (license #f)))

(define-public emacs-emoji-recall
  (package
    (name "emacs-emoji-recall")
    (version "20160723.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/emoji-recall.el.git")
               (commit
                 "d9122f8fb1467309260109a1985cd14f18fdf631")))
        (sha256
          (base32
            "13ajzafm9wmddch8ipjjkv2p13fmyd0ghdr479lll5c7xff2051x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "emoji-cheat-sheet/*.png")))
    (home-page
      "https://github.com/lujun9972/emoji-recall.el")
    (synopsis
      "How many emoji can you recall from memory?")
    (description
      "Documentation at https://melpa.org/#/emoji-recall")
    (license #f)))

(define-public emacs-encourage-mode
  (package
    (name "emacs-encourage-mode")
    (version "20151128.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/halbtuerke/encourage-mode.el.git")
               (commit
                 "99edacf2d94d168d3da0609860dc7253db7c9815")))
        (sha256
          (base32
            "0k5ns40s5nskn0zialwq96qll1v5k50lfa5xh8hxbpcamsfym6h8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/halbtuerke/encourage-mode.el")
    (synopsis "Encourages you in your work. :D")
    (description
      "Documentation at https://melpa.org/#/encourage-mode")
    (license #f)))

(define-public emacs-envrc
  (package
    (name "emacs-envrc")
    (version "20211220.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/envrc.git")
               (commit
                 "fc23f4f342ee100a865b50bb5bd9a54681a6387e")))
        (sha256
          (base32
            "0bv74dv5nl2m1kn9igh10sfma8y20xjhh9mapv29mmxdm26w1rsj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inheritenv))
    (home-page "https://github.com/purcell/envrc")
    (synopsis
      "Support for `direnv' that operates buffer-locally")
    (description
      "Documentation at https://melpa.org/#/envrc")
    (license #f)))

(define-public emacs-epc
  (package
    (name "emacs-epc")
    (version "20140610.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-epc.git")
               (commit
                 "e1bfa5ca163273859336e3cc89b4b6460f7f8cda")))
        (sha256
          (base32
            "15nkrjgi64f829isfd6xrhl4zw8jirr8pkas7nisrbk1av868hx0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable))
    (arguments '(#:files ("epc.el" "epcs.el")))
    (home-page
      "https://github.com/kiwanami/emacs-epc")
    (synopsis "A RPC stack for the Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/epc")
    (license #f)))

(define-public emacs-epkg
  (package
    (name "emacs-epkg")
    (version "20211216.1834")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/epkg.git")
               (commit
                 "9476086123834d0398968ce32c0a14e484a628cc")))
        (sha256
          (base32
            "10f27bmns25vav9ayk0a1x5f2ipfap71ri1v71w7wfj36yff1g0v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-closql))
    (arguments
      '(#:files ("lisp/*.el" "docs/epkg.texi")))
    (home-page
      "https://github.com/emacscollective/epkg")
    (synopsis
      "browse the Emacsmirror package database")
    (description
      "Documentation at https://melpa.org/#/epkg")
    (license #f)))

(define-public emacs-epkg-marginalia
  (package
    (name "emacs-epkg-marginalia")
    (version "20210802.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/epkg-marginalia.git")
               (commit
                 "0879f5b2cf87fff17dcfb74009d289d6a89c9816")))
        (sha256
          (base32
            "11sbf363qy3i87hppv4admqd2sy0kwpvjgih51hn3rbimbswkwab"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epkg))
    (home-page
      "https://github.com/emacscollective/epkg-marginalia")
    (synopsis
      "Show Epkg information in completion annotations")
    (description
      "Documentation at https://melpa.org/#/epkg-marginalia")
    (license #f)))

(define-public emacs-epm
  (package
    (name "emacs-epm")
    (version "20190509.443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/epm.git")
               (commit
                 "6375ddbf93c5f25647f6ebb25b54045b3c93a5be")))
        (sha256
          (base32
            "1m0l0szrwljzsch4xj9a42nflpqfii68g8clizsjwv323h6xff4n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epl))
    (arguments '(#:files (:defaults "epm")))
    (home-page "https://github.com/xuchunyang/epm")
    (synopsis "Emacs Package Manager")
    (description
      "Documentation at https://melpa.org/#/epm")
    (license #f)))

(define-public emacs-equake
  (package
    (name "emacs-equake")
    (version "20210913.145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacsomancer/equake.git")
               (commit
                 "4d6ef75a4d91ded22caad220909518ccb67b7b87")))
        (sha256
          (base32
            "11xfr71y78idcn461p4pz7b0k01nhz15cyl97bjqq6ii5xhbhvdx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://gitlab.com/emacsomancer/equake")
    (synopsis
      "Drop-down console for (e)shell & terminal emulation")
    (description
      "Documentation at https://melpa.org/#/equake")
    (license #f)))

(define-public emacs-erc-colorize
  (package
    (name "emacs-erc-colorize")
    (version "20170107.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/erc-colorize.git")
               (commit
                 "d026a016dcb9d63d9ac66d30627a92a8f1681bbd")))
        (sha256
          (base32
            "1zzmsrlknrpw26kizd4dm1g604y9nkgh85xal9la70k94qcgv138"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/erc-colorize.git")
    (synopsis
      "Per user colorization of whole message")
    (description
      "Documentation at https://melpa.org/#/erc-colorize")
    (license #f)))

(define-public emacs-erc-hl-nicks
  (package
    (name "emacs-erc-hl-nicks")
    (version "20200317.16")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/erc-hl-nicks.git")
               (commit
                 "a67fe361c8f2aa20fc235447fbb898f424b51439")))
        (sha256
          (base32
            "0k57scxa8rm859fqsm8srhps7rlq06jzazhjbwnadzrh8i5fyvra"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/leathekd/erc-hl-nicks")
    (synopsis
      "ERC nick highlighter that ignores uniquifying chars when colorizing")
    (description
      "Documentation at https://melpa.org/#/erc-hl-nicks")
    (license #f)))

(define-public emacs-erc-matterircd
  (package
    (name "emacs-erc-matterircd")
    (version "20210804.504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/erc-matterircd.git")
               (commit
                 "e3a59267c044474f9ca066d36517e9a3d872759c")))
        (sha256
          (base32
            "1iqyyhaz8zypgj9ij8ivqym0xry10zzyi8qf16fzg2ppxl47bc5i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alexmurray/erc-matterircd")
    (synopsis "Integrate matterircd with ERC")
    (description
      "Documentation at https://melpa.org/#/erc-matterircd")
    (license #f)))

(define-public emacs-erc-terminal-notifier
  (package
    (name "emacs-erc-terminal-notifier")
    (version "20140115.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julienXX/erc-terminal-notifier.el.git")
               (commit
                 "a3dacb935845e4a20031212bbd82b2170f68d2a8")))
        (sha256
          (base32
            "0cfqbqskh260zfq1lx1s8jz2351w2ij9m73rqim16fy7zr0s0670"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/julienXX/")
    (synopsis
      "OSX notifications via the terminal-notifier gem for Emacs ERC.")
    (description
      "Documentation at https://melpa.org/#/erc-terminal-notifier")
    (license #f)))

(define-public emacs-erc-tweet
  (package
    (name "emacs-erc-tweet")
    (version "20150920.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/erc-tweet.el.git")
               (commit
                 "91fed61e139fa788d66a7358f0d50acc896414b8")))
        (sha256
          (base32
            "118q4zj9dh5xnimcsi229j5pflhcd8qz0p212kc4p9dmyrx2iw0n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "shows text of a tweet when an url is posted in erc buffers")
    (description
      "Documentation at https://melpa.org/#/erc-tweet")
    (license #f)))

(define-public emacs-erc-view-log
  (package
    (name "emacs-erc-view-log")
    (version "20140227.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Niluge-KiWi/erc-view-log.git")
               (commit
                 "c5a25f0cbca84ed2e4f72068c02b66bd0ea3b266")))
        (sha256
          (base32
            "0bzi2sh2fhrz49j5y53h6jgf41av6rx78smb3bbk6m74is8vim2y"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el")
    (synopsis "Major mode for viewing ERC logs")
    (description
      "Documentation at https://melpa.org/#/erc-view-log")
    (license #f)))

(define-public emacs-ergoemacs-status
  (package
    (name "emacs-ergoemacs-status")
    (version "20160318.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ergoemacs/ergoemacs-status.git")
               (commit
                 "d952cc2361adf6eb4d6af60950ad4ab699c81320")))
        (sha256
          (base32
            "06pdwrhflpi5rkigqnr5h3jzv3dm1p9nydpvql9w33ixm6qhjj71"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline emacs-mode-icons))
    (home-page "unspecified")
    (synopsis "Adaptive Status Bar / Mode Line")
    (description
      "Documentation at https://melpa.org/#/ergoemacs-status")
    (license #f)))

(define-public emacs-erlang
  (package
    (name "emacs-erlang")
    (version "20211213.1046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erlang/otp.git")
               (commit
                 "09dd2c69ee4192fb2ef7d32754e236f2a29299ce")))
        (sha256
          (base32
            "11kj36f0zz5yy8bp97zfpqwwkv3593qarrxk8njbwf09skk3zhnf"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("lib/tools/emacs/*.el"
         (:exclude "lib/tools/emacs/erlang_appwiz.el"))))
    (home-page "unspecified")
    (synopsis "Erlang major mode")
    (description
      "Documentation at https://melpa.org/#/erlang")
    (license #f)))

(define-public emacs-eros
  (package
    (name "emacs-eros")
    (version "20180415.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xiongtx/eros.git")
               (commit
                 "dd8910279226259e100dab798b073a52f9b4233a")))
        (sha256
          (base32
            "08chj3a0lw4ygi2sv7wj0i6ihfbi8jhylr8p92inif8b88r6wg3k"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xiongtx/eros")
    (synopsis
      "Evaluation Result OverlayS for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/eros")
    (license #f)))

(define-public emacs-ert-modeline
  (package
    (name "emacs-ert-modeline")
    (version "20140115.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/ert-modeline.git")
               (commit
                 "e7be2b81191afb437b70368a819770f8f750e4af")))
        (sha256
          (base32
            "08yfq3qzscxvzyxvyvdqpkrm787278yhkdd9prbvrgjj80p8n7vq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-projectile))
    (home-page "unspecified")
    (synopsis
      "displays ert test results in the modeline.")
    (description
      "Documentation at https://melpa.org/#/ert-modeline")
    (license #f)))

(define-public emacs-ert-runner
  (package
    (name "emacs-ert-runner")
    (version "20201005.2336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ert-runner.el.git")
               (commit
                 "c3969c86b5b00087d8b2fcb7147481d5be56f2f7")))
        (sha256
          (base32
            "0v3ry7aza86pzrjjy9qr07jxn3md1vx324cl0xq3b055mdp6dqv6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-commander
            emacs-ansi
            emacs-shut-up))
    (arguments '(#:files ("*.el" "bin" "reporters")))
    (home-page
      "http://github.com/rejeep/ert-runner.el")
    (synopsis "Opinionated Ert testing workflow")
    (description
      "Documentation at https://melpa.org/#/ert-runner")
    (license #f)))

(define-public emacs-es-windows
  (package
    (name "emacs-es-windows")
    (version "20140211.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/es-windows.git")
               (commit
                 "239e30408cb1adb4bc8bd63e2df34711fa910b4f")))
        (sha256
          (base32
            "14rsifcx2kwdmwq9zh41fkb848l0f4igp5v9pk3x4jd2yw9gay7m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sabof/es-windows")
    (synopsis "Window-management utilities")
    (description
      "Documentation at https://melpa.org/#/es-windows")
    (license #f)))

(define-public emacs-esh-autosuggest
  (package
    (name "emacs-esh-autosuggest")
    (version "20210906.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/esh-autosuggest.git")
               (commit
                 "bf676b137d35553debe32ff134dbec25f3978ae7")))
        (sha256
          (base32
            "1m255pgi2zlkjrjr3l8gk76qc5543qnaxqrwgcpb2z9gq51ivfw2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "http://github.com/dieggsy/esh-autosuggest")
    (synopsis "History autosuggestions for eshell")
    (description
      "Documentation at https://melpa.org/#/esh-autosuggest")
    (license #f)))

(define-public emacs-eshell-autojump
  (package
    (name "emacs-eshell-autojump")
    (version "20201117.235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/eshell-autojump.git")
               (commit
                 "c1056bfc6b46646ae1e606247689fef9aee621af")))
        (sha256
          (base32
            "1anay4d29p86yxmjgrscby92icc7j230xc8dnjhgq29y2s44f3gg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/eshell-autojump")
    (synopsis "autojump command for Eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-autojump")
    (license #f)))

(define-public emacs-eshell-syntax-highlighting
  (package
    (name "emacs-eshell-syntax-highlighting")
    (version "20210429.413")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akreisher/eshell-syntax-highlighting.git")
               (commit
                 "8e3a685fc6d97af79e1046e5b24385786d8e92f6")))
        (sha256
          (base32
            "15m084kk3ikw85pw9dg5xwc1abbv51a2f0k421vks0bhi37ba1wd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/akreisher/eshell-syntax-highlighting")
    (synopsis "Highlight eshell commands")
    (description
      "Documentation at https://melpa.org/#/eshell-syntax-highlighting")
    (license #f)))

(define-public emacs-eshell-toggle
  (package
    (name "emacs-eshell-toggle")
    (version "20210407.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/4DA/eshell-toggle.git")
               (commit
                 "7160518ca56444fead841b8acff59aeffc7cebb3")))
        (sha256
          (base32
            "0g0cg71n0cp1576i2qkgvg729gw1927vq0js3s64v5b8p9hmb1kq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/4da/eshell-toggle")
    (synopsis
      "Show/hide eshell under active window.")
    (description
      "Documentation at https://melpa.org/#/eshell-toggle")
    (license #f)))

(define-public emacs-eslintd-fix
  (package
    (name "emacs-eslintd-fix")
    (version "20210731.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/eslintd-fix.git")
               (commit
                 "3897d8a679a6e98e3f5054aaefe07f6b55f8f128")))
        (sha256
          (base32
            "0wx0mca7xykjkbyhix2mhqf2l9zc46l14hdy4krnr3xdyb5ibmkr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/aaronjensen/eslintd-fix")
    (synopsis
      "use eslint_d to automatically fix js files")
    (description
      "Documentation at https://melpa.org/#/eslintd-fix")
    (license #f)))

(define-public emacs-esonify
  (package
    (name "emacs-esonify")
    (version "20190110.1621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oflatt/esonify.git")
               (commit
                 "bdc79d4ab2e3c449b5bef46e5cabc552beeed5c6")))
        (sha256
          (base32
            "03xl6a49pg3y1g3dl7fglrn956ynzj2vlviwlv08ngflvbn5shai"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (arguments '(#:files (:defaults "sounds")))
    (home-page "https://github.com/oflatt/esonify")
    (synopsis "Sonify your code")
    (description
      "Documentation at https://melpa.org/#/esonify")
    (license #f)))

(define-public emacs-espotify
  (package
    (name "emacs-espotify")
    (version "20211114.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify.git")
               (commit
                 "5c1dcf0182135cda4191d4ba206fe2f265100293")))
        (sha256
          (base32
            "06wj2pixhjgqddl9g2wkv7cq9gz9yjb46cb1jrlbya3rdjyfb6h5"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("espotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Spotify access library")
    (description
      "Documentation at https://melpa.org/#/espotify")
    (license #f)))

(define-public emacs-espy
  (package
    (name "emacs-espy")
    (version "20200317.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/espy.git")
               (commit
                 "2c01be937a5e5bde62921684a0b27300705fb4e0")))
        (sha256
          (base32
            "1nnnr184y29g1svxqxlqyg5irzrf1xmay4p78jfv8v07sisl90kp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/walseb/espy")
    (synopsis "Emacs Simple Password Yielder")
    (description
      "Documentation at https://melpa.org/#/espy")
    (license #f)))

(define-public emacs-etable
  (package
    (name "emacs-etable")
    (version "20161028.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/ETable.git")
               (commit
                 "d502141f0c69bf95256ba5cb9cd15350c7e942d2")))
        (sha256
          (base32
            "0k0g58qzkkzall715k0864v3b7p5jnfwxqgmkj087x34frcf388k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-interval-list))
    (home-page "https://github.com/Fuco1/ETable")
    (synopsis
      "Implementation of javax.swing.JTable for Emacs.")
    (description
      "Documentation at https://melpa.org/#/etable")
    (license #f)))

(define-public emacs-etherpad
  (package
    (name "emacs-etherpad")
    (version "20211128.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/ethermacs.git")
               (commit
                 "1fae6a03084e0794e09ac036838b53aaae1dbd63")))
        (sha256
          (base32
            "0aqws67s6c0m6sgqh9i17lpky6wbdyl3fnd3jrk6rwaiyckb1nrc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-websocket
            emacs-parsec
            emacs-0xc))
    (home-page "https://github.com/zzkt/ethermacs")
    (synopsis "Interface to the Etherpad API")
    (description
      "Documentation at https://melpa.org/#/etherpad")
    (license #f)))

(define-public emacs-evalator-clojure
  (package
    (name "emacs-evalator-clojure")
    (version "20160208.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanirby/evalator-clojure.git")
               (commit
                 "caa4e0a137bdfada86593128a654e16aa617ad50")))
        (sha256
          (base32
            "1q5s1ffmfh5dby92853xm8kjhgjfd5vbvcg1xbf8lswc1i41k7n7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-evalator))
    (arguments '(#:files (:defaults "*.clj")))
    (home-page
      "http://www.github.com/seanirby/evalator-clojure")
    (synopsis
      "Clojure evaluation context for evalator via CIDER.")
    (description
      "Documentation at https://melpa.org/#/evalator-clojure")
    (license #f)))

(define-public emacs-evil-args
  (package
    (name "emacs-evil-args")
    (version "20180908.2157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wcsmith/evil-args.git")
               (commit
                 "758ad5ae54ad34202064fec192c88151c08cb387")))
        (sha256
          (base32
            "0k35glgsirc3cph8v5hhjrqfh4ndwh8a28qbr03y3jl8s453xcj7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "http://github.com/wcsmith/evil-args")
    (synopsis
      "Motions and text objects for delimited arguments in Evil.")
    (description
      "Documentation at https://melpa.org/#/evil-args")
    (license #f)))

(define-public emacs-evil-collection
  (package
    (name "emacs-evil-collection")
    (version "20211220.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-collection.git")
               (commit
                 "f78156db21b907c28448bc1316e58b0ba1eef4f8")))
        (sha256
          (base32
            "1c893qz4nkm8bdpfhzx00h93vwvmsq863wkds3qzh5q3nidbqcf7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-annalist))
    (arguments '(#:files (:defaults "modes")))
    (home-page
      "https://github.com/emacs-evil/evil-collection")
    (synopsis "A set of keybindings for Evil mode")
    (description
      "Documentation at https://melpa.org/#/evil-collection")
    (license #f)))

(define-public emacs-evil-dvorak
  (package
    (name "emacs-evil-dvorak")
    (version "20160416.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jbranso/evil-dvorak.git")
               (commit
                 "824f7c56980d72a0ff04c662223540cd66f13754")))
        (sha256
          (base32
            "15rnxhqc56g4ydr8drvcgzvjp8blxsarm86dqc36rym7g5gnxr20"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "unspecified")
    (synopsis
      "evil keybindings for that work with dvorak mode")
    (description
      "Documentation at https://melpa.org/#/evil-dvorak")
    (license #f)))

(define-public emacs-evil-ediff
  (package
    (name "emacs-evil-ediff")
    (version "20170724.1923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-ediff.git")
               (commit
                 "50d26cb0654fca8f8fd7227410e5cbf0b8f681cf")))
        (sha256
          (base32
            "0x81ws1kaiklqnsywvjyv5pifsj5hd3wsl1wq11aqik34kjxfy2g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/justbur/evil-ediff")
    (synopsis "Make ediff a little evil")
    (description
      "Documentation at https://melpa.org/#/evil-ediff")
    (license #f)))

(define-public emacs-evil-ex-fasd
  (package
    (name "emacs-evil-ex-fasd")
    (version "20180903.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/evil-ex-fasd.git")
               (commit
                 "ed8fbbe23a8a268d9dcbf1a6132e928ba2c655c5")))
        (sha256
          (base32
            "0fr57nlg7m65gzhnrwnqi5bgy4vzl0l0mxk63sr3561r8fnm8hbc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-fasd))
    (home-page
      "https://github.com/yqrashawn/evil-ex-fasd")
    (synopsis "using fasd right from evil-ex")
    (description
      "Documentation at https://melpa.org/#/evil-ex-fasd")
    (license #f)))

(define-public emacs-evil-ex-shell-command
  (package
    (name "emacs-evil-ex-shell-command")
    (version "20181226.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/evil-ex-shell-command.git")
               (commit
                 "a6ca6d27c07f6a0807abfb5b8f8865f1d17f54aa")))
        (sha256
          (base32
            "0jx2cj6p8wag7aphbgf3ij5v71prxkbxpfia8nmcpmrpvjqpsb74"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/yqrashawn/evil-ex-shell-command")
    (synopsis
      "invoke shell-command right from evil-ex")
    (description
      "Documentation at https://melpa.org/#/evil-ex-shell-command")
    (license #f)))

(define-public emacs-evil-extra-operator
  (package
    (name "emacs-evil-extra-operator")
    (version "20210225.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/evil-extra-operator.git")
               (commit
                 "fb249889acacc3e28869491195391fa6f617ae56")))
        (sha256
          (base32
            "049325xd7yk707mncz8mm8cshryh2ir1zf6ahwikr11iwsxgfajd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/Dewdrops/evil-extra-operator")
    (synopsis
      "Evil operator for evaluating codes, taking notes, searching via google, etc.")
    (description
      "Documentation at https://melpa.org/#/evil-extra-operator")
    (license #f)))

(define-public emacs-evil-iedit-state
  (package
    (name "emacs-evil-iedit-state")
    (version "20200830.617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/evil-iedit-state.git")
               (commit
                 "30fcfa96ceebed0191337c493f5c2efc8ae090ad")))
        (sha256
          (base32
            "0aqwjd7pmzxf7l768vyqqgjzmqdwlpznh30w5bdr7yh79r6xm6n1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-iedit))
    (home-page
      "https://github.com/syl20bnr/evil-iedit-state")
    (synopsis "Evil states to interface iedit mode.")
    (description
      "Documentation at https://melpa.org/#/evil-iedit-state")
    (license #f)))

(define-public emacs-evil-indent-textobject
  (package
    (name "emacs-evil-indent-textobject")
    (version "20130831.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cofi/evil-indent-textobject.git")
               (commit
                 "70a1154a531b7cfdbb9a31d6922482791e20a3a7")))
        (sha256
          (base32
            "0nghisnc49ivh56mddfdlcbqv3y2vqzjvkpgwv3zp80ga6ghvdmz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/cofi/evil-indent-textobject")
    (synopsis
      "evil textobjects based on indentation")
    (description
      "Documentation at https://melpa.org/#/evil-indent-textobject")
    (license #f)))

(define-public emacs-evil-mc-extras
  (package
    (name "emacs-evil-mc-extras")
    (version "20170202.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabesoft/evil-mc-extras.git")
               (commit
                 "8c1af3232dd1e15b2ea38360b8cd1e857e11c416")))
        (sha256
          (base32
            "0f67ky9w2qapah0l0ym2c6x1j3ngf8whp1ls42f3kzb9gfi36fpn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil
            emacs-evil-mc
            emacs-evil-numbers))
    (home-page
      "https://github.com/gabesoft/evil-mc-extras")
    (synopsis "Extra functionality for evil-mc")
    (description
      "Documentation at https://melpa.org/#/evil-mc-extras")
    (license #f)))

(define-public emacs-evil-mu4e
  (package
    (name "emacs-evil-mu4e")
    (version "20180613.1039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JorisE/evil-mu4e.git")
               (commit
                 "5b22c1e30246318f233264506272d770f63897ca")))
        (sha256
          (base32
            "17qppyw9sx8y6caiwraxnbs4fkhvjsfk4brda7jy9wd0i074mwk4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/JorisE/evil-mu4e")
    (synopsis "evil-based key bindings for mu4e")
    (description
      "Documentation at https://melpa.org/#/evil-mu4e")
    (license #f)))

(define-public emacs-evil-rails
  (package
    (name "emacs-evil-rails")
    (version "20190512.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antono/evil-rails.git")
               (commit
                 "b0f1c5de6720714febeb76c4b569b71bb891938c")))
        (sha256
          (base32
            "0mypsbf0mg2b4746r9b9ybj51qkrlxz48lf9g53kzbk3wdf6p5vi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-projectile-rails))
    (home-page
      "https://github.com/antono/evil-rails")
    (synopsis "Rails support for Evil Mode")
    (description
      "Documentation at https://melpa.org/#/evil-rails")
    (license #f)))

(define-public emacs-evil-surround
  (package
    (name "emacs-evil-surround")
    (version "20210615.2119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-surround.git")
               (commit
                 "282a975bda83310d20a2c536ac3cf95d2bf188a5")))
        (sha256
          (base32
            "0f9y5dwjkjv768s63bypp6nb51kklhkq58ixgzfs59r423y8l1nl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "unspecified")
    (synopsis "emulate surround.vim from Vim")
    (description
      "Documentation at https://melpa.org/#/evil-surround")
    (license #f)))

(define-public emacs-evil-swap-keys
  (package
    (name "emacs-evil-swap-keys")
    (version "20191105.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/evil-swap-keys.git")
               (commit
                 "b5ef105499f998b5667da40da30c073229a213ea")))
        (sha256
          (base32
            "1kawq9c64cmkdjy03sfppjn7g9anxnmds3ip7cgj1j0yym0glyfq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wbolster/evil-swap-keys")
    (synopsis
      "Intelligently swap keys on text input with evil")
    (description
      "Documentation at https://melpa.org/#/evil-swap-keys")
    (license #f)))

(define-public emacs-evil-terminal-cursor-changer
  (package
    (name "emacs-evil-terminal-cursor-changer")
    (version "20211002.709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/7696122/evil-terminal-cursor-changer.git")
               (commit
                 "5b2d76fd26bf33022bbad0198acd9b83c9759750")))
        (sha256
          (base32
            "0f9i5w2vdvrsmcf4vv0vf5bkrqpqdq3gm6p9a0hm1j2p0dfvh8hd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/7696122/evil-terminal-cursor-changer")
    (synopsis
      "Change cursor shape and color by evil state in terminal")
    (description
      "Documentation at https://melpa.org/#/evil-terminal-cursor-changer")
    (license #f)))

(define-public emacs-evil-tutor
  (package
    (name "emacs-evil-tutor")
    (version "20150103.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/evil-tutor.git")
               (commit
                 "4e124cd3911dc0d1b6817ad2c9e59b4753638f28")))
        (sha256
          (base32
            "00yfq8aflxvp2nnz7smgq0c5wlb7cips5irj8qs6193ixlkpffvx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (arguments '(#:files (:defaults "tutor.txt")))
    (home-page
      "https://github.com/syl20bnr/evil-tutor")
    (synopsis
      "Vimtutor adapted to Evil and wrapped in a major-mode")
    (description
      "Documentation at https://melpa.org/#/evil-tutor")
    (license #f)))

(define-public emacs-expenses
  (package
    (name "emacs-expenses")
    (version "20211224.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/md-arif-shaikh/expenses.git")
               (commit
                 "e02a80eedbc825dafd0a0a6cf566f4978dc5ed89")))
        (sha256
          (base32
            "17mw96j162kiswxagcsksxl6mxyd89vj1b53yr83k7i2ahjpq942"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ht))
    (home-page
      "https://github.com/md-arif-shaikh/expenses")
    (synopsis "Record and view expenses")
    (description
      "Documentation at https://melpa.org/#/expenses")
    (license #f)))

(define-public emacs-exsqlaim-mode
  (package
    (name "emacs-exsqlaim-mode")
    (version "20170607.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahmadnazir/exsqlaim-mode.git")
               (commit
                 "a2e0a62ec8b87193d8eaa695774bfd689324b06c")))
        (sha256
          (base32
            "1gj1q2h1ja30jizkjql12cxlppj07ykr4wxqca9msy043zdhqnkk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ahmadnazir/exsqlaim-mode")
    (synopsis "Use variables inside sql queries")
    (description
      "Documentation at https://melpa.org/#/exsqlaim-mode")
    (license #f)))

(define-public emacs-extmap
  (package
    (name "emacs-extmap")
    (version "20211023.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/extmap.git")
               (commit
                 "5875a4ab27831eb81af6246b12a174c765d52a78")))
        (sha256
          (base32
            "00415w4l9wfpw9v0a35dm1av2w1m6s36yr9f9286jg844x6l375f"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/doublep/extmap")
    (synopsis
      "Externally-stored constant mapping for Elisp")
    (description
      "Documentation at https://melpa.org/#/extmap")
    (license #f)))

(define-public emacs-exwm-firefox-core
  (package
    (name "emacs-exwm-firefox-core")
    (version "20190812.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/exwm-firefox-core.git")
               (commit
                 "e2fe2a895e8f973307ef52f8c9976b26e701cbd0")))
        (sha256
          (base32
            "0k5jkjzx6f8nfmbkc61raj585p9pymycgzv7rr3fhv2drgkaa4yi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-exwm))
    (home-page
      "https://github.com/walseb/exwm-firefox-core")
    (synopsis "Firefox hotkeys to functions")
    (description
      "Documentation at https://melpa.org/#/exwm-firefox-core")
    (license #f)))

(define-public emacs-exwm-mff
  (package
    (name "emacs-exwm-mff")
    (version "20210603.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/exwm-mff.git")
               (commit
                 "89206f2e3189f589c27c56bd2b6203e906ee7100")))
        (sha256
          (base32
            "0ipmapyd4jmpnk34wk9kfbvqnl04x74yg2pmj298wqa61ylw1n9j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ieure/exwm-mff")
    (synopsis "Mouse Follows Focus")
    (description
      "Documentation at https://melpa.org/#/exwm-mff")
    (license #f)))

(define-public emacs-exwm-x
  (package
    (name "emacs-exwm-x")
    (version "20210419.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/exwm-x.git")
               (commit
                 "2ab026f407b011a8e8380c889990e85e69cb3a4e")))
        (sha256
          (base32
            "05jilbhpbbqbgpxhy11yadmal4gsh8bh1fffxkz8b5k8dpajc634"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-exwm))
    (home-page "https://github.com/tumashu/exwm-x")
    (synopsis
      "A derivative wm based on EXWM (emacs x window manager)")
    (description
      "Documentation at https://melpa.org/#/exwm-x")
    (license #f)))

(define-public emacs-f3
  (package
    (name "emacs-f3")
    (version "20180130.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/f3.git")
               (commit
                 "000009ce4adf7a57eae80512f29c4ec2a1391ce5")))
        (sha256
          (base32
            "0q3ylw0i1bg7pzsv4gj72jcfjjfh57vsb3fnfnhhh5i5vladiqsf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/cosmicexplorer/f3")
    (synopsis "a helm interface to find")
    (description
      "Documentation at https://melpa.org/#/f3")
    (license #f)))

(define-public emacs-fabric
  (package
    (name "emacs-fabric")
    (version "20171116.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/fabric.el.git")
               (commit
                 "df79be341d0b34ed23850f9894136092fa5fea8c")))
        (sha256
          (base32
            "1mnz81k1jz2sa3zj68ihzgq66l9fcxvzb67ad62p8bvi2aksxx7z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nlamirault/fabric.el")
    (synopsis "Launch Fabric using Emacs")
    (description
      "Documentation at https://melpa.org/#/fabric")
    (license #f)))

(define-public emacs-faceup
  (package
    (name "emacs-faceup")
    (version "20170925.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/faceup.git")
               (commit
                 "6c92dad56a133e14e7b27831e1bcf9b3a71ff154")))
        (sha256
          (base32
            "1yzmy7flrhrh0i10bdszx8idx6r8h6czm4vm4q0z6fp5fw94zwrx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/faceup")
    (synopsis
      "Markup language for faces and font-lock regression testing")
    (description
      "Documentation at https://melpa.org/#/faceup")
    (license #f)))

(define-public emacs-fakir
  (package
    (name "emacs-fakir")
    (version "20140729.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-fakir.git")
               (commit
                 "1fca406ad7de80fece6319ff75d4230b648534b0")))
        (sha256
          (base32
            "1w5apzbzr1jd983b0rzsy9ldb0z0zcq6mpyb5r8czl5wd4vvj69h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-noflet emacs-dash emacs-kv))
    (arguments '(#:files ("fakir.el")))
    (home-page
      "http://github.com/nicferrier/emacs-fakir")
    (synopsis "fakeing bits of Emacs")
    (description
      "Documentation at https://melpa.org/#/fakir")
    (license #f)))

(define-public emacs-fantom-theme
  (package
    (name "emacs-fantom-theme")
    (version "20200328.604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adsva/fantom-emacs-theme.git")
               (commit
                 "2c1c7fd53086c2ff86ee0961642c3b58e2343c08")))
        (sha256
          (base32
            "1clvpjsf241fdkk3915zjqb4wivsjsvc9phf633pzbvi61qwhaap"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/adsva/fantom-emacs-theme")
    (synopsis
      "Dark theme based on Phantom Code for VSCode")
    (description
      "Documentation at https://melpa.org/#/fantom-theme")
    (license #f)))

(define-public emacs-farmhouse-theme
  (package
    (name "emacs-farmhouse-theme")
    (version "20160713.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattly/emacs-farmhouse-theme.git")
               (commit
                 "7ddc1ff13b4a3d5466bd0d33ecb86100352e83a7")))
        (sha256
          (base32
            "09k6agh205kr2lif354m38l3967b0jajm14rgpl7l1vlajh8wzfd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Farmhouse Theme, Emacs edition")
    (description
      "Documentation at https://melpa.org/#/farmhouse-theme")
    (license #f)))

(define-public emacs-fasd
  (package
    (name "emacs-fasd")
    (version "20210104.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/emacs-fasd.git")
               (commit
                 "c1d92553f33ebb018135c698db1a6d7f86731a26")))
        (sha256
          (base32
            "16if5pp2y5nxp37gl29l206dmika75fs2znfpks98iv9zwxpps2w"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/emacs-fasd")
    (synopsis
      "Emacs integration for the command-line productivity booster `fasd'")
    (description
      "Documentation at https://melpa.org/#/fasd")
    (license #f)))

(define-public emacs-fastdef
  (package
    (name "emacs-fastdef")
    (version "20160713.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/fastdef.git")
               (commit
                 "0696f41dc150d35ce31fe8d2ea74f4173818bb55")))
        (sha256
          (base32
            "1p5vmbx7zdzxnyjzcp2vxscd3dwf7xk82wk9dfiv99svwqv2ki3w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-w3m))
    (home-page
      "http://github.com/redguardtoo/fastdef")
    (synopsis
      "Insert terminology from Google top search results")
    (description
      "Documentation at https://melpa.org/#/fastdef")
    (license #f)))

(define-public emacs-faustine
  (package
    (name "emacs-faustine")
    (version "20171122.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/yphil/faustine")
               (commit
                 "07a38963111518f86123802f9d477be0d4689a3f")))
        (sha256
          (base32
            "0dj35hwkm5v8758c4ssl873vkvplba5apjsh7l23nsmnzdji99zg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-faust-mode))
    (home-page
      "https://bitbucket.org/yphil/faustine")
    (synopsis
      "Edit, visualize, build and run Faust code")
    (description
      "Documentation at https://melpa.org/#/faustine")
    (license #f)))

(define-public emacs-fcitx
  (package
    (name "emacs-fcitx")
    (version "20190806.1923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/fcitx.el.git")
               (commit
                 "12dc2638ddd15c8f6cfaecb20e1f428ab2bb5624")))
        (sha256
          (base32
            "0ahw2pi6i693s4mdjdkisy94yvg0wgmd3c6zi0z4yi60b6irskdn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cute-jumper/fcitx.el")
    (synopsis "Make fcitx better in Emacs")
    (description
      "Documentation at https://melpa.org/#/fcitx")
    (license #f)))

(define-public emacs-fd-dired
  (package
    (name "emacs-fd-dired")
    (version "20210723.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/fd-dired.git")
               (commit
                 "458464771bb220b6eb87ccfd4c985c436e57dc7e")))
        (sha256
          (base32
            "0253r4fbi9b8vk5akp1wz0krvik500jhy1hclwp1p0bwrq2irlml"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yqrashawn/fd-dired")
    (synopsis "find-dired alternative using fd")
    (description
      "Documentation at https://melpa.org/#/fd-dired")
    (license #f)))

(define-public emacs-feebleline
  (package
    (name "emacs-feebleline")
    (version "20190822.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tautologyclub/feebleline.git")
               (commit
                 "b2f2db25cac77817bf0c49ea2cea6383556faea0")))
        (sha256
          (base32
            "0f2nynx9sib29qi3zkfkgxlcfrwz607pgg6qvvk4nnads033p1yn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tautologyclub/feebleline")
    (synopsis
      "Replace modeline with a slimmer proxy")
    (description
      "Documentation at https://melpa.org/#/feebleline")
    (license #f)))

(define-public emacs-filetags
  (package
    (name "emacs-filetags")
    (version "20190706.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DerBeutlin/filetags.el.git")
               (commit
                 "01e6a919507a832ee001a2a0fc257657f8b04b72")))
        (sha256
          (base32
            "15557rkbi3d40q2zs5vkgkpbya4c4ksnh2a07d8l7x457zah4fbn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DerBeutlin/filetags.el")
    (synopsis
      "Package to manage filetags in filename")
    (description
      "Documentation at https://melpa.org/#/filetags")
    (license #f)))

(define-public emacs-fillcode
  (package
    (name "emacs-fillcode")
    (version "20200524.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/snarfed/fillcode.git")
               (commit
                 "501468082e46bd0975ef4d8765363fd564338099")))
        (sha256
          (base32
            "0z18x3gxh004nd648hwqdlb60a6ss61pkkqg30xpdmsrj8darf5q"))))
    (build-system melpa-build-system)
    (home-page "https://snarfed.org/fillcode")
    (synopsis
      "Fill (wrap) function calls and expressions in source code")
    (description
      "Documentation at https://melpa.org/#/fillcode")
    (license #f)))

(define-public emacs-find-by-pinyin-dired
  (package
    (name "emacs-find-by-pinyin-dired")
    (version "20180210.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/find-by-pinyin-dired.git")
               (commit
                 "3b4781148dddc84a701ad76c0934ed991ecd59d5")))
        (sha256
          (base32
            "03fw1si115padxss6zb9fr0dsyq1bxlhxikgh4i5swp4jd4331k5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pinyinlib))
    (home-page
      "http://github.com/redguardtoo/find-by-pinyin-dired")
    (synopsis
      "Find file by first PinYin character of Chinese Hanzi")
    (description
      "Documentation at https://melpa.org/#/find-by-pinyin-dired")
    (license #f)))

(define-public emacs-find-temp-file
  (package
    (name "emacs-find-temp-file")
    (version "20200117.2254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/find-temp-file.git")
               (commit
                 "2bfcdba0d6a8a0e6faa080cb04ff0f7ed06491ba")))
        (sha256
          (base32
            "1fr48mkrwxmpjk5lrznrr6nhnj8h6d3v984261nm44c0rzziq7vj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/find-temp-file.git")
    (synopsis "Open quickly a temporary file")
    (description
      "Documentation at https://melpa.org/#/find-temp-file")
    (license #f)))

(define-public emacs-find-things-fast
  (package
    (name "emacs-find-things-fast")
    (version "20150519.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eglaysher/find-things-fast.git")
               (commit
                 "efc7c189019ed65430e2f9e910e8e0a5ca9d2d03")))
        (sha256
          (base32
            "1r6cs7p43pi6n2inbrv9q924m679izxwxqgyr4sjjj3lg6an4cnx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Find things fast, leveraging the power of git")
    (description
      "Documentation at https://melpa.org/#/find-things-fast")
    (license #f)))

(define-public emacs-findr
  (package
    (name "emacs-findr")
    (version "20130127.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/findr.git")
               (commit
                 "1ddbc0464bb05dcda392b62666ad17239a2152d3")))
        (sha256
          (base32
            "0wx4hd4agrfvk0igyash658cbf7v3bv01rlspllsvzr59fl3faqq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Breadth-first file-finding facility for (X)Emacs")
    (description
      "Documentation at https://melpa.org/#/findr")
    (license #f)))

(define-public emacs-fingers
  (package
    (name "emacs-fingers")
    (version "20160817.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/fingers.el.git")
               (commit
                 "fed0f742afb1d72eaef29d8da394467550a030fa")))
        (sha256
          (base32
            "1mx05zfdrkwb50l7f0iycsqw23b1gxzacfnssclb42xdjxxmyhdj"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fgeller/fingers.el")
    (synopsis
      "Modal editing with universal text manipulation helpers.")
    (description
      "Documentation at https://melpa.org/#/fingers")
    (license #f)))

(define-public emacs-firecode-theme
  (package
    (name "emacs-firecode-theme")
    (version "20170808.1311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-firecode-theme.git")
               (commit
                 "8b7b03ecdd41e70dab145b98906017e1392eaef4")))
        (sha256
          (base32
            "1vrpnv7555mbsksflgdkg7hc65fjcyzvzv2261y043rlh2qrn0sy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on FireCode (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/firecode-theme")
    (license #f)))

(define-public emacs-firestarter
  (package
    (name "emacs-firestarter")
    (version "20210508.1626")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/firestarter-"
               version
               ".el"))
        (sha256
          (base32
            "0ncjbilh23vn52n1ag7hrw515rj1bb4s3i0i8am6pqcffl5922i3"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/firestarter")
    (synopsis "Execute (shell) commands on save")
    (description
      "Documentation at https://melpa.org/#/firestarter")
    (license #f)))

(define-public emacs-fix-input
  (package
    (name "emacs-fix-input")
    (version "20210320.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/fix-input.git")
               (commit
                 "b611a8b269d28d226ed1e78fcc7a3120df20f74c")))
        (sha256
          (base32
            "0w2h538ljsccnw3a66dz1wpq2jxlq8mdgal2qlzx1dw7kdnxhx9n"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/fix-input")
    (synopsis
      "Make input methods play nicely with alternative keyboard layout on OS level")
    (description
      "Documentation at https://melpa.org/#/fix-input")
    (license #f)))

(define-public emacs-fixmee
  (package
    (name "emacs-fixmee")
    (version "20150223.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/fixmee.git")
               (commit
                 "5cddb64e0d52635e9a1529d80cb5cefa6f829341")))
        (sha256
          (base32
            "0kl2b4j93kk9lzw0qclib55ghcwznag3p022jkr0bq5z30m2gdj4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-button-lock
            emacs-nav-flash
            emacs-back-button
            emacs-smartrep
            emacs-string-utils))
    (home-page
      "http://github.com/rolandwalker/fixmee")
    (synopsis
      "Quickly navigate to FIXME notices in code")
    (description
      "Documentation at https://melpa.org/#/fixmee")
    (license #f)))

(define-public emacs-flash-region
  (package
    (name "emacs-flash-region")
    (version "20130923.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/flash-region.git")
               (commit
                 "261b3597b23cdd40e5c14262a5687bcc6c1d0901")))
        (sha256
          (base32
            "0z77lm6jv2w5z551pwarcx6xg9kx8fgms9dlskngfvnzbqkldj1f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Flash a region")
    (description
      "Documentation at https://melpa.org/#/flash-region")
    (license #f)))

(define-public emacs-flatfluc-theme
  (package
    (name "emacs-flatfluc-theme")
    (version "20210908.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seblemaguer/flatfluc-theme.git")
               (commit
                 "33726cd072ad83c6943e1c3b83db2fff60f324ce")))
        (sha256
          (base32
            "1nai41dzpnmv63k75xnhc64vipb9nqyv3k75mp2g8csxz569ph2l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/seblemaguer/flatfluc-theme")
    (synopsis
      "Custom merge of flucui and flatui themes")
    (description
      "Documentation at https://melpa.org/#/flatfluc-theme")
    (license #f)))

(define-public emacs-flatland-theme
  (package
    (name "emacs-flatland-theme")
    (version "20171113.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gchp/flatland-emacs.git")
               (commit
                 "a98a6f19ad4dff0fa3fad1ea487b7d0ef634a19a")))
        (sha256
          (base32
            "02gbzxd1v003aaj5rn3vr00n4390bhdx2jhpa7nb430fg3s1ppdy"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("flatland-theme.el")))
    (home-page
      "http://github.com/gregchapple/flatland-emacs")
    (synopsis
      "A simple theme for Emacs based on the Flatland theme for Sublime Text")
    (description
      "Documentation at https://melpa.org/#/flatland-theme")
    (license #f)))

(define-public emacs-flatui-dark-theme
  (package
    (name "emacs-flatui-dark-theme")
    (version "20170513.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theasp/flatui-dark-theme.git")
               (commit
                 "5b959a9f743f891e4660b1b432086417947872ea")))
        (sha256
          (base32
            "0nz4ql7qf49cwsgjb7dg0jhipr5d472r4fddy6fhr1h17s1cd9qy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/theasp/flatui-dark-theme")
    (synopsis
      "Dark color theme with colors from https://flatuicolors.com/")
    (description
      "Documentation at https://melpa.org/#/flatui-dark-theme")
    (license #f)))

(define-public emacs-flex-compile
  (package
    (name "emacs-flex-compile")
    (version "20211203.849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/flex-compile.git")
               (commit
                 "7d0421805e4a287358a5c188ff868bd93be2192a")))
        (sha256
          (base32
            "0hv9lp4ybcl7vn27cx3iq64rk0fydinq6sgyslhc2616kll6fdb7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-buffer-manage))
    (home-page
      "https://github.com/plandes/flex-compile")
    (synopsis
      "Run, evaluate and compile across many languages")
    (description
      "Documentation at https://melpa.org/#/flex-compile")
    (license #f)))

(define-public emacs-flex-isearch
  (package
    (name "emacs-flex-isearch")
    (version "20170308.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/flex-isearch.git")
               (commit
                 "b1f7e04de762282c276343cc2709af9ff4abc9d2")))
        (sha256
          (base32
            "0xbwrzkfv4i91qxs80p0pfjlvj5pyigvidby8m5lammm8idwx9dh"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/jpkotta/flex-isearch")
    (synopsis "Flex matching (like ido) in isearch.")
    (description
      "Documentation at https://melpa.org/#/flex-isearch")
    (license #f)))

(define-public emacs-flim
  (package
    (name "emacs-flim")
    (version "20210529.1253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/flim.git")
               (commit
                 "02735dede6603987e8309a76d0bc7a9ff9a5a227")))
        (sha256
          (base32
            "1jy2wsm1xc6iaxa449wwz14ky4yiaxd8g05ry59r9pf60cpxxy1h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-apel emacs-oauth2))
    (arguments
      '(#:files
        ("*.texi"
         "*.el"
         (:exclude
           "md5-dl.el"
           "md5-el.el"
           "mel-b-dl.el"
           "sha1-dl.el"
           "smtpmail.el"))))
    (home-page "unspecified")
    (synopsis
      "A library to provide basic features about message representation or encoding.")
    (description
      "Documentation at https://melpa.org/#/flim")
    (license #f)))

(define-public emacs-floobits
  (package
    (name "emacs-floobits")
    (version "20211018.550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Floobits/floobits-emacs.git")
               (commit
                 "93b3317fb6c842efe165e54c8a32bf51d436837d")))
        (sha256
          (base32
            "1fxjba956ikhnsgzvavgg96ryz8q6h55az7cnkgcy58q7b0jk1j2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-highlight))
    (arguments
      '(#:files ("floo" "floobits.el" "floobits.py")))
    (home-page
      "http://github.com/Floobits/floobits-emacs")
    (synopsis
      "Floobits plugin for real-time collaborative editing")
    (description
      "Documentation at https://melpa.org/#/floobits")
    (license #f)))

(define-public emacs-flucui-themes
  (package
    (name "emacs-flucui-themes")
    (version "20200815.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MetroWind/flucui-theme.git")
               (commit
                 "6591b5093e6e8f0e720e3995a16a91835b2e7a48")))
        (sha256
          (base32
            "1lrpx1y103655xwaqkvn7i2zvkzbsf5bm7zndaj31rpm917xcm3i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MetroWind/flucui-theme")
    (synopsis
      "Custom theme inspired by the Flat UI palette")
    (description
      "Documentation at https://melpa.org/#/flucui-themes")
    (license #f)))

(define-public emacs-flx-ido
  (package
    (name "emacs-flx-ido")
    (version "20180117.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/flx.git")
               (commit
                 "e3b3f0533e44c5250ce73d728b59a7e96c692b5d")))
        (sha256
          (base32
            "0sgs83gn6ms90yk68ygvcib8k5k94ql6s23qzllas07qzmx0cn48"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flx))
    (arguments '(#:files ("flx-ido.el")))
    (home-page "https://github.com/lewang/flx")
    (synopsis "flx integration for ido")
    (description
      "Documentation at https://melpa.org/#/flx-ido")
    (license #f)))

(define-public emacs-flycheck-ameba
  (package
    (name "emacs-flycheck-ameba")
    (version "20191226.1011")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-ameba/ameba.el.git")
               (commit
                 "0c4925ae0e998818326adcb47ed27ddf9761c7dc")))
        (sha256
          (base32
            "0jh0pfyqdks9xk43765vgm4569a8ny01pk3gy2p3vr5gdgfdm4a3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("flycheck-ameba.el")))
    (home-page
      "https://github.com/crystal-ameba/ameba.el")
    (synopsis "Add support for Ameba to Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-ameba")
    (license #f)))

(define-public emacs-flycheck-aspell
  (package
    (name "emacs-flycheck-aspell")
    (version "20210618.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leotaku/flycheck-aspell.git")
               (commit
                 "576e7f3e96ef8757a45106346a5f45831a8fee13")))
        (sha256
          (base32
            "1680qkn6n145ib0q039081k9iwgl81i81d1wmy1myifq8h9pgjzc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("flycheck-aspell.el")))
    (home-page
      "https://github.com/leotaku/flycheck-aspell")
    (synopsis "Aspell checker for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-aspell")
    (license #f)))

(define-public emacs-flycheck-ats2
  (package
    (name "emacs-flycheck-ats2")
    (version "20170225.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drvink/flycheck-ats2.git")
               (commit
                 "9f77add8408462af35bdddf87e37a661880255e3")))
        (sha256
          (base32
            "1fv3r49i8dgszaq5rs8dwnwcj6rgx922ww01ikrq3b4c9y17srpz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "http://github.com/drvink/flycheck-ats2")
    (synopsis "Flycheck: ATS2 support")
    (description
      "Documentation at https://melpa.org/#/flycheck-ats2")
    (license #f)))

(define-public emacs-flycheck-bashate
  (package
    (name "emacs-flycheck-bashate")
    (version "20200625.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-bashate.git")
               (commit
                 "5e673c591d017329d0a07a61dc1223fa98639ee2")))
        (sha256
          (base32
            "1gaih50mkyby0r4qnmc03dy111ik4and5p6r3lvsflpvd3hcxjn3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-bashate")
    (synopsis "Integrate bashate with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-bashate")
    (license #f)))

(define-public emacs-flycheck-cfn
  (package
    (name "emacs-flycheck-cfn")
    (version "20201120.2307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/worr/cfn-mode.git")
               (commit
                 "a4ca40978e680f9edc86c141e696e0ae57c63533")))
        (sha256
          (base32
            "0ggq4q2c1xi26m4rlvjm8f51wlj7h351pp6m20k6l25856858vhi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments
      '(#:files ("flycheck-cfn/flycheck-cfn.el")))
    (home-page "https://gitlab.com/worr/cfn-mode")
    (synopsis
      "Flycheck backend for AWS cloudformation")
    (description
      "Documentation at https://melpa.org/#/flycheck-cfn")
    (license #f)))

(define-public emacs-flycheck-checkbashisms
  (package
    (name "emacs-flycheck-checkbashisms")
    (version "20190403.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cuonglm/flycheck-checkbashisms.git")
               (commit
                 "53598158fa8b74d2e7efea6210edb274e1f0273c")))
        (sha256
          (base32
            "1gad7i7mw8yh3cg6d5gn1d5jbsnc73v7rcw2sjvif566x8k7n18z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/cuonglm/flycheck-checkbashisms")
    (synopsis "checkbashisms checker for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-checkbashisms")
    (license #f)))

(define-public emacs-flycheck-checkpatch
  (package
    (name "emacs-flycheck-checkpatch")
    (version "20170217.1025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zpp0/flycheck-checkpatch.git")
               (commit
                 "6461fc7b0d493eb9863814055f8bce5fa35739de")))
        (sha256
          (base32
            "1651xmw01n5h7x81y3cvsamdmb67jcf385ax52dkp8miyq1a090r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/zpp0/flycheck-checkpatch")
    (synopsis
      "Flycheck support for checkpatch.pl tool")
    (description
      "Documentation at https://melpa.org/#/flycheck-checkpatch")
    (license #f)))

(define-public emacs-flycheck-clang-tidy
  (package
    (name "emacs-flycheck-clang-tidy")
    (version "20201115.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ch1bo/flycheck-clang-tidy.git")
               (commit
                 "f9ae7306bd6ca08b689b36c1e8f6f6b91d61db5f")))
        (sha256
          (base32
            "1akb41ndwqva34i059cyprsx9b8v3pxgvl082d36x86zplg06ssa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/ch1bo/flycheck-clang-tidy")
    (synopsis
      "Flycheck syntax checker using clang-tidy")
    (description
      "Documentation at https://melpa.org/#/flycheck-clang-tidy")
    (license #f)))

(define-public emacs-flycheck-clangcheck
  (package
    (name "emacs-flycheck-clangcheck")
    (version "20150712.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kumar8600/flycheck-clangcheck.git")
               (commit
                 "24a9424c484420073a24443a829fd5779752362b")))
        (sha256
          (base32
            "1ckzs32wzqpnw89rrw3l7i4gbyn25wagbadsc4mcrixml5nf0mck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/kumar8600/flycheck-clangcheck")
    (synopsis
      "A Flycheck checker difinition for ClangCheck.")
    (description
      "Documentation at https://melpa.org/#/flycheck-clangcheck")
    (license #f)))

(define-public emacs-flycheck-color-mode-line
  (package
    (name "emacs-flycheck-color-mode-line")
    (version "20200528.416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-color-mode-line.git")
               (commit
                 "575b604cfe21f65fb07c134392c382c163c87739")))
        (sha256
          (base32
            "04wc61my2p6zbq22nh6yvap5aww9lfr5zgd7mf0l1chbvi9scdn0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-color-mode-line")
    (synopsis
      "Change mode line color with Flycheck status")
    (description
      "Documentation at https://melpa.org/#/flycheck-color-mode-line")
    (license #f)))

(define-public emacs-flycheck-credo
  (package
    (name "emacs-flycheck-credo")
    (version "20170526.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/flycheck-credo.git")
               (commit
                 "e88f11ead53805c361ec7706e44c3dfee1daa19f")))
        (sha256
          (base32
            "04i7fbqpkjpsfa8vjpkdhg1sj5isczxwncdp4vr9x3vll3svblm7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/aaronjensen/flycheck-credo")
    (synopsis "flycheck checker for elixir credo")
    (description
      "Documentation at https://melpa.org/#/flycheck-credo")
    (license #f)))

(define-public emacs-flycheck-d-unittest
  (package
    (name "emacs-flycheck-d-unittest")
    (version "20160522.417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-d-unittest.git")
               (commit
                 "3e614f23cb4a5566fd7988dbcaaf254af81c7718")))
        (sha256
          (base32
            "0lrxyrvdkj88qh78jmamrnji770vjsr6h01agl7hvd4n2xvlxcym"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/tom-tan/flycheck-d-unittest/")
    (synopsis "Add D unittest support to flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-d-unittest")
    (license #f)))

(define-public emacs-flycheck-dialyzer
  (package
    (name "emacs-flycheck-dialyzer")
    (version "20160326.1430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-dialyzer.git")
               (commit
                 "a5df0db95ac69f397b5f85d325a6d88cf8974f64")))
        (sha256
          (base32
            "1i5wm2r6rck6864a60mm6kv31vgvqnq49hi9apvhyywfn6sycwkf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support dialyzer in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-dialyzer")
    (license #f)))

(define-public emacs-flycheck-dtrace
  (package
    (name "emacs-flycheck-dtrace")
    (version "20180903.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/flycheck-dtrace.git")
               (commit
                 "951fab3a15c11d92b9fac1ea4791a80dfe034a00")))
        (sha256
          (base32
            "1qkzir3lzz4lc5kn55qb52cm5y7iy8w1ljq6xxzcjxfbk9980y0y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Flycheck: DTrace support")
    (description
      "Documentation at https://melpa.org/#/flycheck-dtrace")
    (license #f)))

(define-public emacs-flycheck-elixir
  (package
    (name "emacs-flycheck-elixir")
    (version "20210413.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-elixir.git")
               (commit
                 "b57a77a21d6cf9621b3387831cba34135c4fa35d")))
        (sha256
          (base32
            "10y2z3w2hjycy0hx8zbhma88i2v9fs5xs7pwz3k56jnv95ipjmpy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support Elixir in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-elixir")
    (license #f)))

(define-public emacs-flycheck-flawfinder
  (package
    (name "emacs-flycheck-flawfinder")
    (version "20211214.647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-flawfinder.git")
               (commit
                 "85701b849ea1ed8438ed4b7ae236e99d0f5528c7")))
        (sha256
          (base32
            "1wfba0p54qnr2s6nhzg1vapzppb7m124whasfrl4ki124c4sf6v1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-flawfinder")
    (synopsis "Integrate flawfinder with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-flawfinder")
    (license #f)))

(define-public emacs-flycheck-grammarly
  (package
    (name "emacs-flycheck-grammarly")
    (version "20211027.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/flycheck-grammarly.git")
               (commit
                 "cb086c996db0837e774a5dc9edca9592e2e8f9a8")))
        (sha256
          (base32
            "08njaf2fxfiww5c967qrz18zq3sazdlwdvg66nbxkyzhyhgy6r3b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-grammarly emacs-s))
    (home-page
      "https://github.com/emacs-grammarly/flycheck-grammarly")
    (synopsis "Grammarly support for Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-grammarly")
    (license #f)))

(define-public emacs-flycheck-haskell
  (package
    (name "emacs-flycheck-haskell")
    (version "20211223.104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-haskell.git")
               (commit
                 "8110ef5a1953594d065b67df25d5f0c05c711df4")))
        (sha256
          (base32
            "1qdgcykn2rdf9jj9pzd0zyk7pdcf9lr942hr6w3kmkc299qiajf8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-haskell-mode
            emacs-dash))
    (arguments '(#:files (:defaults "*.hs")))
    (home-page
      "https://github.com/flycheck/flycheck-haskell")
    (synopsis
      "Flycheck: Automatic Haskell configuration")
    (description
      "Documentation at https://melpa.org/#/flycheck-haskell")
    (license #f)))

(define-public emacs-flycheck-hdevtools
  (package
    (name "emacs-flycheck-hdevtools")
    (version "20160926.702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-hdevtools.git")
               (commit
                 "8248ebaf8376ee5e37ff47c814a291550a7bdcf2")))
        (sha256
          (base32
            "1al9kyj7n0cjc4s1m41389bzvvrckg28598v506zd5hqvaiynsp0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-hdevtools")
    (synopsis
      "A flycheck checker for Haskell using hdevtools")
    (description
      "Documentation at https://melpa.org/#/flycheck-hdevtools")
    (license #f)))

(define-public emacs-flycheck-indent
  (package
    (name "emacs-flycheck-indent")
    (version "20200129.2046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/indent-lint.el.git")
               (commit
                 "c55f4ded11e8e50a96f43675a071354a8fb501c3")))
        (sha256
          (base32
            "0d7vkgzsx6ka4zliscsg6drqhg2bj16i911ryzmsp4v6hj294jrc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-indent-lint emacs-flycheck))
    (arguments '(#:files ("flycheck-indent.el")))
    (home-page
      "https://github.com/conao3/indent-lint.el")
    (synopsis "Indent-lint frontend for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-indent")
    (license #f)))

(define-public emacs-flycheck-ini-pyinilint
  (package
    (name "emacs-flycheck-ini-pyinilint")
    (version "20190312.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/danieljrmay/flycheck-ini-pyinilint.git")
               (commit
                 "7febbea9ed407eccc4bfd24ae0d3afd1c19394f7")))
        (sha256
          (base32
            "07cw1j9k662ci19l3xpjxx4hasx5pkvi1q3f68mgkmbprbjvxqml"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://gitlab.com/danieljrmay/flycheck-ini-pyinilint")
    (synopsis "Flycheck integration for PyINILint")
    (description
      "Documentation at https://melpa.org/#/flycheck-ini-pyinilint")
    (license #f)))

(define-public emacs-flycheck-ledger
  (package
    (name "emacs-flycheck-ledger")
    (version "20200304.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flycheck-ledger.git")
               (commit
                 "628e25ba66604946085571652a94a54f4d1ad96f")))
        (sha256
          (base32
            "1djrj3is0dzrl2703bw7bclf33dp4xqmy144q7xj5pvpb9v3kf50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/purcell/flycheck-ledger")
    (synopsis
      "Flycheck integration for ledger files")
    (description
      "Documentation at https://melpa.org/#/flycheck-ledger")
    (license #f)))

(define-public emacs-flycheck-mercury
  (package
    (name "emacs-flycheck-mercury")
    (version "20181118.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-mercury.git")
               (commit
                 "b6807a8db70981e21a91a93324c31e49de85c89f")))
        (sha256
          (base32
            "15pjqglpcwm4wy0cxk1man3ar0n56qi1bjrr1fxfjq2xwsgsfagh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-s emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-mercury")
    (synopsis "Mercury support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-mercury")
    (license #f)))

(define-public emacs-flycheck-mypy
  (package
    (name "emacs-flycheck-mypy")
    (version "20200113.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-mypy.git")
               (commit
                 "5b4e14ab0cbce2ff35fee7e69b5b95eafd609c80")))
        (sha256
          (base32
            "1cx1rm40ns3y5bdbk8hfycdaq16p4zxkjjss02xs6hl96yvc4kaj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support mypy in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-mypy")
    (license #f)))

(define-public emacs-flycheck-nim
  (package
    (name "emacs-flycheck-nim")
    (version "20190927.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ALSchwalm/flycheck-nim.git")
               (commit
                 "ddfade51001571c2399f78bcc509e0aa8eb752a4")))
        (sha256
          (base32
            "19xxwj66q45499s9jvw6rq8im0g7wxl9m66kq2a9ykds4v7sprlm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-flycheck))
    (home-page
      "https://github.com/ALSchwalm/flycheck-nim")
    (synopsis
      "Defines a flycheck syntax checker for nim")
    (description
      "Documentation at https://melpa.org/#/flycheck-nim")
    (license #f)))

(define-public emacs-flycheck-ocaml
  (package
    (name "emacs-flycheck-ocaml")
    (version "20170730.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-ocaml.git")
               (commit
                 "8707a7bf545a8639a6a5c600a98d9a2ea1487dc9")))
        (sha256
          (base32
            "13vzxkjq6v1f1i9zgxgjbwpiba04k9frkcl2wx6a9h3vgd7jyay0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-merlin))
    (home-page
      "https://github.com/flycheck/flycheck-ocaml")
    (synopsis "Flycheck: OCaml support")
    (description
      "Documentation at https://melpa.org/#/flycheck-ocaml")
    (license #f)))

(define-public emacs-flycheck-pact
  (package
    (name "emacs-flycheck-pact")
    (version "20180920.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kadena-io/flycheck-pact.git")
               (commit
                 "0e10045064ef89ec8b6f5a473073d47b976a2ca3")))
        (sha256
          (base32
            "072jc0vrjg531ydk5bjrjpmbvdk81yw75jqjnvb7alkib6jn5f9r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-pact-mode))
    (home-page
      "http://github.com/kadena-io/flycheck-pact")
    (synopsis "Flycheck support for pact-mode")
    (description
      "Documentation at https://melpa.org/#/flycheck-pact")
    (license #f)))

(define-public emacs-flycheck-phpstan
  (package
    (name "emacs-flycheck-phpstan")
    (version "20210714.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpstan.el.git")
               (commit
                 "0869b152f82a76138daa53e953285936b9d558bd")))
        (sha256
          (base32
            "1xm5i658pf1lb4bfpy6zy5msanhia8r9j7v7rx72amkksja3hwnj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-phpstan))
    (arguments '(#:files ("flycheck-phpstan.el")))
    (home-page
      "https://github.com/emacs-php/phpstan.el")
    (synopsis "Flycheck integration for PHPStan")
    (description
      "Documentation at https://melpa.org/#/flycheck-phpstan")
    (license #f)))

(define-public emacs-flycheck-tcl
  (package
    (name "emacs-flycheck-tcl")
    (version "20180327.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nwidger/flycheck-tcl.git")
               (commit
                 "7ca23f4673e178b9f5dcc8a82b86cf05b15d7236")))
        (sha256
          (base32
            "17mmj0yx7d7cwyq35ll1lw4j0yyha172375apvanrkpgpzjpnvrq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/nwidger/flycheck-tcl")
    (synopsis
      "A flycheck checker for Tcl using tclchecker")
    (description
      "Documentation at https://melpa.org/#/flycheck-tcl")
    (license #f)))

(define-public emacs-flymake-eslint
  (package
    (name "emacs-flymake-eslint")
    (version "20191129.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/orzechowskid/flymake-eslint.git")
               (commit
                 "6e2d376f84ddf9af593072954c97e9c82ab85331")))
        (sha256
          (base32
            "1pkigdarkjk2gpqjrfavg68bwihaazjzf1rr9fmrqkgis5hz3zf7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/orzechowskid/flymake-eslint")
    (synopsis
      "A Flymake backend for Javascript using eslint")
    (description
      "Documentation at https://melpa.org/#/flymake-eslint")
    (license #f)))

(define-public emacs-flymake-gjshint
  (package
    (name "emacs-flymake-gjshint")
    (version "20130327.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/flymake-gjshint-el.git")
               (commit
                 "dc957c14cb060819585de8aedb330e24efa4b784")))
        (sha256
          (base32
            "14kbqyw4v1c51dx7pfgqbn8x4j8j3rgyyq2fa9klqzxpldcskl24"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A flymake handler for javascript using both jshint and gjslint")
    (description
      "Documentation at https://melpa.org/#/flymake-gjshint")
    (license #f)))

(define-public emacs-flymake-go
  (package
    (name "emacs-flymake-go")
    (version "20150714.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/robert-zaremba/flymake-go.git")
               (commit
                 "ae83761aa908c1a50ff34af04f00dcc46bca2ce9")))
        (sha256
          (base32
            "03gh0y988pksghmmvb5av2vnlbcsncafvn4nwihsis0bhys8k28q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/robert-zaremba/flymake-go")
    (synopsis "A flymake handler for go-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-go")
    (license #f)))

(define-public emacs-flymake-go-staticcheck
  (package
    (name "emacs-flymake-go-staticcheck")
    (version "20190708.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/flymake-go-staticcheck.git")
               (commit
                 "130079fcd29c3e2a72f8325f3041042bcc6286f1")))
        (sha256
          (base32
            "1wxsk6vy9hm8gi5cvhmxmqv9415q8k2yp8636s4fb1xcp1zalysk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/s-kostyaev/flymake-go-staticcheck")
    (synopsis "Go staticcheck linter for flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-go-staticcheck")
    (license #f)))

(define-public emacs-flymake-golangci
  (package
    (name "emacs-flymake-golangci")
    (version "20191028.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/shackra/flymake-golangci.git")
               (commit
                 "dfc31a1a6ae3f087b49fe6f5f21b3866780aa91c")))
        (sha256
          (base32
            "1py7ssjz4q5r28c8lzga5qi8x4gmdg3z0ga0cyskiba6krvv45ry"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://gitlab.com/shackra/flymake-golangci")
    (synopsis
      "A flymake handler for go-mode files using Golang CI lint")
    (description
      "Documentation at https://melpa.org/#/flymake-golangci")
    (license #f)))

(define-public emacs-flymake-joker
  (package
    (name "emacs-flymake-joker")
    (version "20200315.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beetleman/flymake-joker.git")
               (commit
                 "fc132beedac9e6f415b72e578e77318fd13af9ee")))
        (sha256
          (base32
            "1pqi6d1kgn5s6bkabi8jxk26ffwqq7g3rl3xgas49rn9vgqwqmq1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-quickdef))
    (home-page
      "https://github.com/beetleman/flymake-joker")
    (synopsis
      "Add Clojure syntax checker (via Joker) to flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-joker")
    (license #f)))

(define-public emacs-flymake-jshint
  (package
    (name "emacs-flymake-jshint")
    (version "20140319.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/flymake-jshint.el.git")
               (commit
                 "79dd554c227883c487db38ac111306c8d5382c95")))
        (sha256
          (base32
            "0ywm9fpb7d7ry2fly8719fa41q97yj9za3phqhv6j1chzaxvcv3a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page "unspecified")
    (synopsis "making flymake work with JSHint")
    (description
      "Documentation at https://melpa.org/#/flymake-jshint")
    (license #f)))

(define-public emacs-flymake-jslint
  (package
    (name "emacs-flymake-jslint")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-jslint.git")
               (commit
                 "8edb82be605542b0ef62d38d818adcdde335eecb")))
        (sha256
          (base32
            "0i6bqpbibsbqhpqfy9zl0awiqkmddi3q8xlrslcjd429f0g5f1ad"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-jslint")
    (synopsis
      "A flymake handler for javascript using jslint")
    (description
      "Documentation at https://melpa.org/#/flymake-jslint")
    (license #f)))

(define-public emacs-flymake-json
  (package
    (name "emacs-flymake-json")
    (version "20180511.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-json.git")
               (commit
                 "03b4e5e7ad11938781257a783e717ab95fe65952")))
        (sha256
          (base32
            "1yayfh4j155fpwybh26w6hvdg1whrd8wmaz8w406s4rqpsw93q92"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-json")
    (synopsis
      "A flymake handler for json using jsonlint")
    (description
      "Documentation at https://melpa.org/#/flymake-json")
    (license #f)))

(define-public emacs-flymake-kondor
  (package
    (name "emacs-flymake-kondor")
    (version "20211026.501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/turbo-cafe/flymake-kondor.git")
               (commit
                 "784e57f36812a37e323409b90b935ef3c6920a22")))
        (sha256
          (base32
            "1vcl1q07faqqmrryyia36hbgf78g3cs51pbi0bx41yzz779ribvk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/turbo-cafe/flymake-kondor")
    (synopsis "Linter with clj-kondo")
    (description
      "Documentation at https://melpa.org/#/flymake-kondor")
    (license #f)))

(define-public emacs-flymake-less
  (package
    (name "emacs-flymake-less")
    (version "20151111.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-less.git")
               (commit
                 "32d3c28a9a5c52b82d1741ff9d715013b6498421")))
        (sha256
          (base32
            "0ggi8a4j4glpsar0sqg8q06rscajjaziis5ann31wphx88rc5wd7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page "unspecified")
    (synopsis
      "Flymake handler for LESS stylesheets (lesscss.org)")
    (description
      "Documentation at https://melpa.org/#/flymake-less")
    (license #f)))

(define-public emacs-flymake-nasm
  (package
    (name "emacs-flymake-nasm")
    (version "20210310.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/flymake-nasm.git")
               (commit
                 "27e58d7f3a48ca6fc12238fe6c888a3fdffc3f75")))
        (sha256
          (base32
            "0j4zai3par1i27szs2rws72qrqjcr3yz55pp56hl397r40kzwgmq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-quickdef))
    (home-page
      "http://github.com/juergenhoetzel/flymake-nasm")
    (synopsis
      "A flymake handler for asm-mode files using nasm")
    (description
      "Documentation at https://melpa.org/#/flymake-nasm")
    (license #f)))

(define-public emacs-flymake-phpcs
  (package
    (name "emacs-flymake-phpcs")
    (version "20140713.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flymake/flymake-phpcs.git")
               (commit
                 "8e5ab5103c8f40a2ab6c86def6327e480ae93657")))
        (sha256
          (base32
            "19cggpaj14w3j3q6dgv7ybjqbr2pqbwhingz4yi7wkrr0w6s0lsa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/senda-akiha/flymake-phpcs/")
    (synopsis
      "making flymake work with PHP CodeSniffer")
    (description
      "Documentation at https://melpa.org/#/flymake-phpcs")
    (license #f)))

(define-public emacs-flymake-puppet
  (package
    (name "emacs-flymake-puppet")
    (version "20170801.554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benprew/flymake-puppet.git")
               (commit
                 "8a772395f4ccc59d883712ab53a92a17c1d9a429")))
        (sha256
          (base32
            "00w87qa7r8rigmpv58vpjwpn9x13sv7db5m6z4cqh76qkgkghgqi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/benprew/flymake-puppet")
    (synopsis "Flymake handler using puppet-lint")
    (description
      "Documentation at https://melpa.org/#/flymake-puppet")
    (license #f)))

(define-public emacs-flymake-racket
  (package
    (name "emacs-flymake-racket")
    (version "20210105.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flymake-racket.git")
               (commit
                 "3d3e5f2a9ab696670f9e52baa4dde7b84b7542df")))
        (sha256
          (base32
            "0p935dr74m73w2qs65a2x6chw2zrjq903vdwpmvq3pn2dk4djdf0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/flymake-racket")
    (synopsis "Flymake extension for Racket.")
    (description
      "Documentation at https://melpa.org/#/flymake-racket")
    (license #f)))

(define-public emacs-flymake-shell
  (package
    (name "emacs-flymake-shell")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-shell.git")
               (commit
                 "a16cf453056b9849cc7c912bb127fb0b08fc6dab")))
        (sha256
          (base32
            "1ki0zk5ijfkf4blavl62b55jnjzxw2b7blaxg51arpvvbflqmmlh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-shell")
    (synopsis
      "A flymake syntax-checker for shell scripts")
    (description
      "Documentation at https://melpa.org/#/flymake-shell")
    (license #f)))

(define-public emacs-flymake-vala
  (package
    (name "emacs-flymake-vala")
    (version "20150326.531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daniellawrence/flymake-vala.git")
               (commit
                 "c3674f461fc84fb0300cd3a562fb903a59782745")))
        (sha256
          (base32
            "0qpr0frcn3w0f6yz8vgavwbxvn6wb0qkfk653v4cfy57dvslr4wf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/daniellawrence/flymake-vala")
    (synopsis
      "A flymake handler for vala-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-vala")
    (license #f)))

(define-public emacs-flyspell-correct-helm
  (package
    (name "emacs-flyspell-correct-helm")
    (version "20210124.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "2e098db03cba74149257e31213097d043780e80a")))
        (sha256
          (base32
            "0rqp06bk260ms63sidl4x2gsnfc7hb77isjb3lm8qih98376mps7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flyspell-correct emacs-helm))
    (arguments
      '(#:files ("flyspell-correct-helm.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via helm interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct-helm")
    (license #f)))

(define-public emacs-fn
  (package
    (name "emacs-fn")
    (version "20210304.1812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/troyp/fn.el.git")
               (commit
                 "98e3fe1b4785e162d9aca978a2db106baa79260f")))
        (sha256
          (base32
            "0qaxbqwqxxgvw1lb6icsv3mx215mg682n3jsrmqfsvgl9nc97ps6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Concise anonymous functions for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/fn")
    (license #f)))

(define-public emacs-focus-autosave-mode
  (package
    (name "emacs-focus-autosave-mode")
    (version "20160519.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/focus-autosave-mode.el.git")
               (commit
                 "2e0844fabb6f0dc9e0f31928e4785febf38b9e35")))
        (sha256
          (base32
            "08wibc6rzy5qj3anzd076ncjd8wwr4vpak7fdjv29aai1gkzsc9j"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically save files in focus-out-hook.")
    (description
      "Documentation at https://melpa.org/#/focus-autosave-mode")
    (license #f)))

(define-public emacs-fold-dwim-org
  (package
    (name "emacs-fold-dwim-org")
    (version "20131203.1351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/fold-dwim-org.git")
               (commit
                 "c09bb2b46d65afbd1d0febc6fded7495be7a3037")))
        (sha256
          (base32
            "14jvbkahwvv4wb0s9vp8gqmlpv1d4269j5rsjxn79q5pawjzslxw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fold-dwim))
    (home-page
      "https://github.com/mlf176f2/fold-dwim-org")
    (synopsis "Fold DWIM bound to org key-strokes.")
    (description
      "Documentation at https://melpa.org/#/fold-dwim-org")
    (license #f)))

(define-public emacs-forecast
  (package
    (name "emacs-forecast")
    (version "20191004.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "8a3b529d5ece261a8847298ea03ed35615cc9bfa")))
        (sha256
          (base32
            "16zalqjd2llwkp7v0218crgf3k34py8zx6lj6z7i3kbmxm9nb27q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("forecast.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#forecast-el")
    (synopsis "Weather forecasts")
    (description
      "Documentation at https://melpa.org/#/forecast")
    (license #f)))

(define-public emacs-forest-blue-theme
  (package
    (name "emacs-forest-blue-theme")
    (version "20160627.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olkinn/forest-blue-emacs.git")
               (commit
                 "58096ce1a25615d2bae806c3775bae3e2775019d")))
        (sha256
          (base32
            "1qm74cfnc13wgv0c3657nd3xbgn492r24m5m2i0ipnpq49cddccf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs theme with a dark background.")
    (description
      "Documentation at https://melpa.org/#/forest-blue-theme")
    (license #f)))

(define-public emacs-format-table
  (package
    (name "emacs-format-table")
    (version "20181223.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/functionreturnfunction/format-table.git")
               (commit
                 "dfcae3a867e574577fc09a43b045889ff155b58f")))
        (sha256
          (base32
            "1z9l1qmv5hw7bgchi5f68nzsz9arjwsazvd6viq6k6jmjzncli6q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/functionreturnfunction/format-table")
    (synopsis "Parse and reformat tabular data.")
    (description
      "Documentation at https://melpa.org/#/format-table")
    (license #f)))

(define-public emacs-forth-mode
  (package
    (name "emacs-forth-mode")
    (version "20210829.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larsbrinkhoff/forth-mode.git")
               (commit
                 "38d5152011ee67e0cff9d4a5ddfb1f908e5be013")))
        (sha256
          (base32
            "09irbi8z1p2006abl4fnkyfj3c16nzzf55wqighlc2ri2v8bbisb"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults "backend" (:exclude "build.el"))))
    (home-page
      "http://github.com/larsbrinkhoff/forth-mode")
    (synopsis "Programming language mode for Forth")
    (description
      "Documentation at https://melpa.org/#/forth-mode")
    (license #f)))

(define-public emacs-fortpy
  (package
    (name "emacs-fortpy")
    (version "20150715.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rosenbrockc/fortpy-el.git")
               (commit
                 "c614517e9396ef7a78be3b8786fbf303879cf43b")))
        (sha256
          (base32
            "1nqx2igxmwswjcrnzdjpx5qcjr60zjy3q9cadq5disms17wdcr6y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-epc
            emacs-auto-complete
            emacs-python-environment
            emacs-pos-tip))
    (arguments
      '(#:files ("fortpy*" "Makefile" "setup.py")))
    (home-page "unspecified")
    (synopsis "a Fortran auto-completion for Emacs")
    (description
      "Documentation at https://melpa.org/#/fortpy")
    (license #f)))

(define-public emacs-frame-purpose
  (package
    (name "emacs-frame-purpose")
    (version "20211011.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/frame-purpose.el.git")
               (commit
                 "7d498147445cc0afb87b922a8225d2e163e5ed5a")))
        (sha256
          (base32
            "03qalcx8hbf6r0jmh7hf1r4san13fbgaaabcs4c50cam7kdv525r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/alphapapa/frame-purpose.el")
    (synopsis "Purpose-specific frames")
    (description
      "Documentation at https://melpa.org/#/frame-purpose")
    (license #f)))

(define-public emacs-frames-only-mode
  (package
    (name "emacs-frames-only-mode")
    (version "20210107.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/frames-only-mode.git")
               (commit
                 "d3f6647c484656ddabdac5d18546599a03823cd4")))
        (sha256
          (base32
            "02wai424sxxmaz7ilfm4ap4jl5rpx5dajg534x6vxm5alfjhlpag"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/davidshepherd7/frames-only-mode")
    (synopsis "Use frames instead of Emacs windows")
    (description
      "Documentation at https://melpa.org/#/frames-only-mode")
    (license #f)))

(define-public emacs-frameshot
  (package
    (name "emacs-frameshot")
    (version "20210819.2123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/frameshot.git")
               (commit
                 "029df561ef6572b1ab034490ac48d909d037ac1d")))
        (sha256
          (base32
            "1b6frjhv4gkix0yj6ibvjgaf4y2b94xq0x4y021v086sp5ifsh3g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/frameshot")
    (synopsis "Take screenshots of a frame")
    (description
      "Documentation at https://melpa.org/#/frameshot")
    (license #f)))

(define-public emacs-frecency
  (package
    (name "emacs-frecency")
    (version "20170909.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/frecency.el.git")
               (commit
                 "6d57aee131d96315aedf6cb7d6e5d6d09bf71503")))
        (sha256
          (base32
            "1hxjvfys5kqwvl21jj5sfb6bpqxdgdhsrniq821y324glc8s38xc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-a emacs-dash))
    (home-page
      "http://github.com/alphapapa/frecency.el")
    (synopsis
      "Library for sorting items by frequency and recency of access")
    (description
      "Documentation at https://melpa.org/#/frecency")
    (license #f)))

(define-public emacs-frecentf
  (package
    (name "emacs-frecentf")
    (version "20210330.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.launchpad.net/frecentf.el")
               (commit
                 "19e2c48a8b8c8ee8cae5c93b58b57a0aa81a8c46")))
        (sha256
          (base32
            "1gjzis2jshsq5sdi5rv3a29cmk4iv7y6k2awxlddq3biyf80ialb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-frecency emacs-persist emacs-async))
    (home-page "https://launchpad.net/frecentf.el")
    (synopsis "Pervasive recentf using frecency")
    (description
      "Documentation at https://melpa.org/#/frecentf")
    (license #f)))

(define-public emacs-freeradius-mode
  (package
    (name "emacs-freeradius-mode")
    (version "20190401.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/VersBinarii/freeradius-mode.git")
               (commit
                 "cf8bf0359cf6c77848facbd24b764b3e111b4c2d")))
        (sha256
          (base32
            "0ggkflx4lhyxqr7sgf1f3z0i3glmqyvl4bn16clh9ybl14q22rli"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/VersBinarii/freeradius-mode")
    (synopsis
      "major mode for FreeRadius server config files")
    (description
      "Documentation at https://melpa.org/#/freeradius-mode")
    (license #f)))

(define-public emacs-friendly-shell-command
  (package
    (name "emacs-friendly-shell-command")
    (version "20200527.830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-shell.git")
               (commit
                 "ad4ac00662829fa18858be02b322753ad091ffe3")))
        (sha256
          (base32
            "0xf71bvz4252y2jxkn9dpcmg5fvf9i049bbm8bvs7s9f6bcplba6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-with-shell-interpreter))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "friendly-shell.el"
            "friendly-remote-shell.el"))))
    (home-page
      "https://github.com/p3r7/friendly-shell")
    (synopsis "Better shell-command API")
    (description
      "Documentation at https://melpa.org/#/friendly-shell-command")
    (license #f)))

(define-public emacs-friendly-tramp-path
  (package
    (name "emacs-friendly-tramp-path")
    (version "20200502.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-tramp-path.git")
               (commit
                 "be572b8953b9e5a3a35c30bb64c2936d3e9802ba")))
        (sha256
          (base32
            "0w99py469ylkg9jg9fdxalv3axd57ld9rgwhgfy1r8rpp7xch7pn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/p3r7/prf-tramp")
    (synopsis
      "Human-friendly TRAMP path construction")
    (description
      "Documentation at https://melpa.org/#/friendly-tramp-path")
    (license #f)))

(define-public emacs-fuel
  (package
    (name "emacs-fuel")
    (version "20211221.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/factor/factor.git")
               (commit
                 "f93602c02915dc97014f77ffbdef778376002996")))
        (sha256
          (base32
            "0c8315a1hdvlbmz268hr2sdmswj34yha7y23ashv4l6n11dan5xs"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/fuel/*.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for the Factor programming language.")
    (description
      "Documentation at https://melpa.org/#/fuel")
    (license #f)))

(define-public emacs-fuff
  (package
    (name "emacs-fuff")
    (version "20170202.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joelmo/fuff.git")
               (commit
                 "278e849913df87bd8756c59382282d87474802c3")))
        (sha256
          (base32
            "12s25c0abvghkhfbxcf77d2dc20y3xn9df7mfk8mkfwnlwdss2ga"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joelmo/fuff")
    (synopsis
      "Find files with findutils, recursively")
    (description
      "Documentation at https://melpa.org/#/fuff")
    (license #f)))

(define-public emacs-full-ack
  (package
    (name "emacs-full-ack")
    (version "20140223.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/full-ack.git")
               (commit
                 "761d846e105b150f8e6d13d7a8983f0248313a45")))
        (sha256
          (base32
            "0bjny4ryrs788myhiaf3ir99vadf2v4swa5gkz9i36a7j6wzpgk5"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/full-ack/")
    (synopsis "a front-end for ack")
    (description
      "Documentation at https://melpa.org/#/full-ack")
    (license #f)))

(define-public emacs-fuz
  (package
    (name "emacs-fuz")
    (version "20200104.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rustify-emacs/fuz.el.git")
               (commit
                 "fee874aa35d2ee6b12b836290b5c8eaa44175a28")))
        (sha256
          (base32
            "1xswm8my29i4fddy64k21b1vclbr5fjb0pisb4hs8ynkk5w1kw2a"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("fuz*.el" "Cargo.toml" "Cargo.lock" "src")))
    (home-page "https://github.com/cireu/fuz.el")
    (synopsis
      "Fast and precise fuzzy scoring/matching utils")
    (description
      "Documentation at https://melpa.org/#/fuz")
    (license #f)))

(define-public emacs-gandalf-theme
  (package
    (name "emacs-gandalf-theme")
    (version "20130809.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/gandalf-theme-emacs.git")
               (commit
                 "4e472fc851431458537d458d09c1f5895e338536")))
        (sha256
          (base32
            "0sn3y1ilbg532mg941qmzipvzq86q31x86ypaf0h0m4015r7l59v"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Gandalf color theme")
    (description
      "Documentation at https://melpa.org/#/gandalf-theme")
    (license #f)))

(define-public emacs-gap-mode
  (package
    (name "emacs-gap-mode")
    (version "20191110.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gvol/gap-mode.git")
               (commit
                 "62adb8935033eead7fbf2c107c2dfb79afa53c67")))
        (sha256
          (base32
            "1rhhls2ylc2jg3mman3zq0mknmmwhll09d9dxrqmk5262d2f7vw4"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "emacs.gaprc")))
    (home-page "https://gitlab.com/gvol/gap-mode")
    (synopsis
      "Major mode for editing files in the GAP programing language.")
    (description
      "Documentation at https://melpa.org/#/gap-mode")
    (license #f)))

(define-public emacs-geben
  (package
    (name "emacs-geben")
    (version "20210830.422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/geben.git")
               (commit
                 "d3706387ed25b3037338572f3968b4cc2d8825a0")))
        (sha256
          (base32
            "05kvg13mknn4xgzik637kgg5qa7qhz3626v2ny2p86lga1pzm3yq"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ahungry/geben")
    (synopsis
      "DBGp protocol frontend, a script debugger")
    (description
      "Documentation at https://melpa.org/#/geben")
    (license #f)))

(define-public emacs-geben-helm-projectile
  (package
    (name "emacs-geben-helm-projectile")
    (version "20160611.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/geben-helm-projectile.git")
               (commit
                 "31ce0faca5dcc71924884f03fd5a7a25d00ccd9b")))
        (sha256
          (base32
            "0a1srhwfbgkvndjfi9irg5s6snlxyqrw1vwyqg1sn8aqnbpgib04"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-geben emacs-helm-projectile))
    (home-page
      "https://github.com/ahungry/geben-helm-projectile")
    (synopsis "Integrate helm-projectile with geben")
    (description
      "Documentation at https://melpa.org/#/geben-helm-projectile")
    (license #f)))

(define-public emacs-geiser
  (package
    (name "emacs-geiser")
    (version "20211222.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/geiser.git")
               (commit
                 "d4bfb82612e44de893bf4fcc702eaa360ae9128a")))
        (sha256
          (base32
            "19if1n2wx1i6mjslh3s2cnb261xjn25w2yll1hk4fdq4afbwbzbs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient))
    (arguments
      '(#:files
        ("elisp/*.el" "doc/dir" "doc/geiser.texi")))
    (home-page "https://gitlab.com/emacs-geiser/")
    (synopsis
      "GNU Emacs and Scheme talk to each other")
    (description
      "Documentation at https://melpa.org/#/geiser")
    (license #f)))

(define-public emacs-geiser-chez
  (package
    (name "emacs-geiser-chez")
    (version "20211216.2332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/chez.git")
               (commit
                 "48427d4aecc6fed751d266673f1ce2ad57ddbcfc")))
        (sha256
          (base32
            "03fc9ahb0pmznkcnxzgpni4clj1zgky6vaqkc94nf8b8swniwkm9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/chez")
    (synopsis
      "Chez Scheme's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-chez")
    (license #f)))

(define-public emacs-geiser-chibi
  (package
    (name "emacs-geiser-chibi")
    (version "20211204.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/chibi.git")
               (commit
                 "5a6a5a580ea45cd4974df21629a8d50cbe3d6e99")))
        (sha256
          (base32
            "071m2cvwanra9rd8vmybw8xd4k9a23x02cyy12f7qyjy5fp9s968"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/chibi")
    (synopsis
      "Chibi Scheme's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-chibi")
    (license #f)))

(define-public emacs-geiser-gambit
  (package
    (name "emacs-geiser-gambit")
    (version "20211204.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/gambit.git")
               (commit
                 "faff8bac11621228640a3107622fe23df4bb6e2c")))
        (sha256
          (base32
            "1v736wh19yma3vjpgb2s1n77rrl5i3n8x451kq3cadsch0wid31d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/gambit")
    (synopsis
      "Gambit's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-gambit")
    (license #f)))

(define-public emacs-gemini-write
  (package
    (name "emacs-gemini-write")
    (version "20211114.1032")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/gemini-write-"
               version
               ".el"))
        (sha256
          (base32
            "0ix38nnhcajpjxsvbryw0pb006jswgjpx8rb9flsxmszj4dg6fdv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elpher emacs-gemini-mode))
    (home-page
      "https://alexschroeder.ch/cgit/gemini-write")
    (synopsis "Elpher for Titan")
    (description
      "Documentation at https://melpa.org/#/gemini-write")
    (license #f)))

(define-public emacs-general
  (package
    (name "emacs-general")
    (version "20211203.120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/general.el.git")
               (commit
                 "9651024e7f40a8ac5c3f31f8675d3ebe2b667344")))
        (sha256
          (base32
            "01zfd8akm048gh4kbb6a4zxhd8gbambyi2sji47f022f9skmn3ys"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/noctuid/general.el")
    (synopsis
      "Convenience wrappers for keybindings.")
    (description
      "Documentation at https://melpa.org/#/general")
    (license #f)))

(define-public emacs-ggtags
  (package
    (name "emacs-ggtags")
    (version "20211020.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoliu/ggtags.git")
               (commit
                 "8e16861392d7499bf3a212db1f5e9e0ef2e4fba9")))
        (sha256
          (base32
            "01fhc6cc13i9nvyl3d692s0fsyymr6vjxqpj7ydxsh489nw7hj4a"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/leoliu/ggtags")
    (synopsis
      "emacs frontend to GNU Global source code tagging system")
    (description
      "Documentation at https://melpa.org/#/ggtags")
    (license #f)))

(define-public emacs-ghc-imported-from
  (package
    (name "emacs-ghc-imported-from")
    (version "20141124.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/ghc-imported-from-el.git")
               (commit
                 "fcff08628a19f5d26151564659218cc677779b79")))
        (sha256
          (base32
            "1ywwyc2kz1c1s26c412nmzh55cinh84cfiazyyi3jsy5zzwhrbhi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Haskell documentation lookup with ghc-imported-from")
    (description
      "Documentation at https://melpa.org/#/ghc-imported-from")
    (license #f)))

(define-public emacs-ghost-blog
  (package
    (name "emacs-ghost-blog")
    (version "20171023.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/javaguirre/ghost-blog-emacs.git")
               (commit
                 "71b358643cc9a2db1bf752281ff94aba9b59e4cc")))
        (sha256
          (base32
            "1fkh7zslkdi7a4x2xrk73acmigbi7yx9k6iaj75zbjfd49gyqj13"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page
      "https://github.com/javaguirre/ghost-blog")
    (synopsis "A package to manage Ghost blog")
    (description
      "Documentation at https://melpa.org/#/ghost-blog")
    (license #f)))

(define-public emacs-ghub+
  (package
    (name "emacs-ghub+")
    (version "20191229.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/ghub-plus.git")
               (commit
                 "b1adef2402d7599911d4dd447a987a0cea04e6fe")))
        (sha256
          (base32
            "0bzri6s5mwvgir9smkz68d5cgcf4glpdmcj8dz8rjxziwrg6k5bz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ghub emacs-apiwrap))
    (home-page
      "https://github.com/vermiculus/ghub-plus")
    (synopsis
      "a thick GitHub API client built on ghub")
    (description
      "Documentation at https://melpa.org/#/ghub+")
    (license #f)))

(define-public emacs-gif-screencast
  (package
    (name "emacs-gif-screencast")
    (version "20210401.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/Ambrevar/emacs-gif-screencast.git")
               (commit
                 "5517a557a17d8016c9e26b0acb74197550f829b9")))
        (sha256
          (base32
            "0n0gd4k1c1s8xj7p1yg7irnkaxw9f91jmjp5www5hrwhi3mbmpb8"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ambrevar/emacs-gif-screencast")
    (synopsis "One-frame-per-action GIF recording")
    (description
      "Documentation at https://melpa.org/#/gif-screencast")
    (license #f)))

(define-public emacs-gildas-mode
  (package
    (name "emacs-gildas-mode")
    (version "20181022.649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smaret/gildas-mode.git")
               (commit
                 "d0c9e997e2aa0bcd9b8b7db082d69100448cb1b2")))
        (sha256
          (base32
            "11290b6daly9nn73iw0s6386hzjk3q2iywdhiazxscxaxzhx2c8c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/smaret/gildas-mode")
    (synopsis "Major mode for Gildas")
    (description
      "Documentation at https://melpa.org/#/gildas-mode")
    (license #f)))

(define-public emacs-gist
  (package
    (name "emacs-gist")
    (version "20171128.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/defunkt/gist.el.git")
               (commit
                 "314fe6ab80fae35b95f0734eceb82f72813b6f41")))
        (sha256
          (base32
            "0vbyzww9qmsvdpdc6d6wq6drlq1r9y92807fjhs0frgzmq6dg0rh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gh))
    (home-page "https://github.com/defunkt/gist.el")
    (synopsis
      "Emacs integration for gist.github.com")
    (description
      "Documentation at https://melpa.org/#/gist")
    (license #f)))

(define-public emacs-git-annex
  (package
    (name "emacs-git-annex")
    (version "20190625.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/git-annex-el.git")
               (commit
                 "1324d3f23c534fe79391a2c256bb8803054e383b")))
        (sha256
          (base32
            "1lfky2nsrlndlbvk6vwbswnvbvkz1sxgg0n3r5q6xykdkjym0lrh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/git-annex-el")
    (synopsis
      "Mode for easy editing of git-annex'd files")
    (description
      "Documentation at https://melpa.org/#/git-annex")
    (license #f)))

(define-public emacs-git-assembler-mode
  (package
    (name "emacs-git-assembler-mode")
    (version "20210207.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/git-assembler-mode.el.git")
               (commit
                 "1243bdc1a9cdc79802ece05c90731ee14e4f92c9")))
        (sha256
          (base32
            "1rc8z2r8lxzx836j7nk61snps8r0szzifg0inzfv3nb2z8bsiw0b"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/git-assembler-mode.el")
    (synopsis "git-assembler major mode")
    (description
      "Documentation at https://melpa.org/#/git-assembler-mode")
    (license #f)))

(define-public emacs-git-dwim
  (package
    (name "emacs-git-dwim")
    (version "20170126.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/emacs-git-dwim.git")
               (commit
                 "485c732130686c2f28a026e385366006435394b9")))
        (sha256
          (base32
            "0rcrsjx4ifa9y3rd5l4498kvqkh58zx21gl7mqp053jdsqqq1yrx"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el")
    (synopsis
      "Context-aware git commands such as branch handling")
    (description
      "Documentation at https://melpa.org/#/git-dwim")
    (license #f)))

(define-public emacs-git-gutter-fringe+
  (package
    (name "emacs-git-gutter-fringe+")
    (version "20140729.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nonsequitur/git-gutter-fringe-plus.git")
               (commit
                 "7a2f49d2455a3a872e90e5f7dd4e6b27f1d96cfc")))
        (sha256
          (base32
            "1rsj193zpblndki4khjjlwl2njxb329d42l75ki55msxifqrn4fi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git-gutter+ emacs-fringe-helper))
    (arguments '(#:files ("git-gutter-fringe+.el")))
    (home-page
      "https://github.com/nonsequitur/git-gutter-fringe-plus")
    (synopsis "Fringe version of git-gutter+.el")
    (description
      "Documentation at https://melpa.org/#/git-gutter-fringe+")
    (license #f)))

(define-public emacs-git-io
  (package
    (name "emacs-git-io")
    (version "20180317.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tejasbubane/emacs-git-io.git")
               (commit
                 "48753acba73b48b997bb678fb5e2a938ae63b5d6")))
        (sha256
          (base32
            "1zw24j6l0ap761q1knxjaxzdfz11kmfq29aag5av4n87m86rxzr8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tejasbubane/emacs-git-io")
    (synopsis "git.io integration")
    (description
      "Documentation at https://melpa.org/#/git-io")
    (license #f)))

(define-public emacs-github-dark-vscode-theme
  (package
    (name "emacs-github-dark-vscode-theme")
    (version "20211122.1800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justintime50/github-dark-vscode-emacs-theme.git")
               (commit
                 "092324ecb9c0909da2ba2751cb21a994b4e09536")))
        (sha256
          (base32
            "1zr116c9zphm5kgacqxmll7gzd1h5583xy0asg46dzyn4gn0bmhv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justintime50/github-dark-vscode-emacs-theme")
    (synopsis
      "The GitHub Dark Theme from Visual Studio Code")
    (description
      "Documentation at https://melpa.org/#/github-dark-vscode-theme")
    (license #f)))

(define-public emacs-github-review
  (package
    (name "emacs-github-review")
    (version "20211029.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/charignon/github-review.git")
               (commit
                 "725fbc7b385228f53a7ddc46a92c1276bab4aea8")))
        (sha256
          (base32
            "1261p65wlpl9s5xqq1jfnkj7hrn27a4bn85rxc3allqdl5hc63hd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-ghub
            emacs-dash
            emacs-deferred
            emacs-a))
    (home-page
      "https://github.com/charignon/github-review")
    (synopsis "GitHub based code review")
    (description
      "Documentation at https://melpa.org/#/github-review")
    (license #f)))

(define-public emacs-github-stars
  (package
    (name "emacs-github-stars")
    (version "20190517.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/github-stars.el.git")
               (commit
                 "a9f25ab2487c886f5d50d26693d49856bd51383b")))
        (sha256
          (base32
            "1wp1zfwa4ai0771pkmcsybw8z8zwbwmqazm9fszyg8dsdns5wz2f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ghub))
    (home-page
      "https://github.com/xuchunyang/github-stars.el")
    (synopsis "Browse your Github Stars")
    (description
      "Documentation at https://melpa.org/#/github-stars")
    (license #f)))

(define-public emacs-gitignore-snippets
  (package
    (name "emacs-gitignore-snippets")
    (version "20201118.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/gitignore-snippets.git")
               (commit
                 "0de6945ff0fc6943eebcf92d1cbb66b6a1d8fa60")))
        (sha256
          (base32
            "07qrlyb0n9h3r3b9lvqbd1fi97g3xb27836lgbdpphvvyw92975q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/sei40kr/gitignore-snippets")
    (synopsis "Gitignore.io templates for Yasnippet")
    (description
      "Documentation at https://melpa.org/#/gitignore-snippets")
    (license #f)))

(define-public emacs-gitignore-templates
  (package
    (name "emacs-gitignore-templates")
    (version "20210814.144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/gitignore-templates.el.git")
               (commit
                 "d28cd1cec00242b688861648d36d086818b06099")))
        (sha256
          (base32
            "0x4pg4jpgmbvfw854ps9w3xgp8bgm7n7vmcvk3kp7h2s56l8s2xb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/gitignore-templates.el")
    (synopsis
      "Create .gitignore using GitHub or gitignore.io API")
    (description
      "Documentation at https://melpa.org/#/gitignore-templates")
    (license #f)))

(define-public emacs-gitlab-ci-mode-flycheck
  (package
    (name "emacs-gitlab-ci-mode-flycheck")
    (version "20190323.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/joewreschnig/gitlab-ci-mode-flycheck.git")
               (commit
                 "eba81cfb7224fd1fa4e4da90d11729cc7ea12f72")))
        (sha256
          (base32
            "1w1simnlffg56j79gal1qf1nlav9f8fmr2zfswfrmcv6cac6fhj9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-gitlab-ci-mode))
    (home-page
      "https://gitlab.com/joewreschnig/gitlab-ci-mode-flycheck/")
    (synopsis
      "Flycheck support for ‘gitlab-ci-mode’")
    (description
      "Documentation at https://melpa.org/#/gitlab-ci-mode-flycheck")
    (license #f)))

(define-public emacs-gitpatch
  (package
    (name "emacs-gitpatch")
    (version "20170722.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/gitpatch.git")
               (commit
                 "577d5adf65c8133caa325c10e89e1e2fc323c907")))
        (sha256
          (base32
            "1jj12pjwza6cq8a3kr8nqnmm3vxs0wam8h983irry4xr4ifywsn4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/gitpatch")
    (synopsis "Git-format patch toolkit")
    (description
      "Documentation at https://melpa.org/#/gitpatch")
    (license #f)))

(define-public emacs-gitter
  (package
    (name "emacs-gitter")
    (version "20180122.856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/gitter.el.git")
               (commit
                 "11cb9b4b45f67bdc24f055a9bfac21d2bd19ea1a")))
        (sha256
          (base32
            "14ri86kxqz9qfhcr0bkgfyggy4bgg9imk9akhw6dfzqkl90gn2gy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/gitter.el")
    (synopsis "An Emacs Gitter client")
    (description
      "Documentation at https://melpa.org/#/gitter")
    (license #f)))

(define-public emacs-glsl-mode
  (package
    (name "emacs-glsl-mode")
    (version "20210808.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimhourihan/glsl-mode.git")
               (commit
                 "9b2e5f28e489a1f73c4aed734105618ac0dc0c43")))
        (sha256
          (base32
            "101y46bdxxgp58li66pwqn6c3skww72gkfmhxpps2v2ijxcvqkl9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimhourihan/glsl-mode")
    (synopsis
      "major mode for Open GLSL shader files")
    (description
      "Documentation at https://melpa.org/#/glsl-mode")
    (license #f)))

(define-public emacs-gnomenm
  (package
    (name "emacs-gnomenm")
    (version "20150316.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-nm.git")
               (commit
                 "9065cda44ffc9e06239b8189a0154d31314c3b4d")))
        (sha256
          (base32
            "1svnvm9fqqx4mrk9jjn11pzqwk71w8kyyd9wwxam8gz22ykw5jb2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-kv))
    (home-page
      "http://github.com/nicferrier/emacs-nm")
    (synopsis
      "Emacs interface to Gnome nmcli command")
    (description
      "Documentation at https://melpa.org/#/gnomenm")
    (license #f)))

(define-public emacs-gnu-apl-mode
  (package
    (name "emacs-gnu-apl-mode")
    (version "20211012.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lokedhs/gnu-apl-mode.git")
               (commit
                 "5d998206a963f2205dc6c4eddb41fb34187cb527")))
        (sha256
          (base32
            "1yzyq8k770j78f2gkkr1n1d5jpdfmj9l3w40pjd7fmn94xg3qw9a"))))
    (build-system melpa-build-system)
    (home-page "http://www.gnu.org/software/apl/")
    (synopsis "Integrate GNU APL with Emacs")
    (description
      "Documentation at https://melpa.org/#/gnu-apl-mode")
    (license #f)))

(define-public emacs-gnus-alias
  (package
    (name "emacs-gnus-alias")
    (version "20150316.42")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/gnus-alias.git")
               (commit
                 "9447d3ccb4c0e75d0468899cccff7aa249657bac")))
        (sha256
          (base32
            "1i278npayv3kfxxd1ypi9n83q5l402sbc1zkm11pf8g006ifqsp4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "an alternative to gnus-posting-styles")
    (description
      "Documentation at https://melpa.org/#/gnus-alias")
    (license #f)))

(define-public emacs-gnus-notes
  (package
    (name "emacs-gnus-notes")
    (version "20210207.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deusmax/gnus-notes.git")
               (commit
                 "1457bba34b40d5197aa14dbf0856925f83025ae1")))
        (sha256
          (base32
            "01jm2maa8q0zjpqa95c84k9b9jx5rgwvvhaqbwvw8ccz883mcdjm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bbdb
            emacs-helm
            emacs-hydra
            emacs-s
            emacs-lv
            emacs-async))
    (home-page
      "https://github.com/deusmax/gnus-notes")
    (synopsis
      "Keep handy notes of read Gnus articles with helm and org")
    (description
      "Documentation at https://melpa.org/#/gnus-notes")
    (license #f)))

(define-public emacs-gnus-recent
  (package
    (name "emacs-gnus-recent")
    (version "20210920.902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/gnus-recent.git")
               (commit
                 "dfa0e687601e78d6be82530413cb00edb1a39889")))
        (sha256
          (base32
            "021rq3qp3544abqzr8cdsblpqh8yh2ss3f9gsf5sifckz7127h0s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("gnus-recent.el")))
    (home-page
      "https://github.com/unhammer/gnus-recent")
    (synopsis "Article breadcrumbs for Gnus")
    (description
      "Documentation at https://melpa.org/#/gnus-recent")
    (license #f)))

(define-public emacs-gnus-select-account
  (package
    (name "emacs-gnus-select-account")
    (version "20170722.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/gnus-select-account.git")
               (commit
                 "ddc8c135eeaf90f5b6692a033af2badae36e68ce")))
        (sha256
          (base32
            "0csq8cqv028g3mrvk88l0nlj3dk5fh67c10hdjwvxbf7winv0391"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/gnus-select-account")
    (synopsis
      "Select an account before writing a mail in gnus")
    (description
      "Documentation at https://melpa.org/#/gnus-select-account")
    (license #f)))

(define-public emacs-gnus-summary-ext
  (package
    (name "emacs-gnus-summary-ext")
    (version "20180113.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/gnus-summary-ext.git")
               (commit
                 "025fd853fe9280ae696a89ec2c2cac9befd010aa")))
        (sha256
          (base32
            "07ww2nc03daz70f2ajw7b2gin22xa306001zclhrxkm1cpjif2fi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/gnus-summary-ext")
    (synopsis
      "Extra limit and process mark commands for the gnus summary buffer")
    (description
      "Documentation at https://melpa.org/#/gnus-summary-ext")
    (license #f)))

(define-public emacs-gnus-summary-repo
  (package
    (name "emacs-gnus-summary-repo")
    (version "20190617.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/gnus-summary-repo.git")
               (commit
                 "d0cb218fea13563c1b2bfba3e72716fb860f767c")))
        (sha256
          (base32
            "1ljbgksdnqkgh5m41l95lir5l53r1q1j1rz5nlvhhdv1jlxp19q7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TxGVNN/gnus-summary-repo")
    (synopsis
      "Import and export files between IMAP and local by using GNUS")
    (description
      "Documentation at https://melpa.org/#/gnus-summary-repo")
    (license #f)))

(define-public emacs-go-gopath
  (package
    (name "emacs-go-gopath")
    (version "20160705.1034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iced/go-gopath.git")
               (commit
                 "5172fc53f21edbf9347d5ee7d1d745da1ec88a15")))
        (sha256
          (base32
            "0gqb3k33y42gchc89rw3k1pvb7ai9ka50ljfd4avk31fdpr4dln5"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/iced/go-gopath/")
    (synopsis
      "Will guess GOPATH using gb and projectile.")
    (description
      "Documentation at https://melpa.org/#/go-gopath")
    (license #f)))

(define-public emacs-go-impl
  (package
    (name "emacs-go-impl")
    (version "20210621.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/go-impl.git")
               (commit
                 "1eebba6ccd02d11a5a82ad4540a8d562797bc3b3")))
        (sha256
          (base32
            "1i48vawn2a76bdbvv02mw7c5ny7g8dxk6b6xw2y9z0iijmbr0dzl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/syohex/emacs-go-impl")
    (synopsis "impl integration for go-mode")
    (description
      "Documentation at https://melpa.org/#/go-impl")
    (license #f)))

(define-public emacs-go-imports
  (package
    (name "emacs-go-imports")
    (version "20190715.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasushi-saito/go-imports.git")
               (commit
                 "55681e815da93b6f927213c4aa352ae33db97c37")))
        (sha256
          (base32
            "12xgkhc5nqrj5x306ninysyd78dwa3p3bvf69qqi2g0a9ngl8d3x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "find-packages.pl")))
    (home-page
      "https://github.com/yasushi-saito/go-imports")
    (synopsis
      "Insert go import statement given package name")
    (description
      "Documentation at https://melpa.org/#/go-imports")
    (license #f)))

(define-public emacs-go-projectile
  (package
    (name "emacs-go-projectile")
    (version "20200609.131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dougm/go-projectile.git")
               (commit
                 "ad4ca3b5695a0e31e95e3cc4ccab498f87d68303")))
        (sha256
          (base32
            "1ai34z7n56cczz6qb0vbcrqbjrkmxwv9r928pjbw58812nycj1mh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-go-mode
            emacs-go-eldoc
            emacs-go-rename
            emacs-go-guru
            emacs-dash))
    (home-page
      "https://github.com/dougm/go-projectile")
    (synopsis "Go add-ons for Projectile")
    (description
      "Documentation at https://melpa.org/#/go-projectile")
    (license #f)))

(define-public emacs-go-rename
  (package
    (name "emacs-go-rename")
    (version "20190805.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dominikh/go-mode.el.git")
               (commit
                 "5bd8efab64352dccf31dbc99c4fc96d3b985ef27")))
        (sha256
          (base32
            "0j430sd72pkh00773yqrg1jllli9yccdf645yxrxsf3n3k95s603"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (arguments '(#:files ("go-rename.el")))
    (home-page "unspecified")
    (synopsis
      "Integration of the 'gorename' tool into Emacs.")
    (description
      "Documentation at https://melpa.org/#/go-rename")
    (license #f)))

(define-public emacs-go-stacktracer
  (package
    (name "emacs-go-stacktracer")
    (version "20150430.2142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samertm/go-stacktracer.el.git")
               (commit
                 "a2ac6d801b389f80ca4e2fcc1ab44513a9e55976")))
        (sha256
          (base32
            "0n5nsyfwx2pdlwx6bl35wrfyady5dwraimv92f58mhc344ajd70y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/samertm/go-stacktracer.el")
    (synopsis "parse Go stack traces")
    (description
      "Documentation at https://melpa.org/#/go-stacktracer")
    (license #f)))

(define-public emacs-godoctor
  (package
    (name "emacs-godoctor")
    (version "20180710.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/microamp/godoctor.el.git")
               (commit
                 "4b45ff3d0572f0e84056e4c3ba91fcc178199859")))
        (sha256
          (base32
            "12gga1ghc54r6f2adyaq30hm2yxspvgg54zd4k82c3d6cj51qwci"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/microamp/godoctor.el")
    (synopsis "Frontend for godoctor")
    (description
      "Documentation at https://melpa.org/#/godoctor")
    (license #f)))

(define-public emacs-goldendict
  (package
    (name "emacs-goldendict")
    (version "20201108.201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/goldendict.el.git")
               (commit
                 "700f60be192f4d46787e7f009637c15567064f2a")))
        (sha256
          (base32
            "0nn7ilprx465r5yx0q11vghq3cv0a269jzz3q1p1vwllwfj0f31x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stardiviner/goldendict.el")
    (synopsis
      "query word smartly with goldendict.el")
    (description
      "Documentation at https://melpa.org/#/goldendict")
    (license #f)))

(define-public emacs-golint
  (package
    (name "emacs-golint")
    (version "20180221.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/golang/lint.git")
               (commit
                 "6edffad5e6160f5949cdefc81710b2706fbcd4f6")))
        (sha256
          (base32
            "1n7lrr3282q3li4f06afms444qy13rfd316za0drqihakwyki2jk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/emacs/*.el")))
    (home-page "https://github.com/golang/lint")
    (synopsis "lint for the Go source code")
    (description
      "Documentation at https://melpa.org/#/golint")
    (license #f)))

(define-public emacs-good-scroll
  (package
    (name "emacs-good-scroll")
    (version "20211101.942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/io12/good-scroll.el.git")
               (commit
                 "a7ffd5c0e5935cebd545a0570f64949077f71ee3")))
        (sha256
          (base32
            "0f1zs3fjz5yc25qjka5g60018554ssdbp4j7xj275pmzrc78915w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/io12/good-scroll.el")
    (synopsis "Good pixel line scrolling")
    (description
      "Documentation at https://melpa.org/#/good-scroll")
    (license #f)))

(define-public emacs-google-c-style
  (package
    (name "emacs-google-c-style")
    (version "20180130.1736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/styleguide.git")
               (commit
                 "842b872ac4da18dda02b797976ea12fd7d84768f")))
        (sha256
          (base32
            "09bxbm59fbqjqcmsmnqg74yzzmi92h9b2z4r62x5hpz625045mhg"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Google's C/C++ style for c-mode")
    (description
      "Documentation at https://melpa.org/#/google-c-style")
    (license #f)))

(define-public emacs-google-contacts
  (package
    (name "emacs-google-contacts")
    (version "20201012.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/google-contacts.el.git")
               (commit
                 "8923c238fe0906184d2254b33ba72792ed12cd47")))
        (sha256
          (base32
            "0s07bcd1d9z9y0cl68baikcf3b781r4r1xi04yyi65l25ds36pg3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-oauth2))
    (home-page
      "https://github.com/jd/google-contacts.el")
    (synopsis "Support for Google Contacts in Emacs")
    (description
      "Documentation at https://melpa.org/#/google-contacts")
    (license #f)))

(define-public emacs-gore-mode
  (package
    (name "emacs-gore-mode")
    (version "20151123.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergey-pashaev/gore-mode.git")
               (commit
                 "94d7f3e99104e06167967c98fdc201049c433c2d")))
        (sha256
          (base32
            "0l022aqpnb38q6kgdqpbxrc1r7fljwl7xq14yi5jb7qgzw2v43cz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page "unspecified")
    (synopsis
      "Simple mode for gore, a command-line evaluator for golang.")
    (description
      "Documentation at https://melpa.org/#/gore-mode")
    (license #f)))

(define-public emacs-gotest
  (package
    (name "emacs-gotest")
    (version "20210221.1905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/gotest.el.git")
               (commit
                 "9b1dc4eba1b22d751cb2f0a12e29912e010fac60")))
        (sha256
          (base32
            "0693fcli1nv9mn60gh30xspwiwhab8vxf09i1s9yxs80ai712i12"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-go-mode))
    (home-page
      "https://github.com/nlamirault/gotest.el")
    (synopsis "Launch GO unit tests")
    (description
      "Documentation at https://melpa.org/#/gotest")
    (license #f)))

(define-public emacs-govet
  (package
    (name "emacs-govet")
    (version "20170808.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meshelton/govet.git")
               (commit
                 "1c05817cf8b96589076c7ac4e52ee58a860a0cbf")))
        (sha256
          (base32
            "1n223i87xmk8p8h8dswnhhvazy0z53dzl36gmk9y7ck8bd9vz706"))))
    (build-system melpa-build-system)
    (home-page
      "https://godoc.org/golang.org/x/tools/cmd/vet")
    (synopsis
      "linter/problem finder for the Go source code")
    (description
      "Documentation at https://melpa.org/#/govet")
    (license #f)))

(define-public emacs-gpastel
  (package
    (name "emacs-gpastel")
    (version "20181229.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/gpastel.git")
               (commit
                 "d5fc55bc825203f998537c5834718e665bb87c29")))
        (sha256
          (base32
            "1ggyd2jy7j3kvqsdxbfcsk41r3d31b8bcyncwglm9m1dh4vx5qsr"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.petton.fr/DamienCassou/desktop-environment")
    (synopsis "Integrates GPaste with the kill-ring")
    (description
      "Documentation at https://melpa.org/#/gpastel")
    (license #f)))

(define-public emacs-grammarly
  (package
    (name "emacs-grammarly")
    (version "20211027.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/grammarly.git")
               (commit
                 "38d5c0384e90d577c4c657110fe4ef2d76b6146a")))
        (sha256
          (base32
            "0dxds8w213ad4czw5mrrb8a2i41jwsvrphy797lln5j7h404gs07"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-request emacs-websocket))
    (home-page
      "https://github.com/emacs-grammarly/grammarly")
    (synopsis "Grammarly API interface")
    (description
      "Documentation at https://melpa.org/#/grammarly")
    (license #f)))

(define-public emacs-grandshell-theme
  (package
    (name "emacs-grandshell-theme")
    (version "20180606.517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/grandshell-theme.git")
               (commit
                 "0ed8e4273607dd4fcaa742b4097259233b09eda6")))
        (sha256
          (base32
            "04vx5p1ffln5b9rxgfi15q735plxcjvskby3c5k4slgwf4p91bpq"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/grandshell-theme")
    (synopsis
      "Dark color theme for Emacs > 24 with intensive colors.")
    (description
      "Documentation at https://melpa.org/#/grandshell-theme")
    (license #f)))

(define-public emacs-graphql
  (package
    (name "emacs-graphql")
    (version "20180912.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/graphql.el.git")
               (commit
                 "5ca5f50b5e6f3883f1138453a356d59a1c002120")))
        (sha256
          (base32
            "0wh0f49574zdv0r7zdhckv4jr3ggwzlgyxda0y0hxw8vabzvavw6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("graphql.el")))
    (home-page
      "https://github.com/vermiculus/graphql.el")
    (synopsis "GraphQL utilities")
    (description
      "Documentation at https://melpa.org/#/graphql")
    (license #f)))

(define-public emacs-graphql-mode
  (package
    (name "emacs-graphql-mode")
    (version "20211127.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davazp/graphql-mode.git")
               (commit
                 "9740e4027bd9313697d5cac5caaa5b15626ab1da")))
        (sha256
          (base32
            "0rsa38fiiwzvxln4g5xvrsggm9mslw58iw3cx5c07y6kasfqfibb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davazp/graphql-mode")
    (synopsis
      "Major mode for editing GraphQL schemas")
    (description
      "Documentation at https://melpa.org/#/graphql-mode")
    (license #f)))

(define-public emacs-grass-mode
  (package
    (name "emacs-grass-mode")
    (version "20170503.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plantarum/grass-mode.git")
               (commit
                 "8a7e9dcb2295eef1ec25d886b05e09c876bd8398")))
        (sha256
          (base32
            "023s9kn012z6m4aprsq77zv4kvfvwfics5gcdja7ig4xwqqrzymq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Provides Emacs modes for interacting with the GRASS GIS program")
    (description
      "Documentation at https://melpa.org/#/grass-mode")
    (license #f)))

(define-public emacs-green-phosphor-theme
  (package
    (name "emacs-green-phosphor-theme")
    (version "20150515.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aalpern/emacs-color-theme-green-phosphor.git")
               (commit
                 "fa42f598626adfdc5450e5c380fa2d5df6110f28")))
        (sha256
          (base32
            "0rgv96caigcjffg1983274p4ff1icx1xh5bj7rcd53hai5ag16mp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aalpern/emacs-color-theme-green-phosphor")
    (synopsis
      "A light color theme with muted, autumnal colors.")
    (description
      "Documentation at https://melpa.org/#/green-phosphor-theme")
    (license #f)))

(define-public emacs-grep-a-lot
  (package
    (name "emacs-grep-a-lot")
    (version "20210618.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ZungBang/emacs-grep-a-lot.git")
               (commit
                 "223819dbea049bdeb5f97f9849fce139a5f16a75")))
        (sha256
          (base32
            "06rrbwb5ms2m3mhsg1l4hqnn7x379019kkdfm8gys5kxv4mfp22l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ZungBang/emacs-grep-a-lot")
    (synopsis
      "manages multiple search results buffers for grep.el")
    (description
      "Documentation at https://melpa.org/#/grep-a-lot")
    (license #f)))

(define-public emacs-greymatters-theme
  (package
    (name "emacs-greymatters-theme")
    (version "20150621.1123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/greymatters-theme.git")
               (commit
                 "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1")))
        (sha256
          (base32
            "14c09m9p6556rrf0qfad4zsv7qxa5flamzg6fa83cxh0qfg7wjbp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/greymatters-theme")
    (license #f)))

(define-public emacs-grip-mode
  (package
    (name "emacs-grip-mode")
    (version "20211203.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/grip-mode.git")
               (commit
                 "5be9942e8f76ebc8b55bcc1a29fb01277cb43743")))
        (sha256
          (base32
            "1a4hq8n7v1310v4fr04fpbx22rfb3dbiini091fk7kcpj21f5x5b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/seagle0128/grip-mode")
    (synopsis
      "Instant GitHub-flavored Markdown/Org preview using grip.")
    (description
      "Documentation at https://melpa.org/#/grip-mode")
    (license #f)))

(define-public emacs-grizzl
  (package
    (name "emacs-grizzl")
    (version "20160818.737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grizzl/grizzl.git")
               (commit
                 "1e917253ce2b846f0272b8356fad3dbff9cd513a")))
        (sha256
          (base32
            "1hw932zvhyxajdgd0h18vr3w0sr0vp4334phlr1aysv7rjfgnpkr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/grizzl/grizzl")
    (synopsis "Fast fuzzy search index for Emacs.")
    (description
      "Documentation at https://melpa.org/#/grizzl")
    (license #f)))

(define-public emacs-gsettings
  (package
    (name "emacs-gsettings")
    (version "20210407.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-gsettings.git")
               (commit
                 "9f9fb1fe946bbba46307c26355f355225ea7262a")))
        (sha256
          (base32
            "1pq18kz6dqk45ib70sch38ql63smpv7s80ik478ajjysks3882rc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-gvariant emacs-s))
    (home-page
      "https://github.com/wbolster/emacs-gsettings")
    (synopsis "GSettings (Gnome) helpers")
    (description
      "Documentation at https://melpa.org/#/gsettings")
    (license #f)))

(define-public emacs-gsnip
  (package
    (name "emacs-gsnip")
    (version "20200928.357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaiwk/gsnip.git")
               (commit
                 "c8bff61b10cd33de9d6f5fd84e4b27f48c772304")))
        (sha256
          (base32
            "0lw1psy1258vbvnl4j918hkzwqa65g94azbq84fvf2lgv4lbvgln"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-aio emacs-log4e))
    (home-page
      "https://github.com/kaiwk/gitlab-snippet")
    (synopsis "A gitlab snippet client")
    (description
      "Documentation at https://melpa.org/#/gsnip")
    (license #f)))

(define-public emacs-gtk-variant
  (package
    (name "emacs-gtk-variant")
    (version "20200416.2136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bepvte/gtk-variant.el.git")
               (commit
                 "e0653e4a654b7800dc15f7e1a06a956b77d2aabe")))
        (sha256
          (base32
            "0aclxzxsh0ixibnw86d8gcyq5yzbfqzmz02rh2djk7l27yg50f10"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bepvte/gtk-variant.el")
    (synopsis
      "Set the GTK theme variant (titlebar color)")
    (description
      "Documentation at https://melpa.org/#/gtk-variant")
    (license #f)))

(define-public emacs-guide-key
  (package
    (name "emacs-guide-key")
    (version "20150108.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kai2nenobu/guide-key.git")
               (commit
                 "8f8b839f42edd53af13d588254f07727108ae312")))
        (sha256
          (base32
            "0awx1s5qsg92flha8i0j72zg4kax2h2vi62qikk19sniiwdlrv4i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-popwin emacs-s))
    (home-page
      "https://github.com/kai2nenobu/guide-key")
    (synopsis
      "Guide the following key bindings automatically and dynamically")
    (description
      "Documentation at https://melpa.org/#/guide-key")
    (license #f)))

(define-public emacs-guru-mode
  (package
    (name "emacs-guru-mode")
    (version "20211025.1157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/guru-mode.git")
               (commit
                 "a3370e547eab260d24774cd50ccbe865373c8631")))
        (sha256
          (base32
            "0h7d41l7rybljpb49hvkh14kc7bnh56rfrqzldpdry1qk3mr9bhj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("guru-mode.el")))
    (home-page
      "https://github.com/bbatsov/guru-mode")
    (synopsis "Become an Emacs guru")
    (description
      "Documentation at https://melpa.org/#/guru-mode")
    (license #f)))

(define-public emacs-gxref
  (package
    (name "emacs-gxref")
    (version "20170411.1753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dedi/gxref.git")
               (commit
                 "380b02c3c3c2586c828456716eef6a6392bb043b")))
        (sha256
          (base32
            "1c5j28rwqx53qdsqglif8yblhm2bwm4qzpl2dg0l0g3pr8pk8zjk"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dedi/gxref")
    (synopsis "xref backend using GNU Global.")
    (description
      "Documentation at https://melpa.org/#/gxref")
    (license #f)))

(define-public emacs-habitica
  (package
    (name "emacs-habitica")
    (version "20201210.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/emacs-habitica.git")
               (commit
                 "eeb0209fd638192f0b833526deb222f9f61361cb")))
        (sha256
          (base32
            "10z24hh1g9bf00maiwkjs324da55qqzxrz196rzs53i8lkli0xkd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abrochard/emacs-habitica")
    (synopsis "Interface for habitica.com")
    (description
      "Documentation at https://melpa.org/#/habitica")
    (license #f)))

(define-public emacs-hacker-typer
  (package
    (name "emacs-hacker-typer")
    (version "20170206.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/emacs-hacker-typer.git")
               (commit
                 "d5a23714a4ccc5071580622f278597d5973f40bd")))
        (sha256
          (base32
            "13wp7cg9d9ij44inxxyk1knczglxrbfaq50wyhc4x5zfhz5yw7wx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "hackerman.png")))
    (home-page
      "http://github.com/therockmandolinist/emacs-hacker-typer")
    (synopsis "Pretend to write code like a pro")
    (description
      "Documentation at https://melpa.org/#/hacker-typer")
    (license #f)))

(define-public emacs-hackernews
  (package
    (name "emacs-hackernews")
    (version "20210226.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clarete/hackernews.el.git")
               (commit
                 "ccfa75c0b3d67201cdf0f2324f311544ade498db")))
        (sha256
          (base32
            "0cssj9ql66l842kv5lnkp26cf5r21a0b71l3bypv671jxqsc5l2h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/clarete/hackernews.el")
    (synopsis "Hacker News Client for Emacs")
    (description
      "Documentation at https://melpa.org/#/hackernews")
    (license #f)))

(define-public emacs-hal-mode
  (package
    (name "emacs-hal-mode")
    (version "20160704.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/machinekoder/hal-mode.git")
               (commit
                 "cd2f66f219ee520198d4586fb6b169cef7ad3f21")))
        (sha256
          (base32
            "0xibwmngijq0wv9hkahs5nh02qj3ma0bkczl07hx8wnl6j27f0nj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/strahlex/hal-mode/")
    (synopsis "Major mode for editing HAL files")
    (description
      "Documentation at https://melpa.org/#/hal-mode")
    (license #f)))

(define-public emacs-hamburger-menu
  (package
    (name "emacs-hamburger-menu")
    (version "20160825.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/iain/hamburger-menu-mode.git")
               (commit
                 "3568159c693c30bed7f61580e4f3b6241253ad4e")))
        (sha256
          (base32
            "1nykpp8afa0c0wiax1qn8wf5hfjaixk5kn4yhcw40z00pb8i2z5f"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/iain/hamburger-menu-mode")
    (synopsis "Mode line hamburger menu")
    (description
      "Documentation at https://melpa.org/#/hamburger-menu")
    (license #f)))

(define-public emacs-hamlet-mode
  (package
    (name "emacs-hamlet-mode")
    (version "20131208.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lightquake/hamlet-mode.git")
               (commit
                 "7362b955e556a3d007fa06945a27e5b99349527d")))
        (sha256
          (base32
            "1njrpb1s2v9skyfbgb28clrxyvyp8i4b8kwa68ynvq3vjb4fnws6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/lightquake/hamlet-mode")
    (synopsis "Hamlet editing mode")
    (description
      "Documentation at https://melpa.org/#/hamlet-mode")
    (license #f)))

(define-public emacs-handlebars-sgml-mode
  (package
    (name "emacs-handlebars-sgml-mode")
    (version "20130623.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacott/handlebars-sgml-mode.git")
               (commit
                 "c76df93a9a8c1b1b3efdcc4add32bf93304192a4")))
        (sha256
          (base32
            "1z37di9vk1l35my8kl8jnyqlkr1rnp0iz13hpc0r065mib67v58k"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jacott/handlebars-sgml-mode")
    (synopsis
      "Add Handlebars contextual indenting support to sgml-mode")
    (description
      "Documentation at https://melpa.org/#/handlebars-sgml-mode")
    (license #f)))

(define-public emacs-haskell-tab-indent
  (package
    (name "emacs-haskell-tab-indent")
    (version "20200513.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.spwhitton.name/haskell-tab-indent")
               (commit
                 "3239e814d6999f31ad845cc58df53395ad299059")))
        (sha256
          (base32
            "0319nr4l56p0d2gpybkc2lkkhwi6qmf2gjpgpajpcz11ms9m8x5z"))))
    (build-system melpa-build-system)
    (home-page
      "https://spwhitton.name/tech/code/haskell-tab-indent/")
    (synopsis
      "tab-based indentation for haskell-mode")
    (description
      "Documentation at https://melpa.org/#/haskell-tab-indent")
    (license #f)))

(define-public emacs-haxe-mode
  (package
    (name "emacs-haxe-mode")
    (version "20210108.1835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/haxe-mode.git")
               (commit
                 "6057c05154464bfb88d2ba119cdc8d4c7e767541")))
        (sha256
          (base32
            "0z1lpsvmkcxs3gcxkmi1vjgfa7wdfa42cp2i9rl2i17jq34j37yb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/haxe-mode")
    (synopsis "Major mode for editing Haxe files")
    (description
      "Documentation at https://melpa.org/#/haxe-mode")
    (license #f)))

(define-public emacs-hcl-mode
  (package
    (name "emacs-hcl-mode")
    (version "20200315.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/emacs-hcl-mode.git")
               (commit
                 "e4d9eef631e8a386341ae8f94f7c2579586e65b5")))
        (sha256
          (base32
            "19xdag5qn3sgp30xdpannb9qa36jy6hl5n7pf866ir4l4lgpz6nx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/emacs-hcl-mode")
    (synopsis "Major mode for Hashicorp")
    (description
      "Documentation at https://melpa.org/#/hcl-mode")
    (license #f)))

(define-public emacs-heaven-and-hell
  (package
    (name "emacs-heaven-and-hell")
    (version "20190713.1830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/valignatev/heaven-and-hell.git")
               (commit
                 "e1febfd60d060c110a1e43c5f093cd8537251308")))
        (sha256
          (base32
            "1bgs638nsn9hyvc9wbc2jpqm5i3hblld1mhmf0h9z0j6fjr0aapx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/valignatev/heaven-and-hell")
    (synopsis "easy toggle light/dark themes")
    (description
      "Documentation at https://melpa.org/#/heaven-and-hell")
    (license #f)))

(define-public emacs-helm-atoms
  (package
    (name "emacs-helm-atoms")
    (version "20201013.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/helm-atoms.git")
               (commit
                 "7e6f91a16f556c96ae1b0d1f965ea56861bb6372")))
        (sha256
          (base32
            "0r61r1w8n5lvri7b32abahx0indim7hz6c9y95l54blqjx4yqzf0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/dantecatalfamo/helm-atoms")
    (synopsis "Reverse variable lookup using Helm")
    (description
      "Documentation at https://melpa.org/#/helm-atoms")
    (license #f)))

(define-public emacs-helm-backup
  (package
    (name "emacs-helm-backup")
    (version "20180911.614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/helm-backup.git")
               (commit
                 "691fe542f38fc7c8cca409997f6a0ff5d76ad6c2")))
        (sha256
          (base32
            "0zi1md5f1haqcrclqfk4ilvr6hbm389kl3ajnyx230rq22vmb9ca"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-s))
    (home-page
      "http://github.com/antham/helm-backup")
    (synopsis "Backup each file change using git")
    (description
      "Documentation at https://melpa.org/#/helm-backup")
    (license #f)))

(define-public emacs-helm-bbdb
  (package
    (name "emacs-helm-bbdb")
    (version "20190728.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-bbdb.git")
               (commit
                 "db69114ff1af8bf48b5a222242e3a8dd6e101e67")))
        (sha256
          (base32
            "1yfz5s83589jazyfzyrzh84iv0db2akbwj796gadpb3yhn17pl4v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-bbdb))
    (home-page
      "https://github.com/emacs-helm/helm-bbdb")
    (synopsis "Helm interface for bbdb")
    (description
      "Documentation at https://melpa.org/#/helm-bbdb")
    (license #f)))

(define-public emacs-helm-bibtex
  (package
    (name "emacs-helm-bibtex")
    (version "20210725.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/helm-bibtex.git")
               (commit
                 "aa775340ba691d2322948bfdc6a88158568a1399")))
        (sha256
          (base32
            "1d3mc17ga09m41i06khghlvixr6gsiacifnhdbrfnp0w5592aprk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bibtex-completion emacs-helm))
    (arguments '(#:files ("helm-bibtex.el")))
    (home-page
      "https://github.com/tmalsburg/helm-bibtex")
    (synopsis "A bibliography manager based on Helm")
    (description
      "Documentation at https://melpa.org/#/helm-bibtex")
    (license #f)))

(define-public emacs-helm-bm
  (package
    (name "emacs-helm-bm")
    (version "20160321.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-bm.git")
               (commit
                 "d66341f5646c23178d4d8bffb6cfebe3fb73f1d7")))
        (sha256
          (base32
            "011k37p4vnzm1x8vyairllanvjfknskl20bdfv0glf64xgbdpfil"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bm emacs-helm emacs-s))
    (home-page "https://github.com/yasuyk/helm-bm")
    (synopsis "helm sources for bm.el")
    (description
      "Documentation at https://melpa.org/#/helm-bm")
    (license #f)))

(define-public emacs-helm-books
  (package
    (name "emacs-helm-books")
    (version "20170325.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grugrut/helm-books.git")
               (commit
                 "625aadec1541a5ca36951e4ce1301f4b6fe2bf3f")))
        (sha256
          (base32
            "1d3nps765gxmadhbd1yqn4qvs23bczglwhxkciprky7ixm5lx53k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/grugrut/helm-books")
    (synopsis "Helm interface for searching books")
    (description
      "Documentation at https://melpa.org/#/helm-books")
    (license #f)))

(define-public emacs-helm-bundle-show
  (package
    (name "emacs-helm-bundle-show")
    (version "20190526.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-bundle-show.git")
               (commit
                 "70f1ca7d1847c7d5cd5a3e488562cd4a295b809f")))
        (sha256
          (base32
            "12wz98fcs8v8w74ck4jqbh47pp5956xxh9ld5kpym9zrm39adpq2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-bundle-show")
    (synopsis "Bundle show with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-bundle-show")
    (license #f)))

(define-public emacs-helm-catkin
  (package
    (name "emacs-helm-catkin")
    (version "20190425.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gollth/helm-catkin.git")
               (commit
                 "d33c71cecd35616dfa7c3b81d8f51c128405977f")))
        (sha256
          (base32
            "0pggn78lxfq6gmvyxr9y1j5qbcnkfh5f8vavxjpnch6k9xq0591x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-xterm-color))
    (home-page
      "https://github.com/gollth/helm-catkin")
    (synopsis
      "Package for compile ROS workspaces with catkin-tools")
    (description
      "Documentation at https://melpa.org/#/helm-catkin")
    (license #f)))

(define-public emacs-helm-chrome-history
  (package
    (name "emacs-helm-chrome-history")
    (version "20191031.1233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-chrome-history.git")
               (commit
                 "f9002d4c12df65a99830376b126dbbeae3ef2148")))
        (sha256
          (base32
            "18vgy5kaj0cmrar7ahcxiy9jva006zd7yfcgyi5h99yv62g76j72"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/xuchunyang/helm-chrome-history")
    (synopsis "Browse Chrome History with Helm")
    (description
      "Documentation at https://melpa.org/#/helm-chrome-history")
    (license #f)))

(define-public emacs-helm-chronos
  (package
    (name "emacs-helm-chronos")
    (version "20150528.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dxknight/helm-chronos.git")
               (commit
                 "a14fc3d65dd96ce6616234b3f7b8b08b4c1817ef")))
        (sha256
          (base32
            "1dmj4f8pris1i7wvfplp4dbnyfm403l6rplxfrfi0cd9afg7m68i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-chronos emacs-helm))
    (home-page
      "http://github.com/dxknight/helm-chronos")
    (synopsis "helm interface for chronos timers")
    (description
      "Documentation at https://melpa.org/#/helm-chronos")
    (license #f)))

(define-public emacs-helm-clojuredocs
  (package
    (name "emacs-helm-clojuredocs")
    (version "20160405.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mbuczko/helm-clojuredocs.git")
               (commit
                 "5a7f0f2cb401be0b09e73262a1c18265ab9a3cea")))
        (sha256
          (base32
            "015b8zxh91ljhqvn6z43gy08di54xcw9skw0i7frj3d7gk984qhl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edn emacs-helm))
    (home-page
      "https://github.com/mbuczko/helm-clojuredocs")
    (synopsis "search for help in clojuredocs.org")
    (description
      "Documentation at https://melpa.org/#/helm-clojuredocs")
    (license #f)))

(define-public emacs-helm-ctest
  (package
    (name "emacs-helm-ctest")
    (version "20191031.1435")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danlamanna/helm-ctest.git")
               (commit
                 "2a29cfb4ec583da247fa2ae7bac88790b1223e40")))
        (sha256
          (base32
            "11am95crkf409w3ph17x55v0xx2gy4spb4qc6z5f7vbxgwyaa4a6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-helm-core))
    (home-page "unspecified")
    (synopsis "Run ctest from within emacs")
    (description
      "Documentation at https://melpa.org/#/helm-ctest")
    (license #f)))

(define-public emacs-helm-directory
  (package
    (name "emacs-helm-directory")
    (version "20170706.402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-helm-directory.git")
               (commit
                 "51bd7cd6e40a84a7efda894283ec76a0107830ad")))
        (sha256
          (base32
            "18lv8s7lw6zw97v4q5810f9cn43ybiygl139i2hf5p37p48d8fyy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masasam/emacs-helm-directory")
    (synopsis
      "selecting directory before select the file")
    (description
      "Documentation at https://melpa.org/#/helm-directory")
    (license #f)))

(define-public emacs-helm-dirset
  (package
    (name "emacs-helm-dirset")
    (version "20151209.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/helm-dirset.git")
               (commit
                 "eb30810cd26e1ee73d84a863e6b2667700e9aead")))
        (sha256
          (base32
            "183vj5yi575aqkak19hl8k4mw38r0ki9p1fnpa8nny2srjyy34yb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-helm emacs-s))
    (home-page "http://101000lab.org")
    (synopsis "helm sources for multi directories")
    (description
      "Documentation at https://melpa.org/#/helm-dirset")
    (license #f)))

(define-public emacs-helm-emms
  (package
    (name "emacs-helm-emms")
    (version "20201205.1635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-emms.git")
               (commit
                 "43d387504a292b36e4e4246abdc9090c1717a561")))
        (sha256
          (base32
            "0pgrjqhw1xjl5xy329621idg517bfaafvqb3f5wxci6fhm4x46gc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-emms))
    (home-page
      "https://github.com/emacs-helm/helm-emms")
    (synopsis "Emms for Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-emms")
    (license #f)))

(define-public emacs-helm-etags-plus
  (package
    (name "emacs-helm-etags-plus")
    (version "20201003.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/helm-etags-plus.git")
               (commit
                 "52598fe69636add4b62cd9873041de5c6db9b7ac")))
        (sha256
          (base32
            "1mpwka62lk040693hllb5hrsf4n5vwkx6khi9i9dbyyc5xgppjm0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jixiuf/helm-etags-plus")
    (synopsis "Another Etags helm.el interface")
    (description
      "Documentation at https://melpa.org/#/helm-etags-plus")
    (license #f)))

(define-public emacs-helm-ext
  (package
    (name "emacs-helm-ext")
    (version "20200722.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/helm-ext.git")
               (commit
                 "c30f7772ec577a5ce1de3215f0507826e0725a69")))
        (sha256
          (base32
            "1sb3z1c1p9wal5g6fz8b948pvaarg4yhcmjqmpd2y7b85hzapgp1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "A few extensions to Helm")
    (description
      "Documentation at https://melpa.org/#/helm-ext")
    (license #f)))

(define-public emacs-helm-firefox
  (package
    (name "emacs-helm-firefox")
    (version "20210331.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-firefox.git")
               (commit
                 "58a7ff023c76857ca9cd82075c8743446a50c055")))
        (sha256
          (base32
            "06ihkw61ivgghasxignalr0zrfrh5nayky9adrqid9bgmiah3q9y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-firefox")
    (synopsis "Firefox bookmarks")
    (description
      "Documentation at https://melpa.org/#/helm-firefox")
    (license #f)))

(define-public emacs-helm-flx
  (package
    (name "emacs-helm-flx")
    (version "20180103.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/helm-flx.git")
               (commit
                 "6640fac5cb16bee73c95b8ed1248a4e5e113690e")))
        (sha256
          (base32
            "1fh1dy6xpc476hs87mn9fwxhxi97h7clfnnm7dxb7hg43xmgsjjs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-flx))
    (home-page
      "https://github.com/PythonNut/helm-flx")
    (synopsis "Sort helm candidates by flx score")
    (description
      "Documentation at https://melpa.org/#/helm-flx")
    (license #f)))

(define-public emacs-helm-fuzzy-find
  (package
    (name "emacs-helm-fuzzy-find")
    (version "20171106.400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-fuzzy-find.git")
               (commit
                 "de2abbf7ca13609587325bacd4a1ed4376b5c927")))
        (sha256
          (base32
            "1dacvnkqqiax02c627z9qi61iyqgr0j3qqmjp29h0v494czvrdbs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/xuchunyang/helm-fuzzy-find")
    (synopsis "Find file using Fuzzy Search")
    (description
      "Documentation at https://melpa.org/#/helm-fuzzy-find")
    (license #f)))

(define-public emacs-helm-ghs
  (package
    (name "emacs-helm-ghs")
    (version "20170715.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iory/emacs-helm-ghs.git")
               (commit
                 "17a70bf16255d90d67c8350e88200ec8bfd47563")))
        (sha256
          (base32
            "1jc51anmkr44db4kbcwza17x3ln78ihpslrf2v9xs0sq0ggw1rva"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/iory/emacs-helm-ghs")
    (synopsis "ghs with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ghs")
    (license #f)))

(define-public emacs-helm-gitlab
  (package
    (name "emacs-helm-gitlab")
    (version "20180312.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-gitlab.git")
               (commit
                 "8c2324c02119500f094c2f92dfaba4c9977ce1ba")))
        (sha256
          (base32
            "056c4fb5sj2y4h94klx2g24n1g3qdi7ifzs8ksw5v6hcj9lrkb1n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-helm emacs-gitlab))
    (arguments '(#:files ("helm-gitlab.el")))
    (home-page
      "https://github.com/nlamirault/emacs-gitlab")
    (synopsis "Helm interface to Gitlab")
    (description
      "Documentation at https://melpa.org/#/helm-gitlab")
    (license #f)))

(define-public emacs-helm-google
  (package
    (name "emacs-helm-google")
    (version "20210527.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/helm-google.git")
               (commit
                 "27834161391c350ef790062391cb7eab1d59fb62")))
        (sha256
          (base32
            "1rb1pmzr6szg8jjm43dndnk99v4i5zb1wp24rs9w8zmhygdn8jf4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://framagit.org/steckerhalter/helm-google")
    (synopsis
      "Emacs Helm Interface for quick Google searches")
    (description
      "Documentation at https://melpa.org/#/helm-google")
    (license #f)))

(define-public emacs-helm-grepint
  (package
    (name "emacs-helm-grepint")
    (version "20200811.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kopoli/helm-grepint.git")
               (commit
                 "9aec98428823b749eb14d2c8512b46b59ca9f8ca")))
        (sha256
          (base32
            "1fmpk9ynish20daajnx4c2s8bnlngb8sv3nwspxkk8fvv0c3p39i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/kopoli/helm-grepint")
    (synopsis "Generic helm interface to grep")
    (description
      "Documentation at https://melpa.org/#/helm-grepint")
    (license #f)))

(define-public emacs-helm-growthforecast
  (package
    (name "emacs-helm-growthforecast")
    (version "20140120.344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daichirata/helm-growthforecast.git")
               (commit
                 "0f94ac090d6c354058ad89a86e5c18385c136d9b")))
        (sha256
          (base32
            "0p0mk44y2z875ra8mzcb6vlf4rbkiq9yank5hdxvg2x2sxsaambk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/daic-h/helm-growthforecast")
    (synopsis "helm extensions for growthforecast.")
    (description
      "Documentation at https://melpa.org/#/helm-growthforecast")
    (license #f)))

(define-public emacs-helm-hayoo
  (package
    (name "emacs-helm-hayoo")
    (version "20151014.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/markus1189/helm-hayoo.git")
               (commit
                 "dd4c0c8c87521026edf1b808c4de01fa19b7c693")))
        (sha256
          (base32
            "08pfzs030d8g5s7vkpgicz4srp5cr3xpd84lhrr24ncrhbszxar9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "Source and configured helm for searching hayoo")
    (description
      "Documentation at https://melpa.org/#/helm-hayoo")
    (license #f)))

(define-public emacs-helm-helm-commands
  (package
    (name "emacs-helm-helm-commands")
    (version "20130902.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/helm-helm-commands.git")
               (commit
                 "3a05aa19c976501343ad9ae630a36810921a85f6")))
        (sha256
          (base32
            "05ksfx54ar2j4mypzwh0gfir8r26s4f1i4xw319q5pa1y2100cpn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/vapniks/helm-helm-commands")
    (synopsis "List all helm commands with helm")
    (description
      "Documentation at https://melpa.org/#/helm-helm-commands")
    (license #f)))

(define-public emacs-helm-icons
  (package
    (name "emacs-helm-icons")
    (version "20210330.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyoncho/helm-icons.git")
               (commit
                 "8d2f5e705c8b78a390677cf242024739c932fc95")))
        (sha256
          (base32
            "0q220a0knzmm2xk7hjcz6wkdk39ni2qndvnnsrc2vg04r5k12lm7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-treemacs))
    (home-page
      "https://github.com/yyoncho/helm-icons")
    (synopsis "Helm icons")
    (description
      "Documentation at https://melpa.org/#/helm-icons")
    (license #f)))

(define-public emacs-helm-j-cheatsheet
  (package
    (name "emacs-helm-j-cheatsheet")
    (version "20170217.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/helm-j-cheatsheet.git")
               (commit
                 "6c47e7162b9ba2de4b41221d01180146973d860b")))
        (sha256
          (base32
            "0ayv6aqmwjy95gc9cpyx0s71486rvlmn04iwgfn43mr192c38y9p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments '(#:files ("helm-j-cheatsheet.el")))
    (home-page
      "https://github.com/abo-abo/helm-j-cheatsheet")
    (synopsis "Quick J reference for Emacs")
    (description
      "Documentation at https://melpa.org/#/helm-j-cheatsheet")
    (license #f)))

(define-public emacs-helm-jira
  (package
    (name "emacs-helm-jira")
    (version "20180802.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/romandecker/helm-jira.git")
               (commit
                 "75d6ed5bd7a041fa8c1adb21cbbbe57b5a7c7cc7")))
        (sha256
          (base32
            "08cczc4jnkdgvzs0s3wq2dqmhnsvyhpl65dydmi7pmayl7zg6jir"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/DeX3/helm-jira")
    (synopsis
      "Helm bindings for JIRA/Bitbucket/stash")
    (description
      "Documentation at https://melpa.org/#/helm-jira")
    (license #f)))

(define-public emacs-helm-lastpass
  (package
    (name "emacs-helm-lastpass")
    (version "20180722.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-lastpass.git")
               (commit
                 "82e1ffb6ae77d9d9e29c398eb013cd20ce963f77")))
        (sha256
          (base32
            "0pri9zsjg0zii7dpsr56dy5204q0mld5wi22iay3kqpiyxghhssv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-csv))
    (home-page
      "https://github.com/xuchunyang/helm-lastpass")
    (synopsis "Helm interface of LastPass")
    (description
      "Documentation at https://melpa.org/#/helm-lastpass")
    (license #f)))

(define-public emacs-helm-lean
  (package
    (name "emacs-helm-lean")
    (version "20210305.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "4a90f2ae6e33c162a3dd6f624fb080c2ed8e8494")))
        (sha256
          (base32
            "1zikz4qaxabs3j86gljpp2qbhbzxsjzz544k9vsngibd468dszlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-helm emacs-lean-mode))
    (arguments '(#:files ("helm-lean.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "Helm interfaces for lean-mode")
    (description
      "Documentation at https://melpa.org/#/helm-lean")
    (license #f)))

(define-public emacs-helm-ls-hg
  (package
    (name "emacs-helm-ls-hg")
    (version "20150909.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-ls-hg.git")
               (commit
                 "61b91a22fcfb62d0fc56e361ec01ce96973c7165")))
        (sha256
          (base32
            "1msrsqiwk7bg5gry5cia8a6c7ifymfyn738hk8g2qwzzw4vkxxcs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "List hg files in hg project.")
    (description
      "Documentation at https://melpa.org/#/helm-ls-hg")
    (license #f)))

(define-public emacs-helm-lsp
  (package
    (name "emacs-helm-lsp")
    (version "20210419.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/helm-lsp.git")
               (commit
                 "c2c6974dadfac459b1a69a1217441283874cea92")))
        (sha256
          (base32
            "0xpz9qrcbxknnncqf0hw7hs9k6sv9dckzsf081k2zmsks3l5qh4p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-helm))
    (home-page "https://github.com/yyoncho/helm-lsp")
    (synopsis "LSP helm integration")
    (description
      "Documentation at https://melpa.org/#/helm-lsp")
    (license #f)))

(define-public emacs-helm-open-github
  (package
    (name "emacs-helm-open-github")
    (version "20170220.159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-open-github.git")
               (commit
                 "2f03d97552a1233db7694116d5f80ecde7612756")))
        (sha256
          (base32
            "1nzi2m23mqvxkpa7wsd2j0rwvlv5pj0mcaz2ypgfd023k2vh9is1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-gh))
    (home-page
      "https://github.com/syohex/emacs-helm-open-github")
    (synopsis "Utilities of Opening Github Page")
    (description
      "Documentation at https://melpa.org/#/helm-open-github")
    (license #f)))

(define-public emacs-helm-org
  (package
    (name "emacs-helm-org")
    (version "20210324.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-org.git")
               (commit
                 "d67186d3a64e610c03a5f3d583488f018fb032e4")))
        (sha256
          (base32
            "07wsz9hbv83m3k03cxvlr2hxd2lkxx9qpphn9j6axmysi9i5bc8q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments '(#:files ("helm-org.el")))
    (home-page
      "https://github.com/emacs-helm/helm-org")
    (synopsis
      "Helm for org headlines and keywords completion")
    (description
      "Documentation at https://melpa.org/#/helm-org")
    (license #f)))

(define-public emacs-helm-perldoc
  (package
    (name "emacs-helm-perldoc")
    (version "20200315.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-perldoc.git")
               (commit
                 "6f3526f07f3df3059dbde779f8e681f5f1fee6ea")))
        (sha256
          (base32
            "1g7f2vdvzh9qhk8lviii86w7cb06a60kz6gvv8gnbqx88mndqclq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-deferred))
    (arguments '(#:files (:defaults "*.pl")))
    (home-page
      "https://github.com/syohex/emacs-helm-perldoc")
    (synopsis "perldoc with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-perldoc")
    (license #f)))

(define-public emacs-helm-posframe
  (package
    (name "emacs-helm-posframe")
    (version "20211103.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/helm-posframe.git")
               (commit
                 "87461b52b6f3f378c63642a33f584d4a4ba28351")))
        (sha256
          (base32
            "1hmf1l6hmir0kvpl5h0wk4l17nmk0lfi659lvg89jc1sm18v2xv9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-helm))
    (home-page
      "https://github.com/tumashu/helm-posframe")
    (synopsis "Using posframe to show helm window")
    (description
      "Documentation at https://melpa.org/#/helm-posframe")
    (license #f)))

(define-public emacs-helm-proc
  (package
    (name "emacs-helm-proc")
    (version "20161006.305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/markus1189/helm-proc.git")
               (commit
                 "576d31c2d74ba3897d56e2acd2b0993f52c2547c")))
        (sha256
          (base32
            "11xahzybwh02ds19y6h5hbpqdj278kcb4239vyykdl3wx8p048a7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "Helm interface for managing system processes")
    (description
      "Documentation at https://melpa.org/#/helm-proc")
    (license #f)))

(define-public emacs-helm-pydoc
  (package
    (name "emacs-helm-pydoc")
    (version "20160918.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-pydoc.git")
               (commit
                 "85480a29b56dacde425655bc8f5a597c785afdf5")))
        (sha256
          (base32
            "1wrs2d84xzjnsmw255bmnd1wcpwd36m0vyni48aa7661d4dh10x3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (arguments '(#:files (:defaults "*.py")))
    (home-page
      "https://github.com/syohex/emacs-helm-pydoc")
    (synopsis "pydoc with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-pydoc")
    (license #f)))

(define-public emacs-helm-qiita
  (package
    (name "emacs-helm-qiita")
    (version "20190526.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-qiita.git")
               (commit
                 "5f82010c595f8e122aa3f68148ba8d8ccb1333d8")))
        (sha256
          (base32
            "1vkm2h0ia0gqqjw6cnbyik0fv37zzjwwdzk1cnh7a3s5hsg60i68"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-qiita")
    (synopsis "Qiita with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-qiita")
    (license #f)))

(define-public emacs-helm-rails
  (package
    (name "emacs-helm-rails")
    (version "20130424.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/helm-rails.git")
               (commit
                 "506d9948d45dfbc575c9c4c0d102c1ad2f511e82")))
        (sha256
          (base32
            "0i5ps5yds21bsrx86piy9bdgca95l1farsrbjpqz88ad8pq6xa9c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-inflections))
    (arguments '(#:files ("helm-rails.el")))
    (home-page "https://github.com/asok/helm-rails")
    (synopsis "Helm extension for Rails projects.")
    (description
      "Documentation at https://melpa.org/#/helm-rails")
    (license #f)))

(define-public emacs-helm-rb
  (package
    (name "emacs-helm-rb")
    (version "20131123.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/helm-rb.git")
               (commit
                 "4949d646420a9849af234dacdd8eb34a77c662fd")))
        (sha256
          (base32
            "1b74jsr28ldz80mrqz3d1bmykpcprdbhf3fzhc0awd5i5xdnfaid"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-helm-ag-r))
    (arguments
      '(#:files ("helm-rb.el" "get_methods.rb")))
    (home-page
      "https://github.com/yuutayamada/helm-rb")
    (synopsis
      "Search Ruby's method by ag and display helm")
    (description
      "Documentation at https://melpa.org/#/helm-rb")
    (license #f)))

(define-public emacs-helm-robe
  (package
    (name "emacs-helm-robe")
    (version "20151209.355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-robe.git")
               (commit
                 "6e69543b4ee76c5f8f3f2510c76e6d9aed17a370")))
        (sha256
          (base32
            "1qcx036pgrg4xc1y74amd8jkjylnc0g1c4841cc3fbknnn1ap54g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/syohex/emacs-helm-robe")
    (synopsis "completing read function for robe")
    (description
      "Documentation at https://melpa.org/#/helm-robe")
    (license #f)))

(define-public emacs-helm-rubygems-org
  (package
    (name "emacs-helm-rubygems-org")
    (version "20140826.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neomantic/helm-rubygems-org.git")
               (commit
                 "6aaed984f698cbdf9f9aceb0221404563e28764d")))
        (sha256
          (base32
            "1sff8kagyhmwcxf9062il1077d4slvr2kq76abj496610gpb75i0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/neomantic/helm-rubygems-org")
    (synopsis "Use helm to search rubygems.org")
    (description
      "Documentation at https://melpa.org/#/helm-rubygems-org")
    (license #f)))

(define-public emacs-helm-searcher
  (package
    (name "emacs-helm-searcher")
    (version "20210221.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-searcher.git")
               (commit
                 "326b5777db284f1e24c4f94730834e4b1e2bb66c")))
        (sha256
          (base32
            "17dzzqgd3sn69g3idbrdbqw162rsa7s4fa15rh6jpyx42ylbgiba"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-searcher emacs-s emacs-f))
    (home-page
      "https://github.com/emacs-helm/helm-searcher")
    (synopsis "Helm interface to use searcher")
    (description
      "Documentation at https://melpa.org/#/helm-searcher")
    (license #f)))

(define-public emacs-helm-selector
  (package
    (name "emacs-helm-selector")
    (version "20210125.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-selector.git")
               (commit
                 "4da4711c4cfd14527abe20d66787beeb49171b26")))
        (sha256
          (base32
            "01lh1df0bnas1p7xlqc4i1jd67f8lxgq0q2zsvx10z8828i76j3v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-selector")
    (synopsis "Helm buffer selector")
    (description
      "Documentation at https://melpa.org/#/helm-selector")
    (license #f)))

(define-public emacs-helm-spaces
  (package
    (name "emacs-helm-spaces")
    (version "20161001.1409")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-spaces.git")
               (commit
                 "877e2b5178926308d6a7c2a37477bb12c33a96d4")))
        (sha256
          (base32
            "1cz8aw6zprzfalagma7jmbycwll2chk2l4n5hkgqyhakdfm2ryzm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-spaces))
    (home-page
      "https://github.com/yasuyk/helm-spaces")
    (synopsis "helm sources for spaces")
    (description
      "Documentation at https://melpa.org/#/helm-spaces")
    (license #f)))

(define-public emacs-helm-spotify
  (package
    (name "emacs-helm-spotify")
    (version "20160905.2147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/helm-spotify.git")
               (commit
                 "f7a62d1ff88e3127de9be7cd3e818b0a92268ab3")))
        (sha256
          (base32
            "0q3h84zj63b1rnlvmsznrpmvvf0qbic5yb9xkdjcz4jz4h8p3h1w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-multi))
    (home-page
      "https://github.com/krisajenkins/helm-spotify")
    (synopsis "Control Spotify with Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-spotify")
    (license #f)))

(define-public emacs-helm-spotify-plus
  (package
    (name "emacs-helm-spotify-plus")
    (version "20190913.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/helm-spotify-plus.git")
               (commit
                 "c3922ec368250965e483876cde5880d88a40a71b")))
        (sha256
          (base32
            "12zl775l7zikv268vypnb56ly2h0y3sf5wxv5rc2amnmwgrikvra"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-multi))
    (home-page
      "https://github.com/wandersoncferreira/helm-spotify-plus")
    (synopsis
      "Control Spotify search and select music with Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-spotify-plus")
    (license #f)))

(define-public emacs-helm-sql-connect
  (package
    (name "emacs-helm-sql-connect")
    (version "20170319.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eric-hansen/helm-sql-connect.git")
               (commit
                 "5aead55b6f8636140945714d8c332b287ab9ef10")))
        (sha256
          (base32
            "037gri2r9y135av8gbgi9d8k90qs8jlax0bimzcbwdkyhibhzrcp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/eric-hansen/helm-sql-connect")
    (synopsis
      "Choose a database to connect to via Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-sql-connect")
    (license #f)))

(define-public emacs-helm-swoop
  (package
    (name "emacs-helm-swoop")
    (version "20210426.547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-swoop.git")
               (commit
                 "1b3285791f1dc1fde548fe67aec07214d698fd57")))
        (sha256
          (base32
            "0wgi7pk2s4syi3fc8l60zcnz34f8ik9y558la0d5ryci4fssrl7i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacsorphanage/helm-swoop")
    (synopsis
      "Efficiently hopping squeezed lines powered by helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-swoop")
    (license #f)))

(define-public emacs-helm-system-packages
  (package
    (name "emacs-helm-system-packages")
    (version "20210628.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-system-packages.git")
               (commit
                 "a16bb1c3708416984106a98353700d456414b6a1")))
        (sha256
          (base32
            "09acgs1mjkqmm7n88x4hck2bp3jv5fifdkd406r8fh874vyfib38"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-system-packages")
    (synopsis
      "Helm UI wrapper for system package managers.")
    (description
      "Documentation at https://melpa.org/#/helm-system-packages")
    (license #f)))

(define-public emacs-helm-systemd
  (package
    (name "emacs-helm-systemd")
    (version "20210105.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lompik/helm-systemd.git")
               (commit
                 "8b26ab2d3a5b08c1e03c9312818512d7492bbc9a")))
        (sha256
          (base32
            "11v6pwkhdssg2f6azs3nw1y3s5ysmkxxv1jvgm7yy8gwg04zvcym"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-with-editor))
    (arguments '(#:files ("helm-systemd.el")))
    (home-page "unspecified")
    (synopsis "helm's systemd interface")
    (description
      "Documentation at https://melpa.org/#/helm-systemd")
    (license #f)))

(define-public emacs-helm-tail
  (package
    (name "emacs-helm-tail")
    (version "20181124.439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/helm-tail.git")
               (commit
                 "1f5a6355aa3bdb00b9b0bc93db29c17f0d6701e3")))
        (sha256
          (base32
            "1ad0khw26m22xpdv0iyg5gac92i8m455sznsfh16vxaa98gq0c4q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/akirak/helm-tail")
    (synopsis
      "Read recent output from various sources")
    (description
      "Documentation at https://melpa.org/#/helm-tail")
    (license #f)))

(define-public emacs-helm-w32-launcher
  (package
    (name "emacs-helm-w32-launcher")
    (version "20141223.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/helm-w32-launcher.git")
               (commit
                 "3e59ad62b89dd21d334af0203d445a83eb25dc5b")))
        (sha256
          (base32
            "0xlz9rxx7y9pkrzvxmv42vgys5iwx75zv9g50k8ihwc08z80dhcq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments
      '(#:files (:defaults "helper-src" "license.txt")))
    (home-page
      "https://github.com/Fanael/helm-w32-launcher")
    (synopsis "Start Menu entry launcher using Helm")
    (description
      "Documentation at https://melpa.org/#/helm-w32-launcher")
    (license #f)))

(define-public emacs-helm-w3m
  (package
    (name "emacs-helm-w3m")
    (version "20210315.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-w3m.git")
               (commit
                 "0a25a2b1df9bc660a90d633beb301b3815556e4e")))
        (sha256
          (base32
            "0cdfk1r2rcc5hflwjpmsijss6xf5lwzn7x68jq4b4xdlckkqf9d7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-w3m))
    (home-page "unspecified")
    (synopsis "W3m bookmark - helm interface.")
    (description
      "Documentation at https://melpa.org/#/helm-w3m")
    (license #f)))

(define-public emacs-helm-wordnet
  (package
    (name "emacs-helm-wordnet")
    (version "20160128.1507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raghavgautam/helm-wordnet.git")
               (commit
                 "a36dbc6fcb570b812870bc1e190f203e0a0042fc")))
        (sha256
          (base32
            "03a5hzgqak8wg6i2h2p3fr9ij55lqarcsblml8qrnrj27ghcvzzh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/raghavgautam/helm-wordnet")
    (synopsis
      "Helm interface to local wordnet dictionary")
    (description
      "Documentation at https://melpa.org/#/helm-wordnet")
    (license #f)))

(define-public emacs-help-find
  (package
    (name "emacs-help-find")
    (version "20210826.928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/duncanburke/help-find.git")
               (commit
                 "576d6505b9e42f50f121b1a6a675f17f03a04406")))
        (sha256
          (base32
            "064asvq6hfmrh3fnkm8dnarwmdgfm8f97mjng1bkf13wmnzglhck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/duncanburke/help-find")
    (synopsis
      "Additional help functions for working with keymaps")
    (description
      "Documentation at https://melpa.org/#/help-find")
    (license #f)))

(define-public emacs-help-find-org-mode
  (package
    (name "emacs-help-find-org-mode")
    (version "20181204.234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/help-find-org-mode.git")
               (commit
                 "aeda7f92c086dab9d8dfcd580fe80b332887a548")))
        (sha256
          (base32
            "18qj0ssmysfr5hlrayhw8m7a1nr1fpzsd5hn15kzbi7kzdnmc18w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/EricCrosson/help-find-org-mode")
    (synopsis
      "Advise help to find org source over tangled code")
    (description
      "Documentation at https://melpa.org/#/help-find-org-mode")
    (license #f)))

(define-public emacs-hemera-theme
  (package
    (name "emacs-hemera-theme")
    (version "20180916.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/emacs-hemera-theme.git")
               (commit
                 "b67c902b210b37b00cac68726822404543147ba8")))
        (sha256
          (base32
            "1q31kz5p97pby26lyb6r0jfcx5pdyax3sfba4lp8dzmxpisz2g2p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GuidoSchmidt/emacs-hemera-theme")
    (synopsis "Light theme")
    (description
      "Documentation at https://melpa.org/#/hemera-theme")
    (license #f)))

(define-public emacs-hercules
  (package
    (name "emacs-hercules")
    (version "20200420.747")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/hercules.git")
               (commit
                 "557da39878d0637395fdded91243b340c37eff7b")))
        (sha256
          (base32
            "1rp37rhkj8jm07dwr74vc68dhrbvyvrxjdavpb0h073ps9vl9dsc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-which-key))
    (home-page
      "https://gitlab.com/jjzmajic/hercules")
    (synopsis
      "An auto-magical, which-key-based hydra banisher.")
    (description
      "Documentation at https://melpa.org/#/hercules")
    (license #f)))

(define-public emacs-hgrc-mode
  (package
    (name "emacs-hgrc-mode")
    (version "20150409.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/hgrc-mode.git")
               (commit
                 "314e8320b82cc1ce74b1bd372f296252e7a23090")))
        (sha256
          (base32
            "1ky5s7hzqbxgasdz285q3rnvzh3irwsq61rlivjrcxyfdxdjbbvp"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/omajid/hgrc-mode")
    (synopsis "major mode for editing hgrc files")
    (description
      "Documentation at https://melpa.org/#/hgrc-mode")
    (license #f)))

(define-public emacs-hi2
  (package
    (name "emacs-hi2")
    (version "20141005.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nilcons/hi2.git")
               (commit
                 "c9d199727b5cdcb9e36a972b38131ce4611fd6c8")))
        (sha256
          (base32
            "1s08sgbh5v59lqskd0s1dscs6dy7z5mkqqkabs3gd35agbfvbmlf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/errge/hi2")
    (synopsis "indentation module for Haskell Mode")
    (description
      "Documentation at https://melpa.org/#/hi2")
    (license #f)))

(define-public emacs-hiccup-cli
  (package
    (name "emacs-hiccup-cli")
    (version "20210208.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/hiccup-cli.git")
               (commit
                 "b56ae0d5cd5ce3ef24ed13be5103e231c91ef4e2")))
        (sha256
          (base32
            "0cl84mlgrjwjxgk2kx4930rarxyc6n07lvy54gmb907i4l6flw61"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("elisp/*.el" "elisp/*.el.in")))
    (home-page
      "https://github.com/kwrooijen/hiccup-cli")
    (synopsis "Convert HTML to Hiccup syntax")
    (description
      "Documentation at https://melpa.org/#/hiccup-cli")
    (license #f)))

(define-public emacs-hierarchy
  (package
    (name "emacs-hierarchy")
    (version "20190425.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/hierarchy.git")
               (commit
                 "fed505b8e71bf51772887c8a94bb57f5b8838b63")))
        (sha256
          (base32
            "0bsmnyhpsa7x4jp4zc4inyi0rrjm34fbxa3m49hw8kq5ap7dps5k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/hierarchy")
    (synopsis
      "Library to create and display hierarchy structures")
    (description
      "Documentation at https://melpa.org/#/hierarchy")
    (license #f)))

(define-public emacs-highlight
  (package
    (name "emacs-highlight")
    (version "20210318.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/highlight.git")
               (commit
                 "28557cb8d99b96eb509aaec1334c7cdda162517f")))
        (sha256
          (base32
            "1klrc2w0wg9ajm973b7blkjcwscqni6nxaqkcmimava398lxss2l"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.emacswiki.org/emacs/download/highlight.el")
    (synopsis "Highlighting commands.")
    (description
      "Documentation at https://melpa.org/#/highlight")
    (license #f)))

(define-public emacs-highlight-defined
  (package
    (name "emacs-highlight-defined")
    (version "20210411.222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-defined.git")
               (commit
                 "4420bdda419875dacb065468aafe273b2022580e")))
        (sha256
          (base32
            "0a9nn1jnbgv93kz1iz5iay34d0p7lkpd8ic619ysk8qcksc0yn2i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/highlight-defined")
    (synopsis
      "Syntax highlighting of known Elisp symbols")
    (description
      "Documentation at https://melpa.org/#/highlight-defined")
    (license #f)))

(define-public emacs-highlight-doxygen
  (package
    (name "emacs-highlight-doxygen")
    (version "20200520.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/highlight-doxygen.git")
               (commit
                 "eec4874e2e89d4eb39091aad89a67dff8f8ec84c")))
        (sha256
          (base32
            "0r3rv1px43r265716l3g20c1ss4381h1mc1kjxin22vdmrj6cmxy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/highlight-doxygen")
    (synopsis "Highlight Doxygen comments")
    (description
      "Documentation at https://melpa.org/#/highlight-doxygen")
    (license #f)))

(define-public emacs-highlight-quoted
  (package
    (name "emacs-highlight-quoted")
    (version "20140916.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-quoted.git")
               (commit
                 "24103478158cd19fbcfb4339a3f1fa1f054f1469")))
        (sha256
          (base32
            "1gq8inxfni9zgz2brqm4nlswgr8b0spq15wr532xfrgr456g10ks"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/highlight-quoted")
    (synopsis
      "Highlight Lisp quotes and quoted symbols")
    (description
      "Documentation at https://melpa.org/#/highlight-quoted")
    (license #f)))

(define-public emacs-highlight2clipboard
  (package
    (name "emacs-highlight2clipboard")
    (version "20151020.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/highlight2clipboard.git")
               (commit
                 "6ce58a060d9c5843ccb8c79ec2bba7858c68ac15")))
        (sha256
          (base32
            "06nnqry36ncqacfzd8yvc4q59bwk3vgf9a14rkpph2hk2rfvq2m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (arguments '(#:files (:defaults "bin")))
    (home-page "unspecified")
    (synopsis
      "Copy text to clipboard with highlighting.")
    (description
      "Documentation at https://melpa.org/#/highlight2clipboard")
    (license #f)))

(define-public emacs-hindent
  (package
    (name "emacs-hindent")
    (version "20210201.148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaimaruseac/hindent.git")
               (commit
                 "e146d672ea4c00fe17018e7e76e49d59570eeb2b")))
        (sha256
          (base32
            "0bcrlw76nihbffm7p5jh9vf3r1756p6vwa7hbwp933r4caaiyqid"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("elisp/*.el")))
    (home-page
      "https://github.com/chrisdone/hindent")
    (synopsis
      "Indent haskell code using the \"hindent\" program")
    (description
      "Documentation at https://melpa.org/#/hindent")
    (license #f)))

(define-public emacs-hippie-expand-slime
  (package
    (name "emacs-hippie-expand-slime")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/hippie-expand-slime.git")
               (commit
                 "39bbae94896a62854d31754debdfae71d35fec62")))
        (sha256
          (base32
            "1l2j5k4jk8jpm1vdf0z5zwa287859afsgd3gda778sdsiy38l6r7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/hippie-expand-slime")
    (synopsis
      "Hook slime's completion into hippie-expand")
    (description
      "Documentation at https://melpa.org/#/hippie-expand-slime")
    (license #f)))

(define-public emacs-hippie-namespace
  (package
    (name "emacs-hippie-namespace")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/hippie-namespace.git")
               (commit
                 "d0d0f15c67ab8bef5e9d1e29a89ecd3613a60b49")))
        (sha256
          (base32
            "0b5wrid428s11afc48d6mdifmd31gmzyrj9zcpd3jwk63ydiihdc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/hippie-namespace")
    (synopsis
      "Special treatment for namespace prefixes in hippie-expand")
    (description
      "Documentation at https://melpa.org/#/hippie-namespace")
    (license #f)))

(define-public emacs-hl-anything
  (package
    (name "emacs-hl-anything")
    (version "20160422.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hl-anything/hl-anything-emacs.git")
               (commit
                 "8696bc55a8cba408f0fc83a907a9ec529d79e558")))
        (sha256
          (base32
            "10ps1rb5fqwaw4lz3nz2rbsry4y81asmi5557g229h8xjhp6gpnm"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("images" "images/*.xpm" "images/*.png"))))
    (home-page "unspecified")
    (synopsis
      "Highlight symbols, selections, enclosing parens and more.")
    (description
      "Documentation at https://melpa.org/#/hl-anything")
    (license #f)))

(define-public emacs-hl-block-mode
  (package
    (name "emacs-hl-block-mode")
    (version "20211029.602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-hl-block-mode.git")
               (commit
                 "0593a1a77db28503025d5c1850e6a99551c3bcbd")))
        (sha256
          (base32
            "1rkxm6ak1zaqzp6q6mqpng0k4qjnsshkwydfxfm63xfsgr4vwhwv"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-hl-block-mode")
    (synopsis "Highlighting nested blocks")
    (description
      "Documentation at https://melpa.org/#/hl-block-mode")
    (license #f)))

(define-public emacs-hl-sentence
  (package
    (name "emacs-hl-sentence")
    (version "20171018.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/hl-sentence.git")
               (commit
                 "86ae38d3103bd20da5485cbdd59dfbd396c45ee4")))
        (sha256
          (base32
            "1rzc74ckj06qs8kq2bd1cgqvgjd2qc3zxmk7bvgg6dy2m9nj52cm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/milkypostman/hl-sentence")
    (synopsis
      "highlight a sentence based on customizable face")
    (description
      "Documentation at https://melpa.org/#/hl-sentence")
    (license #f)))

(define-public emacs-hl-todo
  (package
    (name "emacs-hl-todo")
    (version "20210909.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/hl-todo.git")
               (commit
                 "42f744ffb513cf2b95517144c64dbf3fc69f711a")))
        (sha256
          (base32
            "1f84d4wms8q2kcj5mb6ih6b5ni35fwqvckp2j3mcdznms759j7li"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tarsius/hl-todo")
    (synopsis "highlight TODO and similar keywords")
    (description
      "Documentation at https://melpa.org/#/hl-todo")
    (license #f)))

(define-public emacs-hledger-mode
  (package
    (name "emacs-hledger-mode")
    (version "20210706.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/narendraj9/hledger-mode.git")
               (commit
                 "9ac07ff0adbce6a402c17e789b1750f9da0d22f4")))
        (sha256
          (base32
            "0x3dgws8nh7q8x7zzjwbm5k9n7gi7qqd3ww7y51fbx6p6ii3jpp4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-async emacs-htmlize))
    (arguments '(#:files ("*.el")))
    (home-page
      "https://github.com/narendraj9/hledger-mode.git")
    (synopsis
      "A mode for writing journal entries for hledger.")
    (description
      "Documentation at https://melpa.org/#/hledger-mode")
    (license #f)))

(define-public emacs-hlint-refactor
  (package
    (name "emacs-hlint-refactor")
    (version "20190115.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpickering/hlint-refactor-mode.git")
               (commit
                 "c4307f86aad6d02e32e9b30cb6edc115584c791c")))
        (sha256
          (base32
            "1c71w9s34n0i7mm4njchxn6s3ri1y6mh3akgbg4nq41d42h8iap3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mpickering/hlint-refactor-mode")
    (synopsis "Apply HLint suggestions")
    (description
      "Documentation at https://melpa.org/#/hlint-refactor")
    (license #f)))

(define-public emacs-hnreader
  (package
    (name "emacs-hnreader")
    (version "20211018.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-hnreader.git")
               (commit
                 "5eb55aff411406882b8928ff233ac3d761641c6f")))
        (sha256
          (base32
            "13i08hb4i6am4ljvdh9ifi616jbrld05pvhd159vmmli3wpyzgaw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-request))
    (home-page
      "https://github.com/thanhvg/emacs-hnreader/")
    (synopsis "A hackernews reader")
    (description
      "Documentation at https://melpa.org/#/hnreader")
    (license #f)))

(define-public emacs-holy-books
  (package
    (name "emacs-holy-books")
    (version "20211025.127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/holy-books.git")
               (commit
                 "02c2956d36631d3d8c8b4bacdcf0a5cdd1f3136d")))
        (sha256
          (base32
            "011a9wg0b68cf2pcr2w5my4dlawaa9yzz98mnsv71v8ny42rzgs6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://alhassy.github.io/holy-books/")
    (synopsis
      "Org-mode links/tooltips/lookups for Quran & Bible")
    (description
      "Documentation at https://melpa.org/#/holy-books")
    (license #f)))

(define-public emacs-honcho
  (package
    (name "emacs-honcho")
    (version "20190623.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/honcho.el.git")
               (commit
                 "d5e6206dd23ff9305d976c52845c750a064aca4b")))
        (sha256
          (base32
            "0nh8n9rbd640rjpb3qz1mq3mgwj4dw5m98v4xypxpd954pr90afc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sudo-edit))
    (home-page
      "https://github.com/emacs-pe/honcho.el")
    (synopsis "Run and manage long-running services")
    (description
      "Documentation at https://melpa.org/#/honcho")
    (license #f)))

(define-public emacs-hookify
  (package
    (name "emacs-hookify")
    (version "20141216.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/hookify.git")
               (commit
                 "21baae7393b07257de5796402fde0ca72fb00d77")))
        (sha256
          (base32
            "0sg4h0m1ds3f6kpzd3vk30g6x2xl74r5j9bidw658f3mmai7m1l8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://github.com/Silex/hookify")
    (synopsis
      "Interactive commands to create temporary hooks")
    (description
      "Documentation at https://melpa.org/#/hookify")
    (license #f)))

(define-public emacs-howdoi
  (package
    (name "emacs-howdoi")
    (version "20150204.43")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atykhonov/emacs-howdoi.git")
               (commit
                 "5fbf7069ee160c597a328e5ce5fb32920e1ca88f")))
        (sha256
          (base32
            "01sj9c8mxqaif8wh6zz9v2czjaq7vcdi66drldyjmifkln6rg2v8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/atykhonov/emacs-howdoi/")
    (synopsis "Instant coding answers via Emacs.")
    (description
      "Documentation at https://melpa.org/#/howdoi")
    (license #f)))

(define-public emacs-howdoyou
  (package
    (name "emacs-howdoyou")
    (version "20210909.2000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-howdoyou.git")
               (commit
                 "a01971a7279c8a031de78513c004d7a09d293712")))
        (sha256
          (base32
            "05jmq05bjj0rfc6c69ykjrv6lavxpb21fnjny958if8hxzd7v1v8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-request))
    (home-page
      "https://github.com/thanhvg/howdoyou/")
    (synopsis
      "A stackoverflow and its sisters' sites reader")
    (description
      "Documentation at https://melpa.org/#/howdoyou")
    (license #f)))

(define-public emacs-howm
  (package
    (name "emacs-howm")
    (version "20210217.1128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://scm.osdn.net/gitroot/howm/howm.git")
               (commit
                 "bac98b873d07baf039fe252b9d67f71c235dca06")))
        (sha256
          (base32
            "0rhyhkm84fsff5lyvb0z9rnbhmqn4ix0d8wixzll2n2yclj9d9my"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "*.el.in"))))
    (home-page "https://howm.osdn.jp")
    (synopsis "Wiki-like note-taking tool")
    (description
      "Documentation at https://melpa.org/#/howm")
    (license #f)))

(define-public emacs-htmltagwrap
  (package
    (name "emacs-htmltagwrap")
    (version "20200929.559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/htmltagwrap.git")
               (commit
                 "ec85e68a4cba064d4caa593e1dec69b1b35b12dd")))
        (sha256
          (base32
            "143c4in1hykd3rnzrznri60aikmsm9fyhmmsx5gzapyr18lbw9wq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/htmltagwrap")
    (synopsis "Wraps a chunk of HTML code in tags")
    (description
      "Documentation at https://melpa.org/#/htmltagwrap")
    (license #f)))

(define-public emacs-huecycle
  (package
    (name "emacs-huecycle")
    (version "20210830.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pnor/huecycle.git")
               (commit
                 "a05e32351dcff3e61b5f15800556adfe1939c112")))
        (sha256
          (base32
            "1qnid40hmz3yw5jr1i9xr91d57hjh90s98js48nk6m0sjbkkbb4r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/pnor/huecycle")
    (synopsis "Idle color animation")
    (description
      "Documentation at https://melpa.org/#/huecycle")
    (license #f)))

(define-public emacs-hyperkitty
  (package
    (name "emacs-hyperkitty")
    (version "20200927.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maxking/hyperkitty.el.git")
               (commit
                 "ad65766fee2675bf123491544707b056b89b52ce")))
        (sha256
          (base32
            "1h819sxbzpcnr6mkl6aw9qxhyhkydppwwwqsgyw9qfil9sk8hyff"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/maxking/hyperkitty.el")
    (synopsis
      "Emacs interface for Hyperkitty archives")
    (description
      "Documentation at https://melpa.org/#/hyperkitty")
    (license #f)))

(define-public emacs-hyperlist-mode
  (package
    (name "emacs-hyperlist-mode")
    (version "20200515.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/hyperlist-mode.git")
               (commit
                 "374cdc04761df23e7a50ca276319ba9745cda9d7")))
        (sha256
          (base32
            "11940wmzhnj6yxgdkadkwak4k9gad4y1bbf0k39sca13j10j48n7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vifon/hyperlist-mode")
    (synopsis "A major-mode for viewing Hyperlists")
    (description
      "Documentation at https://melpa.org/#/hyperlist-mode")
    (license #f)))

(define-public emacs-hyperspace
  (package
    (name "emacs-hyperspace")
    (version "20210603.1825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/hyperspace-el.git")
               (commit
                 "c4c363c140250ba6b775516082063878975a6154")))
        (sha256
          (base32
            "13nvp7hzynrddws3x7f7p4529arn3m7km7ma4226mc7mbpfbjgi1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ieure/hyperspace-el")
    (synopsis "Get there from here")
    (description
      "Documentation at https://melpa.org/#/hyperspace")
    (license #f)))

(define-public emacs-i3wm
  (package
    (name "emacs-i3wm")
    (version "20170822.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.flintfam.org/swf-projects/emacs-i3.git")
               (commit
                 "71391dc61063fee77ad174f3b2ca25c60b41009e")))
        (sha256
          (base32
            "16rwqfg517ask3y6mqxw689w8xx4i51nq8js5wnzbz9a55aj776n"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.flintfam.org/swf-projects/emacs-i3")
    (synopsis "i3wm integration library")
    (description
      "Documentation at https://melpa.org/#/i3wm")
    (license #f)))

(define-public emacs-ibuffer-projectile
  (package
    (name "emacs-ibuffer-projectile")
    (version "20200805.604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ibuffer-projectile.git")
               (commit
                 "ecbe482804a217b1471593f6c7a8b3d64f3cdc47")))
        (sha256
          (base32
            "0gcars1zmfrysq1n3bv40nwqsk821bz3pffrsjw14fg2mwjpmaxq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "https://github.com/purcell/ibuffer-projectile")
    (synopsis
      "Group ibuffer's list by projectile root")
    (description
      "Documentation at https://melpa.org/#/ibuffer-projectile")
    (license #f)))

(define-public emacs-ibuffer-rcirc
  (package
    (name "emacs-ibuffer-rcirc")
    (version "20150215.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/ibuffer-rcirc.git")
               (commit
                 "8a4409b1c679d65c819dee4085faf929840e79f8")))
        (sha256
          (base32
            "15lapyj7qkkw1i1g1aizappm7gxkfnxhvd4fq66lghkzb76clz2m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgallina/ibuffer-rcirc")
    (synopsis "Ibuffer integration for rcirc")
    (description
      "Documentation at https://melpa.org/#/ibuffer-rcirc")
    (license #f)))

(define-public emacs-ibuffer-sidebar
  (package
    (name "emacs-ibuffer-sidebar")
    (version "20210508.836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/ibuffer-sidebar.git")
               (commit
                 "fb685e1e43db979e25713081d8ae4073453bbd5e")))
        (sha256
          (base32
            "04x87gngmvyj4nfq1dm3h9jr6b0kvikxsg1533kdkz9k72khs3n3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/ibuffer-sidebar")
    (synopsis "Sidebar for `ibuffer'")
    (description
      "Documentation at https://melpa.org/#/ibuffer-sidebar")
    (license #f)))

(define-public emacs-icsql
  (package
    (name "emacs-icsql")
    (version "20210612.1340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/icsql.git")
               (commit
                 "4521e9d2debef7687bfd26a664479f0c46688a36")))
        (sha256
          (base32
            "0s65kilx1jrjhm80sc4fj3x0mr3x4m3vjllm6qxj8ml8sh3pkai3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-choice-program emacs-buffer-manage))
    (home-page "https://github.com/plandes/icsql")
    (synopsis "Interactive iSQL iteraface to ciSQL")
    (description
      "Documentation at https://melpa.org/#/icsql")
    (license #f)))

(define-public emacs-id-manager
  (package
    (name "emacs-id-manager")
    (version "20170320.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-id-manager.git")
               (commit
                 "14ebc35db298aac4dedc8aa188bc46bacab81f3b")))
        (sha256
          (base32
            "0k9b12gzvjw06y5ycjkigkj8vcmj4rz57d4hyzip27g1v93vvimc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "id-password management")
    (description
      "Documentation at https://melpa.org/#/id-manager")
    (license #f)))

(define-public emacs-idea-darkula-theme
  (package
    (name "emacs-idea-darkula-theme")
    (version "20160416.2303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/idea-darkula-theme.git")
               (commit
                 "52602d9b91883e1f297d000951aeed48bf60176e")))
        (sha256
          (base32
            "1hknhbm3b5rsba2s84iwspylhzjsm91zdckz22j9gyrq37wjgyrr"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fourier/idea-darkula-theme")
    (synopsis
      "Color theme based on IntelliJ IDEA Darkula color theme")
    (description
      "Documentation at https://melpa.org/#/idea-darkula-theme")
    (license #f)))

(define-public emacs-identica-mode
  (package
    (name "emacs-identica-mode")
    (version "20130204.2253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabrielsaldana/Emacs-Identica-mode.git")
               (commit
                 "cf9183ee11ac922e85c7c908f04e2d00b03111b3")))
        (sha256
          (base32
            "047gzycr49cs8wlmm9j4ry7b7jxmfhmbayx6rbbxs49lba8dgwlk"))))
    (build-system melpa-build-system)
    (home-page
      "http://blog.gabrielsaldana.org/identica-mode-for-emacs/")
    (synopsis
      "Major mode API client for status.net open microblogging")
    (description
      "Documentation at https://melpa.org/#/identica-mode")
    (license #f)))

(define-public emacs-ido-gnus
  (package
    (name "emacs-ido-gnus")
    (version "20140216.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/ido-gnus.git")
               (commit
                 "f5fe3f6aa8086f675ba216abace9e3d5f2e3a089")))
        (sha256
          (base32
            "0ifdwd5vnjv2iyb5bnz8pij35lc0ymmyx8j8zhpkbgjigz8f05ip"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vapniks/ido-gnus")
    (synopsis
      "Access gnus groups or servers using ido")
    (description
      "Documentation at https://melpa.org/#/ido-gnus")
    (license #f)))

(define-public emacs-ido-springboard
  (package
    (name "emacs-ido-springboard")
    (version "20170106.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/springboard.git")
               (commit
                 "687d1e5898a880878995dc9bffe93b4598366203")))
        (sha256
          (base32
            "0fn8c4hqblfjvcpg68kj2dmdjqsdnxddqbzgvakl43zckjg8pi01"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ido-springboard.el")))
    (home-page
      "https://github.com/jwiegley/springboard")
    (synopsis
      "Temporarily change default-directory for one command")
    (description
      "Documentation at https://melpa.org/#/ido-springboard")
    (license #f)))

(define-public emacs-iedit
  (package
    (name "emacs-iedit")
    (version "20211223.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorhge/iedit.git")
               (commit
                 "6bb8d63a9730d7d31d931370cf08145893fa8d2a")))
        (sha256
          (base32
            "0fa7ybz34a6yv5ki2sn7qzzss93s2w7sarpq40mk1x6i46sg12y2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/victorhge/iedit")
    (synopsis
      "Edit multiple regions in the same way simultaneously.")
    (description
      "Documentation at https://melpa.org/#/iedit")
    (license #f)))

(define-public emacs-iflipb
  (package
    (name "emacs-iflipb")
    (version "20210907.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrosdahl/iflipb.git")
               (commit
                 "2854e73cebb463007b686a784b66242999c3366b")))
        (sha256
          (base32
            "0fyjdfv2pw7lkh3dgmp7cjlcpnsnn82ssfh19wngiskf3p405s1v"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jrosdahl/iflipb")
    (synopsis
      "Interactively flip between recently visited buffers")
    (description
      "Documentation at https://melpa.org/#/iflipb")
    (license #f)))

(define-public emacs-imakado
  (package
    (name "emacs-imakado")
    (version "20141024.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/imakado/emacs-imakado.git")
               (commit
                 "00a1e7eea2cb9e9066343a23927d6c747707902f")))
        (sha256
          (base32
            "0f3xdqhq9nprvl8bnmgrx20h08ddkfak0is29bsqwckkfgn7pmqp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/imakado/emacs-imakado")
    (synopsis
      "imakado's usefull macros and functions")
    (description
      "Documentation at https://melpa.org/#/imakado")
    (license #f)))

(define-public emacs-imenu-list
  (package
    (name "emacs-imenu-list")
    (version "20210420.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/imenu-list.git")
               (commit
                 "76f2335ee6f2f066d87fe4e4729219d70c9bc70d")))
        (sha256
          (base32
            "0b7q6h7ky7n20w1p471fmnwyfmc59c9ihgnl72m11dnciiz325wa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bmag/imenu-list")
    (synopsis
      "Show imenu entries in a separate buffer")
    (description
      "Documentation at https://melpa.org/#/imenu-list")
    (license #f)))

(define-public emacs-imenus
  (package
    (name "emacs-imenus")
    (version "20200730.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/imenus.el.git")
               (commit
                 "90200f5f22377903b405082eabe185447968f3e2")))
        (sha256
          (base32
            "04zhyn69bihxqddzsn9j0l6lxjpqkgdvbslh77cfdb4fp02cxsp1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/imenus.el")
    (synopsis
      "Imenu for multiple buffers and without subgroups")
    (description
      "Documentation at https://melpa.org/#/imenus")
    (license #f)))

(define-public emacs-import-js
  (package
    (name "emacs-import-js")
    (version "20180709.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Galooshi/emacs-import-js.git")
               (commit
                 "fb1f167e33c388b09a2afd32fbda90a67bfb2e40")))
        (sha256
          (base32
            "0if117lia2ykd6ai0cf5z4ddhsm9icijigwbrn079v7m9s8yl43p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grizzl))
    (arguments '(#:files ("plugin/import-js.el")))
    (home-page
      "http://github.com/Galooshi/emacs-import-js/")
    (synopsis "Import Javascript dependencies")
    (description
      "Documentation at https://melpa.org/#/import-js")
    (license #f)))

(define-public emacs-importmagic
  (package
    (name "emacs-importmagic")
    (version "20180520.303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anachronic/importmagic.el.git")
               (commit
                 "701dfcca5f3ab42be0f26a8d381d7116c79be850")))
        (sha256
          (base32
            "035830aizamh4c8hpnmfrbz9v9gy23d3nx0dv366l3q8mrh36l44"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-epc))
    (arguments
      '(#:files (:defaults "importmagicserver.py")))
    (home-page
      "https://github.com/anachronic/importmagic.el")
    (synopsis
      "Fix Python imports using importmagic.")
    (description
      "Documentation at https://melpa.org/#/importmagic")
    (license #f)))

(define-public emacs-impostman
  (package
    (name "emacs-impostman")
    (version "20211212.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flashcode/impostman.git")
               (commit
                 "083a2c1708af80779d23b562260cdf8246efa569")))
        (sha256
          (base32
            "18pz6rnfip3v4yqaffbqhw6ib1yn0rwjxlykp73w0zychcxxsxry"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/flashcode/impostman")
    (synopsis "Import Postman collections")
    (description
      "Documentation at https://melpa.org/#/impostman")
    (license #f)))

(define-public emacs-indent-lint
  (package
    (name "emacs-indent-lint")
    (version "20200812.949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/indent-lint.el.git")
               (commit
                 "c55f4ded11e8e50a96f43675a071354a8fb501c3")))
        (sha256
          (base32
            "0d7vkgzsx6ka4zliscsg6drqhg2bj16i911ryzmsp4v6hj294jrc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async-await emacs-async))
    (arguments
      '(#:files
        (:defaults (:exclude "flycheck-indent.el"))))
    (home-page
      "https://github.com/conao3/indent-lint.el")
    (synopsis "Async indentation checker")
    (description
      "Documentation at https://melpa.org/#/indent-lint")
    (license #f)))

(define-public emacs-indent-tools
  (package
    (name "emacs-indent-tools")
    (version "20210622.1207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-stuff/indent-tools.git")
               (commit
                 "c731f05fa3950e2e8580ec61b88abbc705639830")))
        (sha256
          (base32
            "0jri2vxd5a4sx93xq6kjcc5zx9yrhv789x3lyq6r2p2422diw2jr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-hydra emacs-yafolding))
    (home-page
      "https://gitlab.com/emacs-stuff/indent-tools/")
    (synopsis
      "Indent, navigate (and more) by blocks of indentation: yaml, python etc.")
    (description
      "Documentation at https://melpa.org/#/indent-tools")
    (license #f)))

(define-public emacs-indian-ext
  (package
    (name "emacs-indian-ext")
    (version "20190424.1547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paddymcall/indian-ext.git")
               (commit
                 "c941cde1205642c6b933ae6abbc47d199f609df0")))
        (sha256
          (base32
            "0523x5am383j1msaiflffa98mm05y38v4jvj144hbrhrdk3vykrs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paddymcall/indian-ext")
    (synopsis
      "Extension to Indian language utilities")
    (description
      "Documentation at https://melpa.org/#/indian-ext")
    (license #f)))

(define-public emacs-indicators
  (package
    (name "emacs-indicators")
    (version "20161211.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/indicators.el.git")
               (commit
                 "f62a1201f21453e3aca93f48483e65ae8251432e")))
        (sha256
          (base32
            "0n933jigp0awba2hxg3kwscmfmmqn3jwbrxcw3vw9aj0a5rg5bq6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/indicators.el")
    (synopsis
      "Display the buffer relative location of line in the fringe.")
    (description
      "Documentation at https://melpa.org/#/indicators")
    (license #f)))

(define-public emacs-indy
  (package
    (name "emacs-indy")
    (version "20190807.625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/indy.git")
               (commit
                 "abc5bee424780ad2de5520f8fefbf8e120c0d9ed")))
        (sha256
          (base32
            "1mvmd8vm9w6vhr7ablxk5pylwrga6knhjjbin9l1xlgrpdh2pglp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A minor mode and EDSL to manage your mode's indentation rules.")
    (description
      "Documentation at https://melpa.org/#/indy")
    (license #f)))

(define-public emacs-inf-clojure
  (package
    (name "emacs-inf-clojure")
    (version "20211027.1611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/inf-clojure.git")
               (commit
                 "765653dc23dc2a2c1520a1e24332ab9d4b49dd47")))
        (sha256
          (base32
            "1hbylg5nsix65a85bibwgzcyjkf19rjvdkg04p9hnvsgh59x2d5l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "http://github.com/clojure-emacs/inf-clojure")
    (synopsis
      "Run an external Clojure process in an Emacs buffer")
    (description
      "Documentation at https://melpa.org/#/inf-clojure")
    (license #f)))

(define-public emacs-inf-crystal
  (package
    (name "emacs-inf-crystal")
    (version "20180119.211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/inf-crystal.el.git")
               (commit
                 "02007b2a2a3bea44902d7c83c4acba1e39d278e3")))
        (sha256
          (base32
            "18627gvpgw2ay7zcbglw6gwpslgh69hbvynwcyqln4c17fk9h0kw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-crystal-mode))
    (home-page
      "https://github.com/brantou/inf-crystal.el")
    (synopsis
      "Run a Inferior-Crystal process in a buffer")
    (description
      "Documentation at https://melpa.org/#/inf-crystal")
    (license #f)))

(define-public emacs-inf-mongo
  (package
    (name "emacs-inf-mongo")
    (version "20180408.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/endofunky/inf-mongo.git")
               (commit
                 "2e498d1c88bd1904eeec18ed06b1a0cf8bdc2a92")))
        (sha256
          (base32
            "1m6skisj6r3fbxadpwwgf3a3934b2qvwb7zj975qksxq56ij0wkq"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/endofunky/inf-mongo")
    (synopsis
      "Run a MongoDB shell process in a buffer")
    (description
      "Documentation at https://melpa.org/#/inf-mongo")
    (license #f)))

(define-public emacs-info-buffer
  (package
    (name "emacs-info-buffer")
    (version "20170112.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/llvilanova/info-buffer.git")
               (commit
                 "d35dad6e766c6e2ddb8dc6acb4ce5b6e10fbcaa7")))
        (sha256
          (base32
            "0czkp7cf7qmdm1jdn67gxyxz8b4qj2kby8if50d450xqwbx0da7x"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/llvilanova/info-buffer")
    (synopsis
      "Display info topics in separate buffers")
    (description
      "Documentation at https://melpa.org/#/info-buffer")
    (license #f)))

(define-public emacs-inform
  (package
    (name "emacs-inform")
    (version "20200723.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieter-wilhelm/inform.git")
               (commit
                 "8ff0a19a9f40cfa8283da8ed73de94c35a327423")))
        (sha256
          (base32
            "1rg3v554zjx1mrw1wz2agfrr9317fzj1bqkn82m9r4ys91gx1qh4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dieter-wilhelm/inform")
    (synopsis
      "Symbol links in Info buffers to their help documentation.")
    (description
      "Documentation at https://melpa.org/#/inform")
    (license #f)))

(define-public emacs-inform7
  (package
    (name "emacs-inform7")
    (version "20200430.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/inform7-mode.git")
               (commit
                 "a409bbc6f04264f7f00616a995fa6ecf59d33d0d")))
        (sha256
          (base32
            "1sai118i5ry58jjc3777kn2ca2nhaxszhl0va6gyy7j2cdpg8gpy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/GuiltyDolphin/inform7-mode")
    (synopsis
      "Major mode for working with Inform 7 files")
    (description
      "Documentation at https://melpa.org/#/inform7")
    (license #f)))

(define-public emacs-inherit-local
  (package
    (name "emacs-inherit-local")
    (version "20170409.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shlevy/inherit-local.git")
               (commit
                 "b1f4ff9c41f9d64e4adaf5adcc280b82f084cdc7")))
        (sha256
          (base32
            "1fargashyqn4ga420k3ikc1akf7mw3zcarpg24gh2591p4swa0ih"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shlevy/inherit-local/tree-master/")
    (synopsis "Inherited buffer-local variables")
    (description
      "Documentation at https://melpa.org/#/inherit-local")
    (license #f)))

(define-public emacs-inheritenv
  (package
    (name "emacs-inheritenv")
    (version "20210204.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/inheritenv.git")
               (commit
                 "7e4c8b0d0a43b6f1c6c4d6dbd2f3bf5ce7f20067")))
        (sha256
          (base32
            "1qc54wx5f1yvap9hxi1k5qqsascxxs9lq317qpzipmbazw7qk7ch"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/inheritenv")
    (synopsis
      "Make temp buffers inherit buffer-local environment variables")
    (description
      "Documentation at https://melpa.org/#/inheritenv")
    (license #f)))

(define-public emacs-init-open-recentf
  (package
    (name "emacs-init-open-recentf")
    (version "20210528.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/init-open-recentf.el.git")
               (commit
                 "c019ea85a9c589815b0af60153858d09bcef130e")))
        (sha256
          (base32
            "12jwz0ssfxz1z55fb7v978xz8pwnclnqnzq5pqggzb06zkfxx7iv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/init-open-recentf.el")
    (synopsis
      "Invoke a command immediately after startup")
    (description
      "Documentation at https://melpa.org/#/init-open-recentf")
    (license #f)))

(define-public emacs-ink-mode
  (package
    (name "emacs-ink-mode")
    (version "20201105.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/ink-mode.git")
               (commit
                 "63c7ef39acf434a1682951bcf352e8fe1e1ac6d9")))
        (sha256
          (base32
            "1akjzbivwgpywfbazid8r8300nm5wnsj0nw5hmb25xlrcxl88y79"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/Kungsgeten/ink-mode")
    (synopsis
      "Major mode for writing interactive fiction in Ink")
    (description
      "Documentation at https://melpa.org/#/ink-mode")
    (license #f)))

(define-public emacs-inline-crypt
  (package
    (name "emacs-inline-crypt")
    (version "20170824.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodel-the-Vociferous/inline-crypt-el.git")
               (commit
                 "281385b383f850fd2e895926b1cef804dd052633")))
        (sha256
          (base32
            "0hjmq8j7y4wnjgk6z92w4ci0ag9fm6rn63z9mi3krvdv154vz2n0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Sodel-the-Vociferous/inline-crypt-el")
    (synopsis "Simple inline encryption via openssl")
    (description
      "Documentation at https://melpa.org/#/inline-crypt")
    (license #f)))

(define-public emacs-insert-kaomoji
  (package
    (name "emacs-insert-kaomoji")
    (version "20210707.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~pkal/insert-kaomoji")
               (commit
                 "e818845a99d418e04c1685f06fe25116916f6168")))
        (sha256
          (base32
            "0acyzysz04sd3rahymw6x3a8zy57sy84d36zp6prd62y4w0sw361"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "KAOMOJIS")))
    (home-page
      "https://git.sr.ht/~pkal/insert-kaomoji")
    (synopsis "Easily insert kaomojis")
    (description
      "Documentation at https://melpa.org/#/insert-kaomoji")
    (license #f)))

(define-public emacs-insfactor
  (package
    (name "emacs-insfactor")
    (version "20141117.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/duelinmarkers/insfactor.el.git")
               (commit
                 "7ef5446cebb08a17d4106d2e6f3c053e49e1e829")))
        (sha256
          (base32
            "112s3c0ii8zjc6vlj2im2qd2pl3hb95pq4zibm86gjpw428wd8iy"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/duelinmarkers/insfactor.el")
    (synopsis
      "Client for a Clojure project with insfactor in it")
    (description
      "Documentation at https://melpa.org/#/insfactor")
    (license #f)))

(define-public emacs-instapaper
  (package
    (name "emacs-instapaper")
    (version "20110419.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.carcosa.net/jmcbray/emacs-instapaper.git")
               (commit
                 "f21531bcb935e7e9b9e8df83dd0e0838adbf9b1b")))
        (sha256
          (base32
            "1ckkdkwhhyc8nwz293m18i526817gldd8br193px0hwfaxqlxadl"))))
    (build-system melpa-build-system)
    (home-page
      "htts://bitbucket.org/jfm/emacs-instapaper")
    (synopsis "No description available.")
    (description
      "Documentation at https://melpa.org/#/instapaper")
    (license #f)))

(define-public emacs-intel-hex-mode
  (package
    (name "emacs-intel-hex-mode")
    (version "20180423.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/intel-hex-mode.git")
               (commit
                 "e83c94e1c31a8435a88b3ae395f2bc842ef83217")))
        (sha256
          (base32
            "0jpc6wh3agdh38wdjr1x880iiaj6698nr8dkgx114fsfj1la6f7v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/intel-hex-mode")
    (synopsis "Mode for Intel Hex files.")
    (description
      "Documentation at https://melpa.org/#/intel-hex-mode")
    (license #f)))

(define-public emacs-intellij-theme
  (package
    (name "emacs-intellij-theme")
    (version "20171017.1415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fommil/emacs-intellij-theme.git")
               (commit
                 "1bbfff8e6742d18e9b77ed796f44da3b7bd10606")))
        (sha256
          (base32
            "0ml1gi2cn6h3xm5c78vxwv327r0rgimia1vqqi9jb09yb6lckbgj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Inspired by IntelliJ's default theme")
    (description
      "Documentation at https://melpa.org/#/intellij-theme")
    (license #f)))

(define-public emacs-interval-list
  (package
    (name "emacs-interval-list")
    (version "20150327.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/interval-list.git")
               (commit
                 "38af7ecf0a493ad8f487074938a2a115f3531177")))
        (sha256
          (base32
            "1zv6m24ryls9hvla3hf8wzp6r7fzbxa1lzr1mb0wz0s292l38wjz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/interval-list")
    (synopsis
      "Interval list data structure for 1D selections")
    (description
      "Documentation at https://melpa.org/#/interval-list")
    (license #f)))

(define-public emacs-interval-tree
  (package
    (name "emacs-interval-tree")
    (version "20130325.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/interval-tree.git")
               (commit
                 "301302f480617091cf3ab6989caac385d52543dc")))
        (sha256
          (base32
            "0fqnn9xhrc9hkaiziafjgg288l6m05416z9kz8l5845fnqsb7pb3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/interval-tree")
    (synopsis
      "Interval tree data structure for 1D range queries")
    (description
      "Documentation at https://melpa.org/#/interval-tree")
    (license #f)))

(define-public emacs-iodine-theme
  (package
    (name "emacs-iodine-theme")
    (version "20151031.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/srdja/iodine-theme.git")
               (commit
                 "02fb780e1d8d8a6b9c709bfac399abe1665c6999")))
        (sha256
          (base32
            "14zfxa8fc7h4rkz1hyplwf4q2lga3l5dd7a2xq5kk0kvf2fs4mk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/srdja/iodine-theme")
    (synopsis "A light emacs color theme")
    (description
      "Documentation at https://melpa.org/#/iodine-theme")
    (license #f)))

(define-public emacs-iplayer
  (package
    (name "emacs-iplayer")
    (version "20161120.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csrhodes/iplayer-el.git")
               (commit
                 "b788fffa4b36bbd558047ffa6be51b1f0f462f23")))
        (sha256
          (base32
            "0x82mxbc6f5azzg7c4zrxz1q763k8i3y1kfb79xfspb2i64dgg5g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/csrhodes/iplayer-el")
    (synopsis
      "Browse and download BBC TV/radio shows")
    (description
      "Documentation at https://melpa.org/#/iplayer")
    (license #f)))

(define-public emacs-iqa
  (package
    (name "emacs-iqa")
    (version "20200520.1137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/a13/iqa.el.git")
               (commit
                 "c1077aca6553cb2011f21b178e10271a17fe4f58")))
        (sha256
          (base32
            "0rr8m477hma3aaqxzmsayms6qgpf3ff1vx5bgcvbz27ddri375hh"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/a13/iqa.el")
    (synopsis
      "Init file(and directory) Quick Access")
    (description
      "Documentation at https://melpa.org/#/iqa")
    (license #f)))

(define-public emacs-iscroll
  (package
    (name "emacs-iscroll")
    (version "20210128.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/casouri/iscroll.git")
               (commit
                 "d6e11066169d232fe23c2867d44c012722ddfc5a")))
        (sha256
          (base32
            "0pbcr5bwmw2ikwg266q2fpxaf0z5h5cl1rp3rhhn9i9yn7hlfc78"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/casouri/iscroll")
    (synopsis "Smooth scrolling over images")
    (description
      "Documentation at https://melpa.org/#/iscroll")
    (license #f)))

(define-public emacs-isearch-symbol-at-point
  (package
    (name "emacs-isearch-symbol-at-point")
    (version "20130728.2221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/isearch-symbol-at-point.git")
               (commit
                 "51a1029bec1ec414885f9edb7e5947603dffdab2")))
        (sha256
          (base32
            "09z49850c32x0rchxg203cxg504xi2b6cjgnd0i4axcs5fmq7gv9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/re5et/isearch-symbol-at-point")
    (synopsis
      "Use isearch to search for the symbol at point")
    (description
      "Documentation at https://melpa.org/#/isearch-symbol-at-point")
    (license #f)))

(define-public emacs-itail
  (package
    (name "emacs-itail")
    (version "20171112.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/itail.git")
               (commit
                 "6e43c20da03be3b9c6ece93b7dc3495975ec1888")))
        (sha256
          (base32
            "044nzxh1hq41faxw3lix0wy78vfz304pjcaa5a11dqfz7q3gx5cv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/re5et/itail")
    (synopsis "An interactive tail mode")
    (description
      "Documentation at https://melpa.org/#/itail")
    (license #f)))

(define-public emacs-iter2
  (package
    (name "emacs-iter2")
    (version "20211119.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/iter2.git")
               (commit
                 "077684feec98ce6d5e283a13f056c083986628a2")))
        (sha256
          (base32
            "12flc98nv353cqr9qbkasgdmiyf9c3iw4apzh899xw857j1h5qdr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/doublep/iter2")
    (synopsis "Reimplementation of Elisp generators")
    (description
      "Documentation at https://melpa.org/#/iter2")
    (license #f)))

(define-public emacs-ivs-edit
  (package
    (name "emacs-ivs-edit")
    (version "20170818.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/ivs-edit.git")
               (commit
                 "5db39c234aa7393b591168a4fd0a9a4cbbca347d")))
        (sha256
          (base32
            "1sdl83cf87zbv0ynvb6qlgbpm4d3dqhdn84jhhs5j247r5qzhmz6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files
        ("ivs-edit.el"
         "IVD_Sequences.txt"
         "jp-old-style.txt")))
    (home-page "http://github.com/kawabata/ivs-edit")
    (synopsis
      "IVS (Ideographic Variation Sequence) editing tool")
    (description
      "Documentation at https://melpa.org/#/ivs-edit")
    (license #f)))

(define-public emacs-ivy-clipmenu
  (package
    (name "emacs-ivy-clipmenu")
    (version "20200302.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wpcarro/ivy-clipmenu.el.git")
               (commit
                 "ef25acf3f058fe1ede3a29fae2e9cdac8b08cd17")))
        (sha256
          (base32
            "1yzvaf95pncfi1r3xj8h6393dfvx291q3ahdwpp7qn3jh71kjx6k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-dash emacs-ivy))
    (home-page
      "https://github.com/wpcarro/ivy-clipmenu.el")
    (synopsis "Ivy client for clipmenu")
    (description
      "Documentation at https://melpa.org/#/ivy-clipmenu")
    (license #f)))

(define-public emacs-ivy-emoji
  (package
    (name "emacs-ivy-emoji")
    (version "20200316.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sbozzolo/ivy-emoji.git")
               (commit
                 "a1b7d32048278afd9b06536a8af96f533639d146")))
        (sha256
          (base32
            "0h3051qq6xjc7gkl2a8if9b9ak6wnlc4gmh268s8jvi0nd8dfw2z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/sbozzolo/ivy-emoji.git")
    (synopsis "Insert emojis with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-emoji")
    (license #f)))

(define-public emacs-ivy-historian
  (package
    (name "emacs-ivy-historian")
    (version "20210714.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/historian.el.git")
               (commit
                 "852cb4e72c0f78c8dbb2c972bdcb4e7b0108ff4c")))
        (sha256
          (base32
            "031624grhvv5ix3gvnd8lzpws80lb5r272yggl1k57rsayyv55ix"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-historian emacs-ivy emacs-flx))
    (arguments '(#:files ("ivy-historian.el")))
    (home-page
      "https://github.com/PythonNut/historian.el")
    (synopsis
      "Persistently store selected minibuffer candidates")
    (description
      "Documentation at https://melpa.org/#/ivy-historian")
    (license #f)))

(define-public emacs-ivy-hydra
  (package
    (name "emacs-ivy-hydra")
    (version "20210311.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "1c6b3da377a840e898b14020133f59fca9ceea1c")))
        (sha256
          (base32
            "1w8x2qk8lafnn6ksv1anixayyl476y1j6hp2amfnqmdkh0vnh63v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-hydra))
    (arguments '(#:files ("ivy-hydra.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Additional key bindings for Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-hydra")
    (license #f)))

(define-public emacs-ivy-mpdel
  (package
    (name "emacs-ivy-mpdel")
    (version "20190428.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpdel/ivy-mpdel.git")
               (commit
                 "a42dcc943914c71975c115195d38c739f25e475c")))
        (sha256
          (base32
            "0zf007j3i9prlsqjaf0xw7ylaim463f867nfc63fpsr508xsn5rd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-libmpdel emacs-mpdel))
    (home-page
      "https://gitlab.petton.fr/mpdel/ivy-mpdel")
    (synopsis "Ivy interface to navigate MPD")
    (description
      "Documentation at https://melpa.org/#/ivy-mpdel")
    (license #f)))

(define-public emacs-ivy-omni-org
  (package
    (name "emacs-ivy-omni-org")
    (version "20200810.1050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/ivy-omni-org.git")
               (commit
                 "a6b284f65b229d9b118b4316c2f6377de93400b1")))
        (sha256
          (base32
            "028c51z4glxxrni1vjdzs9l1475jmcjagpgwaryiqdwx6clia59x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-dash))
    (home-page
      "https://github.com/akirak/ivy-omni-org")
    (synopsis "Browse anything in Org mode")
    (description
      "Documentation at https://melpa.org/#/ivy-omni-org")
    (license #f)))

(define-public emacs-ivy-pass
  (package
    (name "emacs-ivy-pass")
    (version "20170812.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/ivy-pass.git")
               (commit
                 "5b523de1151f2109fdd6a8114d0af12eef83d3c5")))
        (sha256
          (base32
            "18crb4zh2pjf0cmv3b913m9vfng27girjwfqc3mk7vqd1r5a49yk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-password-store))
    (home-page
      "https://github.com/ecraven/ivy-pass/")
    (synopsis "ivy interface for pass")
    (description
      "Documentation at https://melpa.org/#/ivy-pass")
    (license #f)))

(define-public emacs-ivy-phpunit
  (package
    (name "emacs-ivy-phpunit")
    (version "20180219.915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/12pt/ivy-phpunit.git")
               (commit
                 "ffedb0138d36564e8e36a28fd9bc71ea8944681f")))
        (sha256
          (base32
            "0kf1k3jqg2r20x985h6brg92sg7y47c5vkfjky8xp11gqyqw47bi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-phpunit))
    (home-page "https://github.com/12pt/ivy-phpunit")
    (synopsis "Ivy integration for phpunit.el")
    (description
      "Documentation at https://melpa.org/#/ivy-phpunit")
    (license #f)))

(define-public emacs-ivy-prescient
  (package
    (name "emacs-ivy-prescient")
    (version "20210425.1720")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/prescient.el.git")
               (commit
                 "292ac9fe351d469f44765d487f6b9a1c1a68ad1e")))
        (sha256
          (base32
            "0ywx7q41i9pzmfgwv83mz5z17gril2s0r7y77hbbriww5yy1ihx4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-ivy))
    (arguments '(#:files ("ivy-prescient.el")))
    (home-page
      "https://github.com/raxod502/prescient.el")
    (synopsis "prescient.el + Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-prescient")
    (license #f)))

(define-public emacs-ivy-purpose
  (package
    (name "emacs-ivy-purpose")
    (version "20160724.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/ivy-purpose.git")
               (commit
                 "0495f2f3aed64d7e0028125e76a9a68f8fc4107e")))
        (sha256
          (base32
            "1hiw7mnrr0cnnp0a2mh837pzdaknadwv0sk82vya6blx0a7m691g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-window-purpose))
    (home-page "https://github.com/bmag/ivy-purpose")
    (synopsis "Ivy Interface for Purpose")
    (description
      "Documentation at https://melpa.org/#/ivy-purpose")
    (license #f)))

(define-public emacs-ivy-rich
  (package
    (name "emacs-ivy-rich")
    (version "20210409.931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yevgnen/ivy-rich.git")
               (commit
                 "600b8183ed0be8668dcc548cc2c8cb94b001363b")))
        (sha256
          (base32
            "1dv6vr7fv32v5m04zdy02sdajpvrnpc4i3pbh2dwfv73ff8d8yxm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (arguments '(#:files ("*.el")))
    (home-page "https://github.com/Yevgnen/ivy-rich")
    (synopsis
      "More friendly display transformer for ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-rich")
    (license #f)))

(define-public emacs-ivy-rtags
  (package
    (name "emacs-ivy-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-rtags))
    (arguments '(#:files ("src/ivy-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags completion back-end for ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-rtags")
    (license #f)))

(define-public emacs-ivy-spotify
  (package
    (name "emacs-ivy-spotify")
    (version "20210329.312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify.git")
               (commit
                 "5c1dcf0182135cda4191d4ba206fe2f265100293")))
        (sha256
          (base32
            "06wj2pixhjgqddl9g2wkv7cq9gz9yjb46cb1jrlbya3rdjyfb6h5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-espotify emacs-ivy))
    (arguments '(#:files ("ivy-spotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Search spotify with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-spotify")
    (license #f)))

(define-public emacs-ivy-xref
  (package
    (name "emacs-ivy-xref")
    (version "20211008.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/ivy-xref.git")
               (commit
                 "a82e8e117d2dd62c28b6a3e3d6e4cfb11c0bda38")))
        (sha256
          (base32
            "0h4cnhfqgrzm63kfrlz2mhgsk20jkcq18gjx9pvbbhhg59xvvnaj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/alexmurray/ivy-xref")
    (synopsis "Ivy interface for xref results")
    (description
      "Documentation at https://melpa.org/#/ivy-xref")
    (license #f)))

(define-public emacs-jabber-otr
  (package
    (name "emacs-jabber-otr")
    (version "20150918.1144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/emacs-jabber-otr.git")
               (commit
                 "2692b1530234e0ba9a0d6c1eaa1cbe8679f193c0")))
        (sha256
          (base32
            "0yv86nadp6dfzl05vhk8c1kahg2pcrhfmd3mnfjrngp7ksac5lyf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jabber))
    (arguments '(#:files (:defaults "emacs-otr.py")))
    (home-page
      "https://github.com/legoscia/emacs-jabber-otr/")
    (synopsis
      "Off-The-Record messaging for jabber.el")
    (description
      "Documentation at https://melpa.org/#/jabber-otr")
    (license #f)))

(define-public emacs-jade-mode
  (package
    (name "emacs-jade-mode")
    (version "20210908.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit
                 "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32
            "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("jade-mode.el")))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "Major mode for editing .jade files")
    (description
      "Documentation at https://melpa.org/#/jade-mode")
    (license #f)))

(define-public emacs-jastadd-ast-mode
  (package
    (name "emacs-jastadd-ast-mode")
    (version "20200926.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rudi/jastadd-ast-mode.git")
               (commit
                 "b7a0e32b669e726c8ccc348dd6b18ad4a7c70e1b")))
        (sha256
          (base32
            "1669lchqh07pd5c0b2xv8230dz0189hdn86vm37x8hnv8l742jg6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rudi/jastadd-ast-mode")
    (synopsis
      "Major mode for editing JastAdd AST files")
    (description
      "Documentation at https://melpa.org/#/jastadd-ast-mode")
    (license #f)))

(define-public emacs-javadoc-lookup
  (package
    (name "emacs-javadoc-lookup")
    (version "20160214.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/javadoc-lookup.git")
               (commit
                 "507a2dd443d60b537b8f779c1847e2cd0ccd1382")))
        (sha256
          (base32
            "16gywcma1s8kslwznlxwlx0xj0gs5g31637kb74vfdplk48f04zj"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" ("webcache" "webcache/*"))))
    (home-page
      "https://github.com/skeeto/javadoc-lookup")
    (synopsis "Javadoc Emacs integration with Maven")
    (description
      "Documentation at https://melpa.org/#/javadoc-lookup")
    (license #f)))

(define-public emacs-jaword
  (package
    (name "emacs-jaword")
    (version "20210306.420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/jaword.git")
               (commit
                 "783544a265f91b2e568b52311afb36e3691d5ad3")))
        (sha256
          (base32
            "09gn08c9wz60jc8jh5y3bv7qymp0ciz62bk5sjwkwgnq5mkpsf49"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tinysegmenter))
    (home-page "http://zk-phi.github.io/")
    (synopsis
      "Minor-mode for handling Japanese words better")
    (description
      "Documentation at https://melpa.org/#/jaword")
    (license #f)))

(define-public emacs-jedi
  (package
    (name "emacs-jedi")
    (version "20191011.1750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi.git")
               (commit
                 "e942a0e410cbb2a214c9cb30aaf0e47eb0895b78")))
        (sha256
          (base32
            "1c4nqgg1w2qv0mhpi6hhz3xr5kk4bbxc951fhik6dpi2c2w8p73s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-jedi-core emacs-auto-complete))
    (arguments '(#:files ("jedi.el")))
    (home-page "unspecified")
    (synopsis "a Python auto-completion for Emacs")
    (description
      "Documentation at https://melpa.org/#/jedi")
    (license #f)))

(define-public emacs-jedi-core
  (package
    (name "emacs-jedi-core")
    (version "20210503.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi.git")
               (commit
                 "e942a0e410cbb2a214c9cb30aaf0e47eb0895b78")))
        (sha256
          (base32
            "1c4nqgg1w2qv0mhpi6hhz3xr5kk4bbxc951fhik6dpi2c2w8p73s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-epc emacs-python-environment))
    (arguments
      '(#:files
        ("jedi-core.el"
         "jediepcserver.py"
         "Makefile"
         "setup.py")))
    (home-page "unspecified")
    (synopsis
      "Common code of jedi.el and company-jedi.el")
    (description
      "Documentation at https://melpa.org/#/jedi-core")
    (license #f)))

(define-public emacs-jedi-direx
  (package
    (name "emacs-jedi-direx")
    (version "20140310.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi-direx.git")
               (commit
                 "7a2e677400717ed12b959cb5988e7b3fb1c12117")))
        (sha256
          (base32
            "1pgi5vnwz5agrpvy7nwg3gv2nfbbmimhk8dxkg81k6yf1iiqxcap"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jedi emacs-direx))
    (home-page "unspecified")
    (synopsis
      "Tree style source code viewer for Python buffer")
    (description
      "Documentation at https://melpa.org/#/jedi-direx")
    (license #f)))

(define-public emacs-jenkins
  (package
    (name "emacs-jenkins")
    (version "20200524.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmuslimov/jenkins.el.git")
               (commit
                 "bd06cdc57c0cb9217d773eeba06ecc998f10033b")))
        (sha256
          (base32
            "0g99bi3i27ay8xhz409k9ska9yy77j3k687l817k1fyhlyy5lpjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Minimalistic Jenkins client for Emacs")
    (description
      "Documentation at https://melpa.org/#/jenkins")
    (license #f)))

(define-public emacs-jest
  (package
    (name "emacs-jest")
    (version "20210219.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Emiller88/emacs-jest.git")
               (commit
                 "0fe875082e54bdbfe924808aa155b938ed90d401")))
        (sha256
          (base32
            "0dxzml0i4x072jwxsbv0nnj3ws1i3z1x2ybg3fqfnfvzy2vynx3w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-magit-popup
            emacs-projectile
            emacs-s
            emacs-js2-mode))
    (home-page
      "https://github.com/emiller88/emacs-jest/")
    (synopsis "helpers to run jest")
    (description
      "Documentation at https://melpa.org/#/jest")
    (license #f)))

(define-public emacs-jg-quicknav
  (package
    (name "emacs-jg-quicknav")
    (version "20170809.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeffgran/jg-quicknav.git")
               (commit
                 "c8d53e774d63e68a944092c08a026b57da741038")))
        (sha256
          (base32
            "0rdrryfppgj5smrds5gyyhc4z8x36aq3gxdpckq80rbl4s729chy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/jeffgran/jg-quicknav")
    (synopsis
      "Quickly navigate the file system to find a file.")
    (description
      "Documentation at https://melpa.org/#/jg-quicknav")
    (license #f)))

(define-public emacs-jinja2-mode
  (package
    (name "emacs-jinja2-mode")
    (version "20200718.730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paradoxxxzero/jinja2-mode.git")
               (commit
                 "ecd19a40b7832bb00f0a2244e3b0713d0bf3850d")))
        (sha256
          (base32
            "05z380d8ln53mx1gqa7awnv4wpqdhv7ggc91dds57681wzsqgz15"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A major mode for jinja2")
    (description
      "Documentation at https://melpa.org/#/jinja2-mode")
    (license #f)))

(define-public emacs-jknav
  (package
    (name "emacs-jknav")
    (version "20121006.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aculich/jknav.el.git")
               (commit
                 "861245715c728503dad6573278fdd75c271dbf8b")))
        (sha256
          (base32
            "1idby2rjkslw85593qd4zy6an9zz71yzwqc6rck57r54xyfs8mij"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically enable j/k keys for line-based navigation")
    (description
      "Documentation at https://melpa.org/#/jknav")
    (license #f)))

(define-public emacs-jmt-mode
  (package
    (name "emacs-jmt-mode")
    (version "20211027.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Michael-Allan/Java_Mode_Tamed.git")
               (commit
                 "647cae28087529d18367f895d7ef689c7f64c6bd")))
        (sha256
          (base32
            "086h53mmdjx30093zazwylx3fg7jvbcjy63q4ph63ybizsbiy5lg"))))
    (build-system melpa-build-system)
    (home-page "http://reluk.ca/project/Java/Emacs/")
    (synopsis "Java Mode Tamed")
    (description
      "Documentation at https://melpa.org/#/jmt-mode")
    (license #f)))

(define-public emacs-jpop
  (package
    (name "emacs-jpop")
    (version "20170410.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/jpop.el.git")
               (commit
                 "7628b03260be96576b34459d45959ee77d8b2110")))
        (sha256
          (base32
            "1x7qha7xyn2j225h7axhskngc8icjhgm3f451iq3qysj22q8g4d6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files (:defaults "create-file-alist.py")))
    (home-page "https://github.com/domtronn/jpop.el")
    (synopsis
      "Lightweight project caching and navigation framework")
    (description
      "Documentation at https://melpa.org/#/jpop")
    (license #f)))

(define-public emacs-jq-mode
  (package
    (name "emacs-jq-mode")
    (version "20200604.833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ljos/jq-mode.git")
               (commit
                 "1af31ba701cf844f938f840ed78867c9a28174b6")))
        (sha256
          (base32
            "0zxqvy1vya0f0yrfp622hhf400cm5ygwl7mjdj5scwfk2y852xw1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ljos/jq-mode")
    (synopsis "Edit jq scripts.")
    (description
      "Documentation at https://melpa.org/#/jq-mode")
    (license #f)))

(define-public emacs-jquery-doc
  (package
    (name "emacs-jquery-doc")
    (version "20150812.758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/jquery-doc.el.git")
               (commit
                 "24032284919b942ec27707d929bdd8bf48420062")))
        (sha256
          (base32
            "0gh2bgmsbi9lby89ssvl49kpz07jqrfnyg47g6b9xmf5rw42s1z9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "jQuery api documentation interface for emacs")
    (description
      "Documentation at https://melpa.org/#/jquery-doc")
    (license #f)))

(define-public emacs-js-doc
  (package
    (name "emacs-js-doc")
    (version "20160715.434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/js-doc.git")
               (commit
                 "f0606e89d5aa89146f96edb38cf69af0068a9d1e")))
        (sha256
          (base32
            "1ffayl6hca9zanbznh6rkql7fbr53id1lyrj2vllx8zakfac4dyv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mooz/js-doc")
    (synopsis "Insert JsDoc style comment easily")
    (description
      "Documentation at https://melpa.org/#/js-doc")
    (license #f)))

(define-public emacs-js-format
  (package
    (name "emacs-js-format")
    (version "20170119.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/futurist/js-format.el.git")
               (commit
                 "544bda9be72b74ec2d442543ba60cff727d96669")))
        (sha256
          (base32
            "18wr2z2w2fqgy51f5m5izrnywarxn6w4qs04lsgbwlsc6ahpwwpf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (arguments
      '(#:files (:defaults "*.js" "*.json" "styles")))
    (home-page
      "http://github.com/futurist/js-format.el")
    (synopsis
      "Format or transform code style using NodeJS server with different javascript formatter")
    (description
      "Documentation at https://melpa.org/#/js-format")
    (license #f)))

(define-public emacs-js2-refactor
  (package
    (name "emacs-js2-refactor")
    (version "20210306.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/js-emacs/js2-refactor.el.git")
               (commit
                 "a0977c4ce1918cc266db9d6cd7a2ab63f3a76b9a")))
        (sha256
          (base32
            "0pjadcb5i8g8wkaf4hvh270r5z3qcsksnpcq5gzacqbgz5j2qcaf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-s
            emacs-multiple-cursors
            emacs-dash
            emacs-s
            emacs-yasnippet))
    (home-page "unspecified")
    (synopsis
      "A JavaScript refactoring library for emacs.")
    (description
      "Documentation at https://melpa.org/#/js2-refactor")
    (license #f)))

(define-public emacs-jscs
  (package
    (name "emacs-jscs")
    (version "20151015.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/papaeye/emacs-jscs.git")
               (commit
                 "9d39d0f2355e69a020bf76242504f3a33e013ccf")))
        (sha256
          (base32
            "1bqsv2drhcs8ia7nxss33f80p2mhcl4mr1nalphzw6s1f4mq2sgy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/papaeye/emacs-jscs")
    (synopsis
      "Consistent JavaScript editing using JSCS")
    (description
      "Documentation at https://melpa.org/#/jscs")
    (license #f)))

(define-public emacs-jsfmt
  (package
    (name "emacs-jsfmt")
    (version "20180920.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brettlangdon/jsfmt.el.git")
               (commit
                 "ca141a135c7700eaedef92561d334e1fb7dc28a1")))
        (sha256
          (base32
            "13b2y6q6hqgdf32vyph407jlgki8xf5kflqz8zi0hcrmb8wkrd5x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brettlangdon/jsfmt.el")
    (synopsis
      "Interface to jsfmt command for javascript files")
    (description
      "Documentation at https://melpa.org/#/jsfmt")
    (license #f)))

(define-public emacs-json-rpc-server
  (package
    (name "emacs-json-rpc-server")
    (version "20190714.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/json-rpc-server.el.git")
               (commit
                 "2f41d292b87916f6989e7ff5dc94da18ae6a9e4e")))
        (sha256
          (base32
            "1z5v7z98dinlayxzik45gjja93daxym75mh2shsy4wz8yclkw22p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcaw/json-rpc-server.el")
    (synopsis "Server-side JSON-RPC library.")
    (description
      "Documentation at https://melpa.org/#/json-rpc-server")
    (license #f)))

(define-public emacs-json-snatcher
  (package
    (name "emacs-json-snatcher")
    (version "20200916.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sterlingg/json-snatcher.git")
               (commit
                 "b28d1c0670636da6db508d03872d96ffddbc10f2")))
        (sha256
          (base32
            "1nxvi2iqcfp802rn3d2q4b91904nnxfp8w2d4zgak26ry7pjl90h"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/sterlingg/json-snatcher")
    (synopsis
      "Grabs the path to JSON values in a JSON file")
    (description
      "Documentation at https://melpa.org/#/json-snatcher")
    (license #f)))

(define-public emacs-jsonnet-mode
  (package
    (name "emacs-jsonnet-mode")
    (version "20211003.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tminor/jsonnet-mode.git")
               (commit
                 "f3d1f5118fa8328a2a43fd3d750c2afdd02b65ac")))
        (sha256
          (base32
            "02dqr916vxzqvlaf6wffnd7s1q082hnxhjwwip8iyjfj9fzk9yk1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mgyucht/jsonnet-mode")
    (synopsis "Major mode for editing jsonnet files")
    (description
      "Documentation at https://melpa.org/#/jsonnet-mode")
    (license #f)))

(define-public emacs-jst
  (package
    (name "emacs-jst")
    (version "20150604.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/jst-mode.git")
               (commit
                 "2a3fd16c992f7790dc67134ef06a814c3d20579c")))
        (sha256
          (base32
            "16jgmabcqrjb3v9c6q711jqn9dna88bmzm4880mdry69ixwcydxy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash emacs-pcache))
    (home-page
      "https://github.com/cheunghy/jst-mode")
    (synopsis "JS test mode")
    (description
      "Documentation at https://melpa.org/#/jst")
    (license #f)))

(define-public emacs-julia-mode
  (package
    (name "emacs-julia-mode")
    (version "20211023.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JuliaEditorSupport/julia-emacs.git")
               (commit
                 "47f43f7d839019cac3ba6559d93b29487ca118cb")))
        (sha256
          (base32
            "0gfm6xnijxxgc1fjqgbsvzf9m68pfcbdhrii6c7a29v5cw6khkaj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/JuliaEditorSupport/julia-emacs")
    (synopsis
      "Major mode for editing Julia source code")
    (description
      "Documentation at https://melpa.org/#/julia-mode")
    (license #f)))

(define-public emacs-julia-snail
  (package
    (name "emacs-julia-snail")
    (version "20211218.552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gcv/julia-snail.git")
               (commit
                 "c3dc0717da4cb837dfb28888b27c9b481662f7ba")))
        (sha256
          (base32
            "1rw2c0q3cyk8v5wcdpai329szwnjmc5d5xfb3pc2djc8x989snp3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-julia-mode
            emacs-s
            emacs-spinner
            emacs-vterm))
    (arguments
      '(#:files (:defaults "*.jl" "*.toml")))
    (home-page "https://github.com/gcv/julia-snail")
    (synopsis "Julia Snail")
    (description
      "Documentation at https://melpa.org/#/julia-snail")
    (license #f)))

(define-public emacs-jupyter
  (package
    (name "emacs-jupyter")
    (version "20211130.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nnicandro/emacs-jupyter.git")
               (commit
                 "df343af5e9187a400a9291fa6a2b0c69f3ad0425")))
        (sha256
          (base32
            "0sa8mi5gmb0n1ylgh1vz72nfgrjxny770l5z3xyxl0myw668vmcf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zmq
            emacs-simple-httpd
            emacs-websocket))
    (arguments
      '(#:files
        (:defaults "Makefile" "widget.html" "js")))
    (home-page
      "https://github.com/dzop/emacs-jupyter")
    (synopsis "Jupyter")
    (description
      "Documentation at https://melpa.org/#/jupyter")
    (license #f)))

(define-public emacs-justl
  (package
    (name "emacs-justl")
    (version "20210924.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/justl.el.git")
               (commit
                 "18604956b8f6ba58cba99470464c67f7b16ce329")))
        (sha256
          (base32
            "1d6y84gm5n9gkn7v9rhxhxsihabrdgx6mddam0pw75ka53q5s8wi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-transient
            emacs-xterm-color
            emacs-s
            emacs-f))
    (home-page "https://github.com/psibi/justl.el")
    (synopsis "Major mode for driving just files")
    (description
      "Documentation at https://melpa.org/#/justl")
    (license #f)))

(define-public emacs-kaesar
  (package
    (name "emacs-kaesar")
    (version "20160128.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-kaesar.git")
               (commit
                 "d087075cb1a46c2c85cd075220e09b2eaef9b86e")))
        (sha256
          (base32
            "1pl0514rj99b1j3y33x2bnhjbdbv9bfxgqn9498bf4ns8zayc6y9"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("kaesar.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-kaesar")
    (synopsis
      "Another AES algorithm encrypt/decrypt string with password.")
    (description
      "Documentation at https://melpa.org/#/kaesar")
    (license #f)))

(define-public emacs-kakoune
  (package
    (name "emacs-kakoune")
    (version "20210220.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmorag/kakoune.el.git")
               (commit
                 "d81bd00323ba10343a28bc855ee5ddbd09b7d2a5")))
        (sha256
          (base32
            "187dnrjp9khs1l17afwiw8dhk3znvirwzpllpv63fvzvc6gsi2hg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ryo-modal
            emacs-multiple-cursors
            emacs-expand-region))
    (home-page
      "https://github.com/jmorag/kakoune.el")
    (synopsis
      "A simulation, but not emulation, of kakoune")
    (description
      "Documentation at https://melpa.org/#/kakoune")
    (license #f)))

(define-public emacs-kana
  (package
    (name "emacs-kana")
    (version "20210531.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chenyanming/kana.git")
               (commit
                 "d3d550aad67ef8625b3860598bf3622f5b2a7d32")))
        (sha256
          (base32
            "0d5qnqhvnxw5009mq34jnnc19r01y4kz0ypnv1mby80g8jz2gl62"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/chenyanming/kana")
    (synopsis "Learn Japanese hiragana and katakana")
    (description
      "Documentation at https://melpa.org/#/kana")
    (license #f)))

(define-public emacs-kanji-mode
  (package
    (name "emacs-kanji-mode")
    (version "20160826.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wsgac/kanji-mode.git")
               (commit
                 "eda4f8666486689d36317db7dbda54fb73d3e3d2")))
        (sha256
          (base32
            "1m0s1kdgz1psiidpxcrzm8qmvmrmk5g2k8lz1lq357z482l4i7ll"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "kanji")))
    (home-page "http://github.com/wsgac/kanji-mode ")
    (synopsis
      "View stroke order for kanji characters at cursor")
    (description
      "Documentation at https://melpa.org/#/kanji-mode")
    (license #f)))

(define-public emacs-kaolin-themes
  (package
    (name "emacs-kaolin-themes")
    (version "20211023.1347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ogdenwebb/emacs-kaolin-themes.git")
               (commit
                 "ea6394619219b6d54b843836e3a6b2e7d8aaecec")))
        (sha256
          (base32
            "1awgh70g7k7bjjga8kd6rfd8k3fqzkswgxyf4qgrsjci80is8jcn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (arguments '(#:files (:defaults "themes/*.el")))
    (home-page
      "https://github.com/ogdenwebb/emacs-kaolin-themes")
    (synopsis "A set of eye pleasing themes")
    (description
      "Documentation at https://melpa.org/#/kaolin-themes")
    (license #f)))

(define-public emacs-keepass-mode
  (package
    (name "emacs-keepass-mode")
    (version "20211030.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ifosch/keepass-mode.git")
               (commit
                 "f432bb60f9f3bd027025140d723906dcabeefaef")))
        (sha256
          (base32
            "0wrzbcd070l8yjqxg7mmglc3kfgy420y3wnykky198y83xsv3qy2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ifosch/keepass-mode")
    (synopsis "Mode to open Keepass DB")
    (description
      "Documentation at https://melpa.org/#/keepass-mode")
    (license #f)))

(define-public emacs-keg-mode
  (package
    (name "emacs-keg-mode")
    (version "20200601.333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/keg.el.git")
               (commit
                 "f0a719892aed5b1b4b644f1339d1ace99c656100")))
        (sha256
          (base32
            "0vk4fdkai0ssq31ycckkz4iwp35ip5d8lnyisv4m3b98jv3pb6k0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("keg-mode.el")))
    (home-page "https://github.com/conao3/keg.el")
    (synopsis "Major mode for editing Keg files")
    (description
      "Documentation at https://melpa.org/#/keg-mode")
    (license #f)))

(define-public emacs-key-chord
  (package
    (name "emacs-key-chord")
    (version "20201222.2030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/key-chord.git")
               (commit
                 "7f7fd7c5bd2b996fa054779357e1566f7989e07d")))
        (sha256
          (base32
            "18bmd510yksskf67hj7jzcqh8gaaf1ipq044k49469p5f8fhjy2l"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "map pairs of simultaneously pressed keys to commands")
    (description
      "Documentation at https://melpa.org/#/key-chord")
    (license #f)))

(define-public emacs-key-leap
  (package
    (name "emacs-key-leap")
    (version "20160831.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MartinRykfors/key-leap.git")
               (commit
                 "b3f6ef15c8a13870475d5af159fa24b30f97dea0")))
        (sha256
          (base32
            "1f2k7jpxfvjirxzjc5c4s4lpg1hdgw8k7lfchx362jqijny1ipfp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MartinRykfors/key-leap")
    (synopsis
      "Leap between lines by typing keywords")
    (description
      "Documentation at https://melpa.org/#/key-leap")
    (license #f)))

(define-public emacs-key-seq
  (package
    (name "emacs-key-seq")
    (version "20150907.756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vlevit/key-seq.el.git")
               (commit
                 "e29b083a6427d061638749194fc249ef69ad2cc0")))
        (sha256
          (base32
            "05vpydcgiaya35b62cdjxna9y02vnwzzg6p8jh0dkr9k44h4iy3f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-key-chord))
    (home-page "http://github.com/vlevit/key-seq.el")
    (synopsis
      "map pairs of sequentially pressed keys to commands")
    (description
      "Documentation at https://melpa.org/#/key-seq")
    (license #f)))

(define-public emacs-keypression
  (package
    (name "emacs-keypression")
    (version "20200819.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chuntaro/emacs-keypression.git")
               (commit
                 "9427241f3fa539e4b5ad7581a05eb7e49f2cf518")))
        (sha256
          (base32
            "0p2pag2hzxswsf5hzjfm0nf4wpp40lsmxf1x6n9vfwfrpfk5b9ar"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chuntaro/emacs-keypression")
    (synopsis "Keystroke visualizer")
    (description
      "Documentation at https://melpa.org/#/keypression")
    (license #f)))

(define-public emacs-keytar
  (package
    (name "emacs-keytar")
    (version "20210523.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/keytar.git")
               (commit
                 "584395339f85a95ffe3ade3f4e30898bad495ecd")))
        (sha256
          (base32
            "0vqi7cq8952idymp9hm89v0pin5icj7ng2wxdsysqsy2crfyd5zm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-grammarly/keytar")
    (synopsis "Emacs Lisp interface for node-keytar")
    (description
      "Documentation at https://melpa.org/#/keytar")
    (license #f)))

(define-public emacs-keyword-search
  (package
    (name "emacs-keyword-search")
    (version "20180424.1102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/keyword-search/keyword-search.git")
               (commit
                 "f8475ecaddb8804a9be6bee47678207c86ac8dee")))
        (sha256
          (base32
            "1ymqnpm9his2bkchq23vwazprwyw0d2sdgza7zjxvs3q0f4nj0vx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juhp/keyword-search")
    (synopsis "browser keyword search from Emacs")
    (description
      "Documentation at https://melpa.org/#/keyword-search")
    (license #f)))

(define-public emacs-kfg
  (package
    (name "emacs-kfg")
    (version "20140909.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/czipperz/kfg.git")
               (commit
                 "d2c9dd26618fb2f7bf1e7b6eae193b1cceba3c97")))
        (sha256
          (base32
            "0xq835xzywks4b4kaz5i0pp759i23kibs5gkvvxasw0dncqh7j5c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/abingham/kfg")
    (synopsis "an emacs configuration system")
    (description
      "Documentation at https://melpa.org/#/kfg")
    (license #f)))

(define-public emacs-kill-or-bury-alive
  (package
    (name "emacs-kill-or-bury-alive")
    (version "20210320.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/kill-or-bury-alive.git")
               (commit
                 "534300796d5dc528462e2d5deb4c7a8932936909")))
        (sha256
          (base32
            "1kf4vbv2n2n5jp1qk1hh4f744h26h5283k0x6arpdpx5z7n9acqm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrkkrp/kill-or-bury-alive")
    (synopsis
      "Precise control over buffer killing in Emacs")
    (description
      "Documentation at https://melpa.org/#/kill-or-bury-alive")
    (license #f)))

(define-public emacs-kivy-mode
  (package
    (name "emacs-kivy-mode")
    (version "20210318.2106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kivy/kivy.git")
               (commit
                 "64dd0930226731c2fbb63e6894fa6aafebf5c841")))
        (sha256
          (base32
            "0nyyr3fsa09l3wiz7vscpm0xslqka4xsdqmfi87f0hihh316hg03"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("kivy/tools/highlight/kivy-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Emacs major mode for editing Kivy files")
    (description
      "Documentation at https://melpa.org/#/kivy-mode")
    (license #f)))

(define-public emacs-kodi-remote
  (package
    (name "emacs-kodi-remote")
    (version "20190622.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spiderbit/kodi-remote.el.git")
               (commit
                 "f5e932036c16e2b61a63020e006fc601e38d181e")))
        (sha256
          (base32
            "1gck7lvqxcr9ikrzlpvcf4408cq6i4s8ijgb0kdsbkfzv0w86934"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-f))
    (home-page
      "http://github.com/spiderbit/kodi-remote.el")
    (synopsis "Remote Control for Kodi")
    (description
      "Documentation at https://melpa.org/#/kodi-remote")
    (license #f)))

(define-public emacs-kolon-mode
  (package
    (name "emacs-kolon-mode")
    (version "20140122.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samvtran/kolon-mode.git")
               (commit
                 "5af0955e280ae991862189ebecd3937c5fc8fb9f")))
        (sha256
          (base32
            "0yr4yxwxgxp5pm9f8gaqlikxp26inv01inq0ya42dzam5yphkafw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/samvtran/kolon-mode")
    (synopsis
      "Syntax highlighting for Text::Xslate's Kolon syntax")
    (description
      "Documentation at https://melpa.org/#/kolon-mode")
    (license #f)))

(define-public emacs-kosmos-theme
  (package
    (name "emacs-kosmos-theme")
    (version "20170502.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/habamax/kosmos-theme.git")
               (commit
                 "616456d2376a75dc31190ad65137d179fbad4336")))
        (sha256
          (base32
            "193zwgwfnj0lyk0msa16y0dfg7asp953p3jm56d9wdacggbcraj9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/habamax/kosmos-theme")
    (synopsis
      "Black and lightgray theme with not so much syntax highlighting.")
    (description
      "Documentation at https://melpa.org/#/kosmos-theme")
    (license #f)))

(define-public emacs-kroman
  (package
    (name "emacs-kroman")
    (version "20150827.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/kroman-el.git")
               (commit
                 "90402b6ae40383e75d8ba97d66eee93eebf40f70")))
        (sha256
          (base32
            "11axxmhdpwgrcyjz200pf5bqzjw9wz4085r8p1n2vr5gx98374fr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Korean hangul romanization")
    (description
      "Documentation at https://melpa.org/#/kroman")
    (license #f)))

(define-public emacs-kubectx-mode
  (package
    (name "emacs-kubectx-mode")
    (version "20200116.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/terjesannum/emacs-kubectx-mode.git")
               (commit
                 "f08687ae5403eb18bbeffc6dafdfde469bdb9a36")))
        (sha256
          (base32
            "1yml417gj8ds3fiy0vvrv9vxnjyis157hcmhyn491hb67bd6xl5j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/terjesannum/emacs-kubectx-mode")
    (synopsis
      "Change kubectl context/namespace and show in mode line")
    (description
      "Documentation at https://melpa.org/#/kubectx-mode")
    (license #f)))

(define-public emacs-kubernetes-evil
  (package
    (name "emacs-kubernetes-evil")
    (version "20210830.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kubernetes-el/kubernetes-el.git")
               (commit
                 "73361de919cff8d773f347868850f6c694d942e7")))
        (sha256
          (base32
            "17imkanh7ay88s1ppzsdr7hf91rgqimx9v6p69srmqq5bpnwpnmy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-kubernetes emacs-evil))
    (arguments '(#:files ("kubernetes-evil.el")))
    (home-page "unspecified")
    (synopsis
      "Kubernetes keybindings for evil-mode.")
    (description
      "Documentation at https://melpa.org/#/kubernetes-evil")
    (license #f)))

(define-public emacs-l
  (package
    (name "emacs-l")
    (version "20211118.1837")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tarsius/l")
               (commit
                 "5e2c05478868e9e5fac909ac1bee535ffc5c6695")))
        (sha256
          (base32
            "11fmcqn9xpq8hqwf914yd715xrbfyymki95iq5y3r4x42gl30q7s"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~tarsius/l")
    (synopsis "Compact syntax for short lambda")
    (description
      "Documentation at https://melpa.org/#/l")
    (license #f)))

(define-public emacs-laguna-theme
  (package
    (name "emacs-laguna-theme")
    (version "20200928.2159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HenryNewcomer/laguna-theme.git")
               (commit
                 "61b18f6362b94e42ea5ab19a6f2debc2bd917eda")))
        (sha256
          (base32
            "0x46ns9gky937ygnsz899b1c1inffh8zw8icq9ja10pmvx6lh94h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/HenryNewcomer/laguna-theme")
    (synopsis
      "A theme that's easy on the eyes & focuses on importance.")
    (description
      "Documentation at https://melpa.org/#/laguna-theme")
    (license #f)))

(define-public emacs-lakota-input
  (package
    (name "emacs-lakota-input")
    (version "20200823.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~shoshin/lakota-input.git")
               (commit
                 "b74b9de284a0404a120bb15340def4dd2f9a4779")))
        (sha256
          (base32
            "1zn5n34jhjk1shjinjh3nv0x9y61gp7n5ywvmxwijffhva58h3w6"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~shoshin/lakota-input.git")
    (synopsis
      "Input modes for Lakota language orthographies")
    (description
      "Documentation at https://melpa.org/#/lakota-input")
    (license #f)))

(define-public emacs-lambdapi-mode
  (package
    (name "emacs-lambdapi-mode")
    (version "20211207.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Deducteam/lambdapi.git")
               (commit
                 "b4ce95c10abe91ee9abc6993b41d7f5ab95d49f9")))
        (sha256
          (base32
            "1pjvyhnq86pkl6lgany25ybyl5b3x3v4p1m7kk631zqrqzk481ms"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot
            emacs-math-symbol-lists
            emacs-highlight))
    (arguments
      '(#:files
        ("editors/emacs/*.el"
         (:exclude "editors/emacs/lambdapi-site-file.el"))))
    (home-page
      "https://github.com/Deducteam/lambdapi")
    (synopsis
      "A major mode for editing Lambdapi source code")
    (description
      "Documentation at https://melpa.org/#/lambdapi-mode")
    (license #f)))

(define-public emacs-langdoc
  (package
    (name "emacs-langdoc")
    (version "20150218.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/langdoc.git")
               (commit
                 "2c7223bacb116992d700ecb19a60df5c09c63424")))
        (sha256
          (base32
            "0svci7xs4iysv8ysf93g382arip0xpgi0fllw8xx2vrd70sz7lff"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tom-tan/langdoc/")
    (synopsis
      "Help to define help document mode for various languages")
    (description
      "Documentation at https://melpa.org/#/langdoc")
    (license #f)))

(define-public emacs-langtool
  (package
    (name "emacs-langtool")
    (version "20200529.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-langtool.git")
               (commit
                 "8276eccc5587bc12fd205ee58a7a982f0a136e41")))
        (sha256
          (base32
            "1pkfazn6qy6n4rg1rvw7b79b7nsp7xqdadhpah4xjvqxd6apqasz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("langtool.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-langtool")
    (synopsis
      "Grammar check utility using LanguageTool")
    (description
      "Documentation at https://melpa.org/#/langtool")
    (license #f)))

(define-public emacs-langtool-ignore-fonts
  (package
    (name "emacs-langtool-ignore-fonts")
    (version "20210526.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cjl8zf/langtool-ignore-fonts.git")
               (commit
                 "c3291c85b733b9047653cbb1f525655394610bdb")))
        (sha256
          (base32
            "1pmpnpbl1xanprmikawcy9v4441q3381mmyp1v0mgf0dyzg871m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-langtool))
    (arguments
      '(#:files (:defaults (:exclude "doc/*"))))
    (home-page
      "https://github.com/cjl8zf/langtool-ignore-fonts")
    (synopsis
      "Force langtool to ignore certain fonts")
    (description
      "Documentation at https://melpa.org/#/langtool-ignore-fonts")
    (license #f)))

(define-public emacs-language-detection
  (package
    (name "emacs-language-detection")
    (version "20161123.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andreasjansson/language-detection.el.git")
               (commit
                 "54a6ecf55304fba7d215ef38a4ec96daff2f35a4")))
        (sha256
          (base32
            "0p8kim8idh7hg9398kpgjawkxq9hb6fraxpamdkflg8gjk0h5ppa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andreasjansson/language-detection.el")
    (synopsis
      "Automatic language detection from code snippets")
    (description
      "Documentation at https://melpa.org/#/language-detection")
    (license #f)))

(define-public emacs-languagetool
  (package
    (name "emacs-languagetool")
    (version "20210722.702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PillFall/Emacs-LanguageTool.el.git")
               (commit
                 "d3665a97cc87577f434a7476e1194b43f35408a8")))
        (sha256
          (base32
            "0gpnczvdwrcvvd162mi9nf55b0vzbpfmbhan1bqzc84rbjw0bzql"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/PillFall/Emacs-LanguageTool.el")
    (synopsis
      "LanguageTool integration for grammar and spell check")
    (description
      "Documentation at https://melpa.org/#/languagetool")
    (license #f)))

(define-public emacs-lastpass
  (package
    (name "emacs-lastpass")
    (version "20201229.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/storvik/emacs-lastpass.git")
               (commit
                 "2366de7824b6c5f8e9ec6811d219dc06794e8630")))
        (sha256
          (base32
            "065nbgcs2q8gqw8alfa6lbabma6vjsqzl4mfkfpzgk566dan2x1p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/storvik/emacs-lastpass")
    (synopsis "LastPass command wrapper")
    (description
      "Documentation at https://melpa.org/#/lastpass")
    (license #f)))

(define-public emacs-latex-math-preview
  (package
    (name "emacs-latex-math-preview")
    (version "20190123.802")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/latex-math-preview/latex-math-preview.git")
               (commit
                 "90fd86da2d9514882146a5db40cb916fc533cf55")))
        (sha256
          (base32
            "063vnjhnxm2z9shkdv1j8kwyf37syczfkzxzh5z7w7aidvx55jzj"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/latex-math-preview/latex-math-preview")
    (synopsis
      "preview LaTeX mathematical expressions.")
    (description
      "Documentation at https://melpa.org/#/latex-math-preview")
    (license #f)))

(define-public emacs-latex-unicode-math-mode
  (package
    (name "emacs-latex-unicode-math-mode")
    (version "20170123.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Christoph-D/latex-unicode-math-mode.git")
               (commit
                 "eb4a5c9f9b00a58d2ca80f90782a851f4c8497b8")))
        (sha256
          (base32
            "1bsqaz14mb092cvq8fk4kkcgifhbpmnndlvvz8qhyfh8i5i92i8b"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.sty")))
    (home-page
      "https://github.com/Christoph-D/latex-unicode-math-mode")
    (synopsis
      "Input method for Unicode math symbols")
    (description
      "Documentation at https://melpa.org/#/latex-unicode-math-mode")
    (license #f)))

(define-public emacs-launch
  (package
    (name "emacs-launch")
    (version "20130619.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sfllaw/emacs-launch.git")
               (commit
                 "e7c3b573fc05fe4d3d322389079909311542e799")))
        (sha256
          (base32
            "0ciycsqzyj6ld60c7sfqjq59ln3jvk3w9vy606kqzpcvj01ihmv1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("launch.el")))
    (home-page
      "https://github.com/sfllaw/emacs-launch")
    (synopsis
      "launch files with OS-standard associated applications.")
    (description
      "Documentation at https://melpa.org/#/launch")
    (license #f)))

(define-public emacs-launch-mode
  (package
    (name "emacs-launch-mode")
    (version "20170106.512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iory/launch-mode.git")
               (commit
                 "25ebd4ba77afcbe729901eb74923dbe9ae81c313")))
        (sha256
          (base32
            "1pjb4gwzkk6djzyfqqxf6y5xvrsh4bi5ijg60zrdlnhivggnfbvn"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.py")))
    (home-page "https://github.com/iory/launch-mode")
    (synopsis "Major mode for launch-formatted text")
    (description
      "Documentation at https://melpa.org/#/launch-mode")
    (license #f)))

(define-public emacs-launchctl
  (package
    (name "emacs-launchctl")
    (version "20210611.2243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pekingduck/launchctl-el.git")
               (commit
                 "c9b7e93f5ec6fa504dfb03d60571cf3e5dc38e12")))
        (sha256
          (base32
            "0hbhbyl4qbc9b7hmkjpwclyfh4xnl5j51j18793wrh28xqpbkf0s"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/pekingduck/launchctl-el")
    (synopsis "Interface to launchctl on Mac OS X.")
    (description
      "Documentation at https://melpa.org/#/launchctl")
    (license #f)))

(define-public emacs-lavenderless-theme
  (package
    (name "emacs-lavenderless-theme")
    (version "20201222.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-colorless-themes))
    (arguments '(#:files ("lavenderless-theme.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A mostly colorless version of lavender-theme")
    (description
      "Documentation at https://melpa.org/#/lavenderless-theme")
    (license #f)))

(define-public emacs-leaf-defaults
  (package
    (name "emacs-leaf-defaults")
    (version "20210301.118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-defaults.el.git")
               (commit
                 "96ce39d4f16736f1e654e24eac16a2603976c724")))
        (sha256
          (base32
            "1z56x3wnyakilgxak2yyf6rf35072996szxfz712lmdwqs6xfqv4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-leaf emacs-leaf-keywords))
    (home-page
      "https://github.com/conao3/leaf-defaults.el")
    (synopsis "Awesome leaf config collections")
    (description
      "Documentation at https://melpa.org/#/leaf-defaults")
    (license #f)))

(define-public emacs-leaf-keywords
  (package
    (name "emacs-leaf-keywords")
    (version "20210816.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-keywords.el.git")
               (commit
                 "849b579f87c263e2f1d7fb7eda93b6ce441f217e")))
        (sha256
          (base32
            "00fnkk6hl9l64dgmkhsqibhna7gdpazs4j28f7833n1dmg626ki6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-leaf))
    (home-page
      "https://github.com/conao3/leaf-keywords.el")
    (synopsis
      "Additional leaf.el keywords for external packages")
    (description
      "Documentation at https://melpa.org/#/leaf-keywords")
    (license #f)))

(define-public emacs-lean-mode
  (package
    (name "emacs-lean-mode")
    (version "20211220.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "a4205749d20a09871f0951c34f919d4ee5fbdb55")))
        (sha256
          (base32
            "0jqfnwjwn5payjj1lfl1zvw8gpcdlc6k3lqbw6iwpzlyal7y0nyb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-f emacs-flycheck))
    (arguments '(#:files ("lean-*.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "A major mode for the Lean 3 language")
    (description
      "Documentation at https://melpa.org/#/lean-mode")
    (license #f)))

(define-public emacs-leanote
  (package
    (name "emacs-leanote")
    (version "20161223.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aborn/leanote-emacs.git")
               (commit
                 "d499e7b59bb1f1a2fabc0e4c26fb101ed62ebc7b")))
        (sha256
          (base32
            "1lg4zml26q97bx9jrmjikhnm3d74b12q2li5h8gpxx9m35wc360c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-pcache
            emacs-s
            emacs-async))
    (home-page
      "https://github.com/aborn/leanote-emacs")
    (synopsis
      "A minor mode writing markdown leanote")
    (description
      "Documentation at https://melpa.org/#/leanote")
    (license #f)))

(define-public emacs-learn-ocaml
  (package
    (name "emacs-learn-ocaml")
    (version "20211003.1412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pfitaxel/learn-ocaml.el.git")
               (commit
                 "ac6ef9cbd39f7d9ac0019e28da09aad5bc2cfae5")))
        (sha256
          (base32
            "1gsv9yir8l53qfz280ji7307vawrifxx80g7bb5kyq7s0k5zfsan"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pfitaxel/learn-ocaml.el")
    (synopsis "Emacs frontend for learn-ocaml")
    (description
      "Documentation at https://melpa.org/#/learn-ocaml")
    (license #f)))

(define-public emacs-ledger-mode
  (package
    (name "emacs-ledger-mode")
    (version "20211214.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ledger/ledger-mode.git")
               (commit
                 "3ec65b8931e8989ac590e95921e46f9e2fac6821")))
        (sha256
          (base32
            "10dxcwl94192yhilp9dimm2zrxpcz48rayd9w0vzk874qmn5mzz3"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "ledger-test.el")))
    (home-page "unspecified")
    (synopsis
      "Helper code for use with the \"ledger\" command-line tool")
    (description
      "Documentation at https://melpa.org/#/ledger-mode")
    (license #f)))

(define-public emacs-leerzeichen
  (package
    (name "emacs-leerzeichen")
    (version "20170422.1313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/leerzeichen.el.git")
               (commit
                 "5acf9855ecb2b2cd5da4402bb48df149e7525cc5")))
        (sha256
          (base32
            "1bx4pv51a9x8f51pjrms8jkfrpa3glwkh308svz05gnyi2g0r8hw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fgeller/leerzeichen.el")
    (synopsis
      "Minor mode to display whitespace characters.")
    (description
      "Documentation at https://melpa.org/#/leerzeichen")
    (license #f)))

(define-public emacs-legalese
  (package
    (name "emacs-legalese")
    (version "20200119.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/legalese.git")
               (commit
                 "e465471d2d5a62d35073d93e0f8d40387a82e302")))
        (sha256
          (base32
            "0xg4pyyyzd637i7shhq1frbva5rmy2j7y9cnf7zmms6a5qq4k1af"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jorgenschaefer/legalese")
    (synopsis "Add legalese to your program files")
    (description
      "Documentation at https://melpa.org/#/legalese")
    (license #f)))

(define-public emacs-leo
  (package
    (name "emacs-leo")
    (version "20211221.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtenders/emacs-leo.git")
               (commit
                 "bf3ca048479058023a7b109a5b84e84d24feecf7")))
        (sha256
          (base32
            "19zyrwwcp8ghfdwmaiwwzpymfzrd7lhxr11fs84ffjkds77jwlxy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mtenders/emacs-leo")
    (synopsis "Interface for dict.leo.org")
    (description
      "Documentation at https://melpa.org/#/leo")
    (license #f)))

(define-public emacs-letcheck
  (package
    (name "emacs-letcheck")
    (version "20160202.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/letcheck.git")
               (commit
                 "edf188ca2f85349e971b83f164c6484264e79426")))
        (sha256
          (base32
            "06hggcbz98qhfbvp0fxn89j98d0mmki4wc4k8kfzp5fhg071chbi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Fuco1/letcheck")
    (synopsis
      "Check the erroneous assignments in let forms")
    (description
      "Documentation at https://melpa.org/#/letcheck")
    (license #f)))

(define-public emacs-leuven-theme
  (package
    (name "emacs-leuven-theme")
    (version "20210602.709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fniessen/emacs-leuven-theme.git")
               (commit
                 "b8b5076d643046008ea1496559acdd4ddfdb649a")))
        (sha256
          (base32
            "16rfyjk0cp487ra6v5c1cmf106ixipr9b71zfp0bwm35wa2mvdic"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page
      "https://github.com/fniessen/emacs-leuven-theme")
    (synopsis
      "Awesome Emacs color theme on white background")
    (description
      "Documentation at https://melpa.org/#/leuven-theme")
    (license #f)))

(define-public emacs-lfe-mode
  (package
    (name "emacs-lfe-mode")
    (version "20210603.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rvirding/lfe.git")
               (commit
                 "3d2483d6a46552eaa832f8e6df5dc1162e58fc79")))
        (sha256
          (base32
            "1vpif0g45xh16sqqsjh9hin61kzc2la79pmrxl3rmw2jvpg6pzym"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/inferior-lfe.el"
         "emacs/lfe-mode.el"
         "emacs/lfe-indent.el")))
    (home-page "unspecified")
    (synopsis "Lisp Flavoured Erlang mode")
    (description
      "Documentation at https://melpa.org/#/lfe-mode")
    (license #f)))

(define-public emacs-liberime
  (package
    (name "emacs-liberime")
    (version "20211203.244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/merrickluo/liberime.git")
               (commit
                 "79b709debe036f98d74ac129934e59c4d08c1dd5")))
        (sha256
          (base32
            "1z1z8x65z4wp9gkbasljxc9bwigi2db95sy31m6k9120k74gkzsk"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "src"
          "emacs-module"
          "LICENSE"
          "Makefile"
          "README.org")))
    (home-page
      "https://github.com/merrickluo/liberime")
    (synopsis "Rime elisp binding")
    (description
      "Documentation at https://melpa.org/#/liberime")
    (license #f)))

(define-public emacs-libmpdee
  (package
    (name "emacs-libmpdee")
    (version "20160117.2301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andyetitmoves/libmpdee.git")
               (commit
                 "a6ca3b7d6687f3ba60996b9b5044ad1d3b228290")))
        (sha256
          (base32
            "039awlam3nrgkxrarcapfyc2myvc77aw7whrkcsjjybzylpzv0pr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Client end library for mpd, a music playing daemon")
    (description
      "Documentation at https://melpa.org/#/libmpdee")
    (license #f)))

(define-public emacs-line-up-words
  (package
    (name "emacs-line-up-words")
    (version "20180219.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/janestreet/line-up-words.git")
               (commit
                 "7f5f8d232a647e3966f84aaf35aca7cfb1ea15ca")))
        (sha256
          (base32
            "1bbqlgl955y24jsggzc763dagsv7vnlzcav98f15j9gh54p6h8ws"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/janestreet/line-up-words")
    (synopsis "Align words in an intelligent way")
    (description
      "Documentation at https://melpa.org/#/line-up-words")
    (license #f)))

(define-public emacs-lines-at-once
  (package
    (name "emacs-lines-at-once")
    (version "20180422.247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jiahaowork/lines-at-once.el.git")
               (commit
                 "31bce4b79fe16251b7cf118f0d343b0b46f72360")))
        (sha256
          (base32
            "0r3jqkwwsrcj37m0kvk587aanl2wi50z44q2srhk85aiad4in598"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jiahaowork/lines-at-once.el")
    (synopsis
      "Insert and edit multiple lines at once")
    (description
      "Documentation at https://melpa.org/#/lines-at-once")
    (license #f)))

(define-public emacs-lingr
  (package
    (name "emacs-lingr")
    (version "20100807.1731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lugecy/lingr-el.git")
               (commit
                 "4215a8704492d3c860097cbe2649936c22c196df")))
        (sha256
          (base32
            "0rkx0hk3y79rwhjqs3wvgxhg1rj83mxbqkhhm3jfawp8c1av4f40"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/lugecy/lingr-el")
    (synopsis "Lingr Client for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/lingr")
    (license #f)))

(define-public emacs-linkode
  (package
    (name "emacs-linkode")
    (version "20200607.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/linkode.el.git")
               (commit
                 "675e612e30b74764c57de4117d950ea803b15f74")))
        (sha256
          (base32
            "1iqgii1zdv1q2gcknszxfgs09gvylr2l1yvyp104jriyy8qlsakg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erickgnavar/linkode.el")
    (synopsis
      "Generate a linkode snippet with region/buffer content")
    (description
      "Documentation at https://melpa.org/#/linkode")
    (license #f)))

(define-public emacs-linphone
  (package
    (name "emacs-linphone")
    (version "20130524.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zabbal/emacs-linphone.git")
               (commit
                 "99af3db941b7f4e5272bb48bff96c1ce4ceac302")))
        (sha256
          (base32
            "01yv6239z90hvncwmm9g5nh4xvyxv2ig3h4hsmxdn4kacfxvc84n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zabbal/emacs-linphone")
    (synopsis "Emacs interface to Linphone")
    (description
      "Documentation at https://melpa.org/#/linphone")
    (license #f)))

(define-public emacs-linum-relative
  (package
    (name "emacs-linum-relative")
    (version "20180124.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/linum-relative.git")
               (commit
                 "c74a6981b688a5e1e6b8e0809363963ff558ce4d")))
        (sha256
          (base32
            "0svxi1l3s4rg1k1apfw25gzi127rsks56b5yfg79a48b5rf1xmkh"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/linum-relative")
    (synopsis
      "display relative line number in emacs.")
    (description
      "Documentation at https://melpa.org/#/linum-relative")
    (license #f)))

(define-public emacs-liquid-types
  (package
    (name "emacs-liquid-types")
    (version "20151202.735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ucsd-progsys/liquid-types.el.git")
               (commit
                 "cc4bacbbf204ef9cf0756f78dfebee2c6ae14d7b")))
        (sha256
          (base32
            "06rnma2xj2vnbvy1bnls59cagk6qsf862bj1zp6xbmpr1a5l9m4z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-dash
            emacs-popup
            emacs-pos-tip
            emacs-flycheck-liquidhs
            emacs-button-lock))
    (home-page "unspecified")
    (synopsis "show inferred liquid-types")
    (description
      "Documentation at https://melpa.org/#/liquid-types")
    (license #f)))

(define-public emacs-lisp-extra-font-lock
  (package
    (name "emacs-lisp-extra-font-lock")
    (version "20181008.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/lisp-extra-font-lock.git")
               (commit
                 "4605eccbe1a7fcbd3cacf5b71249435413b4db4f")))
        (sha256
          (base32
            "152vcp3mdlv33jf5va4rinl1d0k960gnfhbrqqrafazgx9j3ya8w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/lisp-extra-font-lock")
    (synopsis
      "Highlight bound variables and quoted exprs.")
    (description
      "Documentation at https://melpa.org/#/lisp-extra-font-lock")
    (license #f)))

(define-public emacs-lisp-local
  (package
    (name "emacs-lisp-local")
    (version "20210605.1347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lispunion/emacs-lisp-local.git")
               (commit
                 "22e221c9330d2b5dc07e8b2caa34c83ac7c20b0d")))
        (sha256
          (base32
            "10dflrabhn974k9lr4jvib5vs7v45hj9skryc4wjc09wzz5qphpk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lispunion/emacs-lisp-local")
    (synopsis
      "Allow different Lisp indentation in each buffer")
    (description
      "Documentation at https://melpa.org/#/lisp-local")
    (license #f)))

(define-public emacs-lispxmp
  (package
    (name "emacs-lispxmp")
    (version "20170926.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/lispxmp.git")
               (commit
                 "7ad077b4ee91ce8a42f84eeddb9fc7ea4eac7814")))
        (sha256
          (base32
            "1156jynii783v9sjj3a7s20ysa26mqaq22zk5nbia949hwbibx16"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el")
    (synopsis "Automagic emacs lisp code annotation")
    (description
      "Documentation at https://melpa.org/#/lispxmp")
    (license #f)))

(define-public emacs-list-unicode-display
  (package
    (name "emacs-list-unicode-display")
    (version "20181121.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/list-unicode-display.git")
               (commit
                 "0ecc2402b258990e7a0cf7e60847712c69444070")))
        (sha256
          (base32
            "008xa52pibd1z3cqz1sh83wldwwj5f11l5pl4pb5hwj60fh383b8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Search for and list unicode characters by name")
    (description
      "Documentation at https://melpa.org/#/list-unicode-display")
    (license #f)))

(define-public emacs-literal-string
  (package
    (name "emacs-literal-string")
    (version "20191023.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joodie/literal-string-mode.git")
               (commit
                 "afffa86e626798ee9f9188ea3be2d5ee6ad17c39")))
        (sha256
          (base32
            "0nh14f3fv0b4i3rlx120s9a0s8gsaip0r15ki38446igl1macbq2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edit-indirect))
    (home-page
      "https://github.com/joodie/literal-string-mode/")
    (synopsis
      "edit string literals in a dedicated buffer")
    (description
      "Documentation at https://melpa.org/#/literal-string")
    (license #f)))

(define-public emacs-literate-calc-mode
  (package
    (name "emacs-literate-calc-mode")
    (version "20211101.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sulami/literate-calc-mode.el.git")
               (commit
                 "ba7d22140a165b0fdd900a8d04916115ca6ab8ff")))
        (sha256
          (base32
            "1bdybw44pmhfpikdv1kg2sx88546xyncks5a4b2s0ak4p66r82k3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/sulami/literate-calc-mode.el")
    (synopsis "Inline results from calc")
    (description
      "Documentation at https://melpa.org/#/literate-calc-mode")
    (license #f)))

(define-public emacs-literate-coffee-mode
  (package
    (name "emacs-literate-coffee-mode")
    (version "20170211.1515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/literate-coffee-mode.git")
               (commit
                 "55ce0305495f4a38c8063c4bd63deb1e1252373d")))
        (sha256
          (base32
            "1gm89azjgsdg0c7z9yprpjbph211c5jnqv11pkf1i1r1wzx0wanj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-coffee-mode))
    (home-page
      "https://github.com/syohex/emacs-literate-coffee-mode")
    (synopsis "major-mode for Literate CoffeeScript")
    (description
      "Documentation at https://melpa.org/#/literate-coffee-mode")
    (license #f)))

(define-public emacs-lively
  (package
    (name "emacs-lively")
    (version "20171005.754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/lively.git")
               (commit
                 "348675828c6a81bfa1ac311ca465aad813542c1b")))
        (sha256
          (base32
            "1j8w63hhk1wcxcfqz0wimqijp7p1m8a2n947gwqv8nk1wm40aqg3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "interactively updating text")
    (description
      "Documentation at https://melpa.org/#/lively")
    (license #f)))

(define-public emacs-livescript-mode
  (package
    (name "emacs-livescript-mode")
    (version "20140613.421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yhisamatsu/livescript-mode.git")
               (commit
                 "90a918d9686e256e6d4d439cc20f24dad8d3b804")))
        (sha256
          (base32
            "0kqjz0i0zapyhh8z57cvc8ifiizngix3ca01mjnvyq3zxg1bqrsg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yhisamatsu/livescript-mode")
    (synopsis
      "Major mode for editing LiveScript files")
    (description
      "Documentation at https://melpa.org/#/livescript-mode")
    (license #f)))

(define-public emacs-load-env-vars
  (package
    (name "emacs-load-env-vars")
    (version "20180511.2210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diasjorge/emacs-load-env-vars.git")
               (commit
                 "3808520efaf9492033f6e11a9bffd68eabf02a0f")))
        (sha256
          (base32
            "0yw1ihns914k8va5mhphch1zix09x22cpgrbw968mh8hviknyvzr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/diasjorge/emacs-load-env-vars")
    (synopsis
      "Load environment variables from files")
    (description
      "Documentation at https://melpa.org/#/load-env-vars")
    (license #f)))

(define-public emacs-load-relative
  (package
    (name "emacs-load-relative")
    (version "20201130.2202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocky/emacs-load-relative.git")
               (commit
                 "ff2a827144353d29d70392fd95c14c15df207011")))
        (sha256
          (base32
            "1g8awvbn4f3g611svi58n9sk188skkn7a9jng6nbxbi9diiy3vvz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rocky/emacs-load-relative")
    (synopsis
      "Relative file load (within a multi-file Emacs package)")
    (description
      "Documentation at https://melpa.org/#/load-relative")
    (license #f)))

(define-public emacs-loccur
  (package
    (name "emacs-loccur")
    (version "20210224.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/loccur.git")
               (commit
                 "01b7afa62589432a98171074abb8c5a1e089034a")))
        (sha256
          (base32
            "1b1x1xsiwqzsiss1jc6w990v1vfvbn5d5w67yzmx59s9ldjmdqq2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fourier/loccur")
    (synopsis
      "Perform an occur-like folding in current buffer")
    (description
      "Documentation at https://melpa.org/#/loccur")
    (license #f)))

(define-public emacs-lodgeit
  (package
    (name "emacs-lodgeit")
    (version "20190802.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ionrock/lodgeit-el.git")
               (commit
                 "442637194d48a7105b7747b8d98772f5899f9e21")))
        (sha256
          (base32
            "1lw9d6908si7rw5802vwpnfklpahqsabkl21nzg77a4pp3pgy80v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ionrock/lodgeit-el")
    (synopsis "Paste to a lodgeit powered pastebin")
    (description
      "Documentation at https://melpa.org/#/lodgeit")
    (license #f)))

(define-public emacs-logms
  (package
    (name "emacs-logms")
    (version "20210721.349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/logms.git")
               (commit
                 "904d90665fc67b5baba0357bf1ef2ac87e8cd43b")))
        (sha256
          (base32
            "1adqlm92skfndv4f6qpy3kas6mk23dy3b54f9i6b8pbw8g7p13rs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-ht))
    (home-page "https://github.com/jcs-elpa/logms")
    (synopsis
      "Log message with clickable links to context")
    (description
      "Documentation at https://melpa.org/#/logms")
    (license #f)))

(define-public emacs-lognav-mode
  (package
    (name "emacs-lognav-mode")
    (version "20191124.1011")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lognav-mode-"
               version
               ".el"))
        (sha256
          (base32
            "0hzvf05r5sjb0jyjbmrxvz4g92g712np9pfwz91sm8g3gszhnlp0"))))
    (build-system melpa-build-system)
    (home-page
      "https://hg.osdn.net/view/lognav-mode/lognav-mode")
    (synopsis "Navigate Log Error Messages")
    (description
      "Documentation at https://melpa.org/#/lognav-mode")
    (license #f)))

(define-public emacs-lol-data-dragon
  (package
    (name "emacs-lol-data-dragon")
    (version "20200705.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/lol-data-dragon.el.git")
               (commit
                 "0deec9867bd7ba96220ee2968a9b2a94fd474431")))
        (sha256
          (base32
            "136x1yqdzjh6a2vhyd73yhgg6kmwl00c5c14ny5davlghwd5g7aw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/lol-data-dragon.el")
    (synopsis
      "Browse Champions of League of Legends on Data Dragon")
    (description
      "Documentation at https://melpa.org/#/lol-data-dragon")
    (license #f)))

(define-public emacs-loop
  (package
    (name "emacs-loop")
    (version "20160813.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/loop.el.git")
               (commit
                 "e22807f83a0890dc8a904c51ee0742c34efccc6c")))
        (sha256
          (base32
            "1c89hsi0h783s96d322mvqwlf00ndm2qnrc165wpxrdbns38kbbv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("loop.el")))
    (home-page "unspecified")
    (synopsis "friendly imperative loop structures")
    (description
      "Documentation at https://melpa.org/#/loop")
    (license #f)))

(define-public emacs-lpy
  (package
    (name "emacs-lpy")
    (version "20201027.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/lpy.git")
               (commit
                 "076ce9acb68f6ac1b39127b634a91ffd865d13d8")))
        (sha256
          (base32
            "10sab50wmr3zn7jgzx93201ymhmacqacn3m2qllsqkfw2gpsi6dn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lispy))
    (home-page "https://github.com/abo-abo/lpy")
    (synopsis "A lispy interface to Python")
    (description
      "Documentation at https://melpa.org/#/lpy")
    (license #f)))

(define-public emacs-lsp-grammarly
  (package
    (name "emacs-lsp-grammarly")
    (version "20211120.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/lsp-grammarly.git")
               (commit
                 "02c1d83c6e7ef703ce7426f8eff2c3fc7733cf72")))
        (sha256
          (base32
            "06qrd42hnz0cg28wkxcwb2mi0xpsgdy0yb8x9x7k23hzwdv6wrr6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-grammarly
            emacs-request
            emacs-s
            emacs-ht))
    (home-page
      "https://github.com/emacs-grammarly/lsp-grammarly")
    (synopsis "LSP Clients for Grammarly")
    (description
      "Documentation at https://melpa.org/#/lsp-grammarly")
    (license #f)))

(define-public emacs-lsp-haskell
  (package
    (name "emacs-lsp-haskell")
    (version "20211214.1110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-haskell.git")
               (commit
                 "6ffc681fec8ffce43f836616e98d7fb09164c3cc")))
        (sha256
          (base32
            "1jqpxwbmnj2i6wm4idazsai5pkdxgvjrp7slayxr2c8paq6iyf8r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-haskell-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-haskell")
    (synopsis "Haskell support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-haskell")
    (license #f)))

(define-public emacs-lsp-java
  (package
    (name "emacs-lsp-java")
    (version "20211124.605")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-java.git")
               (commit
                 "ce03cb6574566e334c3ce5735458cc3ec1989486")))
        (sha256
          (base32
            "0z18b7xn9rgrs8w485bzw93g1nimfp0616d9xlrj0wc4k1i8vyd4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-markdown-mode
            emacs-dash
            emacs-f
            emacs-ht
            emacs-request
            emacs-treemacs
            emacs-dap-mode))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/lsp-java")
    (synopsis "Java support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-java")
    (license #f)))

(define-public emacs-lsp-javacomp
  (package
    (name "emacs-lsp-javacomp")
    (version "20190124.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tigersoldier/lsp-javacomp.git")
               (commit
                 "82aa4ad6ca03a74565c35e855b318b1887bcd89b")))
        (sha256
          (base32
            "0r0ig73hsa0gyx8s6hr1mbdgf9m1n2zh2v7yhq3405l4if08s5m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode emacs-s))
    (home-page
      "https://github.com/tigersoldier/lsp-javacomp")
    (synopsis
      "Provide Java IDE features powered by JavaComp.")
    (description
      "Documentation at https://melpa.org/#/lsp-javacomp")
    (license #f)))

(define-public emacs-lsp-jedi
  (package
    (name "emacs-lsp-jedi")
    (version "20210602.1925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fredcamps/lsp-jedi.git")
               (commit
                 "ab265f7fb26f4fa0385158a9f9d3649b606d2e23")))
        (sha256
          (base32
            "013vmhcxz7648jxxhk69rr0v5br2839517l72fwzk770l02mc6si"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "http://github.com/fredcamps/lsp-jedi")
    (synopsis
      "Lsp client plugin for Python Jedi Language Server")
    (description
      "Documentation at https://melpa.org/#/lsp-jedi")
    (license #f)))

(define-public emacs-lsp-latex
  (package
    (name "emacs-lsp-latex")
    (version "20210815.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/lsp-latex.git")
               (commit
                 "3f6b2ac9585682828eef81f895757f74cfba7309")))
        (sha256
          (base32
            "0da1fyw0h95hzjippqng9h68kykd0610a074wp4cwlsa4xffhjji"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/ROCKTAKEY/lsp-latex")
    (synopsis "LSP-mode client for LaTeX, on texlab")
    (description
      "Documentation at https://melpa.org/#/lsp-latex")
    (license #f)))

(define-public emacs-lsp-ltex
  (package
    (name "emacs-lsp-ltex")
    (version "20211024.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-languagetool/lsp-ltex.git")
               (commit
                 "f600d5f1d65c6209fa73a7bb916f6de2b60e5fc5")))
        (sha256
          (base32
            "1ss0b2rk22i58sl430844vi119maz9rd0j1zv9wkcn81k6wmrdlq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-f emacs-s))
    (home-page
      "https://github.com/emacs-languagetool/lsp-ltex")
    (synopsis "LSP Clients for LTEX")
    (description
      "Documentation at https://melpa.org/#/lsp-ltex")
    (license #f)))

(define-public emacs-lsp-origami
  (package
    (name "emacs-lsp-origami")
    (version "20211016.1045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-origami.git")
               (commit
                 "5b88ab77dc2696c93fa5dd9debe183821c533b71")))
        (sha256
          (base32
            "0chf7b8qdgzm173crpbz3vl3kjhgcdsmkprz8bf6w3qb5lpvaysw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-origami emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-origami")
    (synopsis "origami.el support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-origami")
    (license #f)))

(define-public emacs-lsp-pyright
  (package
    (name "emacs-lsp-pyright")
    (version "20211103.619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-pyright.git")
               (commit
                 "d428dbcf1802fbe147271c8dc74b073bd9cd7403")))
        (sha256
          (base32
            "0y31dajhd6jfla4h137k78clvwsfj1pdmgd61ni83yl6ackpvm8c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash emacs-ht))
    (home-page
      "https://github.com/emacs-lsp/lsp-pyright")
    (synopsis "Python LSP client using Pyright")
    (description
      "Documentation at https://melpa.org/#/lsp-pyright")
    (license #f)))

(define-public emacs-lsp-rescript
  (package
    (name "emacs-lsp-rescript")
    (version "20210519.1101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjlee/lsp-rescript.git")
               (commit
                 "aac9673855314a1f34037eb785bccbd3f66d7695")))
        (sha256
          (base32
            "0jyn471mdklhw1il6bbnv5drrl0raiyh17p1qi6rdn20ywi1dbx7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-rescript-mode))
    (home-page
      "https://github.com/jjlee/lsp-rescript")
    (synopsis
      "LSP client configuration for lsp-mode and rescript-vscode")
    (description
      "Documentation at https://melpa.org/#/lsp-rescript")
    (license #f)))

(define-public emacs-lsp-sourcekit
  (package
    (name "emacs-lsp-sourcekit")
    (version "20210905.2017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-sourcekit.git")
               (commit
                 "97ff36b228a61e69734c7180f33cc6951b1a600f")))
        (sha256
          (base32
            "1pal3mga7nwfcvri1cffsjgcbbhk7wd1icd622qspqgq0zkfs8jd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-sourcekit")
    (synopsis "sourcekit-lsp client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-sourcekit")
    (license #f)))

(define-public emacs-lsp-tailwindcss
  (package
    (name "emacs-lsp-tailwindcss")
    (version "20211211.248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/merrickluo/lsp-tailwindcss.git")
               (commit
                 "629ece1acc3280ee506660170cdee77446ba8c18")))
        (sha256
          (base32
            "0wlh68qxk811p8vs6vvjlxz48gb0vx00r4a0i5m74f6n5h41pzvh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/merrickluo/lsp-tailwindcss")
    (synopsis "A lsp-mode client for tailwindcss")
    (description
      "Documentation at https://melpa.org/#/lsp-tailwindcss")
    (license #f)))

(define-public emacs-lsp-treemacs
  (package
    (name "emacs-lsp-treemacs")
    (version "20211129.955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-treemacs.git")
               (commit
                 "c40a381730251039d33400cc14539c1e0729385f")))
        (sha256
          (base32
            "1nx5ffgy3yzyynz3ll82flxwci4zrmg608iyk8bqzgfpmdlb4ass"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-ht
            emacs-treemacs
            emacs-lsp-mode))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/lsp-treemacs")
    (synopsis "LSP treemacs")
    (description
      "Documentation at https://melpa.org/#/lsp-treemacs")
    (license #f)))

(define-public emacs-lsp-ui
  (package
    (name "emacs-lsp-ui")
    (version "20211206.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-ui.git")
               (commit
                 "98d0ad00b8bf1d3a7cea490002169f2286d7208c")))
        (sha256
          (base32
            "1s9h593f0hjb8h4ciimvr78k19cp18h3hdwsadmjafshfdq54szw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-lsp-mode
            emacs-markdown-mode))
    (arguments
      '(#:files
        (:defaults "lsp-ui-doc.html" "resources")))
    (home-page "https://github.com/emacs-lsp/lsp-ui")
    (synopsis "UI modules for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-ui")
    (license #f)))

(define-public emacs-lusty-explorer
  (package
    (name "emacs-lusty-explorer")
    (version "20200602.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sjbach/lusty-emacs.git")
               (commit
                 "a746514ccd8df71fc920ba8ad0aa8dca58702631")))
        (sha256
          (base32
            "0sjs3gn7mrmm60v0yi77fha9b6wdqfnydqz9f4dg2fvwj4a9w2rr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lusty-explorer.el")))
    (home-page
      "https://github.com/sjbach/lusty-emacs")
    (synopsis
      "Dynamic filesystem explorer and buffer switcher")
    (description
      "Documentation at https://melpa.org/#/lusty-explorer")
    (license #f)))

(define-public emacs-lxc
  (package
    (name "emacs-lxc")
    (version "20140410.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-lxc.git")
               (commit
                 "88bed56c954d1edd9ff5ce0ced2c02dcf9f71835")))
        (sha256
          (base32
            "090gk0il4yyypzjbh2qrjdaldwf90fi30impmh4zcfl73bic5q9q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicferrier/emacs-lxc")
    (synopsis "lxc integration with Emacs")
    (description
      "Documentation at https://melpa.org/#/lxc")
    (license #f)))

(define-public emacs-lyrics
  (package
    (name "emacs-lyrics")
    (version "20180812.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/lyrics.el.git")
               (commit
                 "d0b920be634a5be81ad49418cfaada0f0a57d6cd")))
        (sha256
          (base32
            "0926avnlxi8qkr1faplk1aj4lji0ixa4lv81badi5zsmpyyrwmm7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/lyrics.el")
    (synopsis "Show lyrics")
    (description
      "Documentation at https://melpa.org/#/lyrics")
    (license #f)))

(define-public emacs-maces-game
  (package
    (name "emacs-maces-game")
    (version "20170903.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pawelbx/maces-game.git")
               (commit
                 "c0fb795f5642467ea528d2f04d904547e8a77ecd")))
        (sha256
          (base32
            "1sf1h5660fd3mfcca3h1fqk3xssgigkil26wz1kp1kvxfx9lm31m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files (:defaults "words.txt")))
    (home-page
      "https://github.com/pawelbx/anagram-game")
    (synopsis "another anagram game.")
    (description
      "Documentation at https://melpa.org/#/maces-game")
    (license #f)))

(define-public emacs-macrostep
  (package
    (name "emacs-macrostep")
    (version "20161120.2106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joddie/macrostep.git")
               (commit
                 "424e3734a1ee526a1bd7b5c3cd1d3ef19d184267")))
        (sha256
          (base32
            "1fm40mxdn289cyzgw992223dgrjmwxn4q8svyyxfaxjrpb38jhjz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joddie/macrostep")
    (synopsis "interactive macro expander")
    (description
      "Documentation at https://melpa.org/#/macrostep")
    (license #f)))

(define-public emacs-madhat2r-theme
  (package
    (name "emacs-madhat2r-theme")
    (version "20170203.30")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/madhat2r/madhat2r-theme.git")
               (commit
                 "6b387f09de055cfcc15d74981cd4f32f8f9a7323")))
        (sha256
          (base32
            "1nnjdqqbarzv62ic3ddc2z9wmh93zjia4nvfjmji8213dngrrf88"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/madhat2r/madhat2r-theme")
    (synopsis
      "dark color theme that is easy on the eyes")
    (description
      "Documentation at https://melpa.org/#/madhat2r-theme")
    (license #f)))

(define-public emacs-magic-filetype
  (package
    (name "emacs-magic-filetype")
    (version "20180219.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/magic-filetype.el.git")
               (commit
                 "019494add5ff02dd36cb3f500142fc51125522cc")))
        (sha256
          (base32
            "1hw77d4wgqrms8rvkv3xd50v4y9qjvm7cpz5rkgmvizs34pjqy22"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/zonuexe/magic-filetype.el")
    (synopsis "Enhance filetype major mode")
    (description
      "Documentation at https://melpa.org/#/magic-filetype")
    (license #f)))

(define-public emacs-magik-mode
  (package
    (name "emacs-magik-mode")
    (version "20210907.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roadrunner1776/magik.git")
               (commit
                 "6fe271f371ccb06b599a782839030bb8dee8535f")))
        (sha256
          (base32
            "178whq47zs055srly8wzdai5p0d0s1n3p349kb5wx2d9c2lg0pnm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/roadrunner1776/magik")
    (synopsis "mode for editing Magik + some utils.")
    (description
      "Documentation at https://melpa.org/#/magik-mode")
    (license #f)))

(define-public emacs-magit
  (package
    (name "emacs-magit")
    (version "20211221.2212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit
                 "fa620ed3e45b08c45466f9930e348bf957c27e66")))
        (sha256
          (base32
            "0gzrh4gyp6pqxw6xy45zy3kf6qdva6ia30ipkz1qai1i7fsnmax9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-git-commit
            emacs-magit-section
            emacs-transient
            emacs-with-editor))
    (arguments
      '(#:files
        ("lisp/magit"
         "lisp/magit*.el"
         "lisp/git-rebase.el"
         "docs/magit.texi"
         "docs/AUTHORS.md"
         "LICENSE"
         (:exclude
           "lisp/magit-libgit.el"
           "lisp/magit-libgit-pkg.el"
           "lisp/magit-section.el"
           "lisp/magit-section-pkg.el"))))
    (home-page "https://github.com/magit/magit")
    (synopsis "A Git porcelain inside Emacs.")
    (description
      "Documentation at https://melpa.org/#/magit")
    (license #f)))

(define-public emacs-magit-annex
  (package
    (name "emacs-magit-annex")
    (version "20211004.2314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-annex.git")
               (commit
                 "018e8eebd2b1e56e9e8c152c6fb249f4de52e2d8")))
        (sha256
          (base32
            "1amr2c08mq1nnn6k66mgz4rzyni4np7gxm96g4qyla2cbfbachgk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/magit/magit-annex")
    (synopsis "Control git-annex from Magit")
    (description
      "Documentation at https://melpa.org/#/magit-annex")
    (license #f)))

(define-public emacs-magit-diff-flycheck
  (package
    (name "emacs-magit-diff-flycheck")
    (version "20190524.551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ragone/magit-diff-flycheck.git")
               (commit
                 "28acf74f59e385865746cccf4b1e4c4025ae9433")))
        (sha256
          (base32
            "178yby09swm3hlj300vkk3366wjwwf6zijlvphn6drsiw7dmccqm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-flycheck))
    (home-page
      "https://github.com/ragone/magit-diff-flycheck")
    (synopsis "Report errors in diffs")
    (description
      "Documentation at https://melpa.org/#/magit-diff-flycheck")
    (license #f)))

(define-public emacs-magit-gerrit
  (package
    (name "emacs-magit-gerrit")
    (version "20210831.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-gerrit.git")
               (commit
                 "9104713f6ea918e9faaf25f2cc182c65029db936")))
        (sha256
          (base32
            "0sasd9q8a3cisys979djdzidxiwcf6n612gajhrhd6fpssdc3rr1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-transient))
    (home-page
      "https://github.com/emacsorphanage/magit-gerrit")
    (synopsis "Magit plugin for Gerrit Code Review")
    (description
      "Documentation at https://melpa.org/#/magit-gerrit")
    (license #f)))

(define-public emacs-magit-gitflow
  (package
    (name "emacs-magit-gitflow")
    (version "20170929.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtatarik/magit-gitflow.git")
               (commit
                 "cc41b561ec6eea947fe9a176349fb4f771ed865b")))
        (sha256
          (base32
            "0jz69wrrzvqadaphmjrr146nzvmphsbl7rmc3ccnpw1gw6gnz81f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup))
    (home-page
      "https://github.com/jtatarik/magit-gitflow")
    (synopsis "gitflow extension for magit")
    (description
      "Documentation at https://melpa.org/#/magit-gitflow")
    (license #f)))

(define-public emacs-magit-imerge
  (package
    (name "emacs-magit-imerge")
    (version "20211004.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-imerge.git")
               (commit
                 "1ee213d7fa1536c86c128d09946b44ededbfac9c")))
        (sha256
          (base32
            "1virc4ps25nwv8jkyvlb4ylxpcz676bfw449izaly97f2f2a91hk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/magit/magit-imerge")
    (synopsis "Magit extension for git-imerge")
    (description
      "Documentation at https://melpa.org/#/magit-imerge")
    (license #f)))

(define-public emacs-magit-p4
  (package
    (name "emacs-magit-p4")
    (version "20170414.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-p4.git")
               (commit
                 "adcad7ec2480fa87bea64f6fc3fb999ea71e9e39")))
        (sha256
          (base32
            "0w9igpmpxws58xzp5nh70mj7nvybacpqbizhk6154hlh4373y3z0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup emacs-p4))
    (home-page "https://github.com/qoocku/magit-p4")
    (synopsis "git-p4 plug-in for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-p4")
    (license #f)))

(define-public emacs-magit-popup
  (package
    (name "emacs-magit-popup")
    (version "20200719.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-popup.git")
               (commit
                 "d8585fa39f88956963d877b921322530257ba9f5")))
        (sha256
          (base32
            "0znp6gx6vpcsybg774ab06mdgxb7sfk3gki1yp2qhkanav13i6q1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/magit/magit-popup")
    (synopsis
      "Define prefix-infix-suffix command combos")
    (description
      "Documentation at https://melpa.org/#/magit-popup")
    (license #f)))

(define-public emacs-magit-rbr
  (package
    (name "emacs-magit-rbr")
    (version "20181009.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fanatoly/magit-rbr.git")
               (commit
                 "029203b3e48537205052a058e964f058cd802c3c")))
        (sha256
          (base32
            "1z48m0al8bb4ppic483jvika9q47c67g7fazk25431sr5rv9h4d2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/fanatoly/magit-rbr")
    (synopsis "Support for git rbr in Magit")
    (description
      "Documentation at https://melpa.org/#/magit-rbr")
    (license #f)))

(define-public emacs-magit-svn
  (package
    (name "emacs-magit-svn")
    (version "20210426.2114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-svn.git")
               (commit
                 "350493217afdb7637564e089f475909adecd9208")))
        (sha256
          (base32
            "1v1y4fir1plz4kj0cvkcd29wibli4dw7vp4fmbxq4df76d8iy8yd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-transient))
    (home-page "unspecified")
    (synopsis "Git-Svn extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-svn")
    (license #f)))

(define-public emacs-magit-topgit
  (package
    (name "emacs-magit-topgit")
    (version "20160313.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/greenrd/magit-topgit.git")
               (commit
                 "11489ea798bc88d0ea5244bbf725285eedfefbef")))
        (sha256
          (base32
            "1y7ss475ibjx354m73jn5dxd98g33jcijx48b30p45rbm6ha3i8q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page "unspecified")
    (synopsis "TopGit extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-topgit")
    (license #f)))

(define-public emacs-major-mode-icons
  (package
    (name "emacs-major-mode-icons")
    (version "20200127.512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/major-mode-icons.git")
               (commit
                 "b36eae2e976bad3c431b082c64b1a724a2ba1fe6")))
        (sha256
          (base32
            "1jjmma9lx5g4qprmy71izgdp564lbdb0wsiysl1f6d8wipml78ys"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline
            emacs-xpm
            emacs-all-the-icons))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "http://github.com/stardiviner/major-mode-icons")
    (synopsis
      "Display icon for major-mode on mode-line")
    (description
      "Documentation at https://melpa.org/#/major-mode-icons")
    (license #f)))

(define-public emacs-make-it-so
  (package
    (name "emacs-make-it-so")
    (version "20190625.1036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/make-it-so.git")
               (commit
                 "b73dfb640588123c9eece230ad72b37604f5c126")))
        (sha256
          (base32
            "0p6xhyinzzkrwzbpxqfm8hlii0ikvmmylya240bwsa77w0g1k6xq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-swiper))
    (arguments
      '(#:files ("make-it-so.el" "recipes")))
    (home-page
      "https://github.com/abo-abo/make-it-so")
    (synopsis
      "Transform files with Makefile recipes.")
    (description
      "Documentation at https://melpa.org/#/make-it-so")
    (license #f)))

(define-public emacs-malinka
  (package
    (name "emacs-malinka")
    (version "20171202.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LefterisJP/malinka.git")
               (commit
                 "d4aa517c7a9022eae16c758c7efdb3a0403542d7")))
        (sha256
          (base32
            "1rnzvx1nc01sw9fklm36lyllqm6dizj64gnlqbs4nammx7z0spi1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-rtags
            emacs-projectile))
    (home-page
      "https://github.com/LefterisJP/malinka")
    (synopsis
      "A C/C++ project configuration package for Emacs")
    (description
      "Documentation at https://melpa.org/#/malinka")
    (license #f)))

(define-public emacs-mark-multiple
  (package
    (name "emacs-mark-multiple")
    (version "20121118.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/mark-multiple.el.git")
               (commit
                 "f6a53c7c5283d640ae718f4548b0fda78877a375")))
        (sha256
          (base32
            "1x3anvy3hlmydxyfzr1rhaiy502yi1yz3v54sg8wc1w7jrvwaj29"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Sorta lets you mark several regions at once.")
    (description
      "Documentation at https://melpa.org/#/mark-multiple")
    (license #f)))

(define-public emacs-markdown-mode
  (package
    (name "emacs-markdown-mode")
    (version "20211022.55")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrblevin/markdown-mode.git")
               (commit
                 "c3c2f0d473a3f8ca8c4ffb2ecc094d5c3541769f")))
        (sha256
          (base32
            "1pmkpddvs589v9b6sgpfq5mzsli4ifczwvw4396qimx1dh86sb1c"))))
    (build-system melpa-build-system)
    (home-page
      "https://jblevins.org/projects/markdown-mode/")
    (synopsis
      "Major mode for Markdown-formatted text")
    (description
      "Documentation at https://melpa.org/#/markdown-mode")
    (license #f)))

(define-public emacs-markdown-preview-eww
  (package
    (name "emacs-markdown-preview-eww")
    (version "20160111.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/niku/markdown-preview-eww.git")
               (commit
                 "5853f836425c877c8a956501f0adda137ef1d3b7")))
        (sha256
          (base32
            "1i5gr3j9dq41p2zl4bfyvzv6i5z7hgrxzrycmbdc3s7nja36k9z4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/niku/markdown-preview-eww")
    (synopsis "Realtime preview by eww")
    (description
      "Documentation at https://melpa.org/#/markdown-preview-eww")
    (license #f)))

(define-public emacs-marmalade-client
  (package
    (name "emacs-marmalade-client")
    (version "20141231.2007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-marmalade-upload.git")
               (commit
                 "f315dea57e4fbebd9ee0668c0bafd4c45c7b754a")))
        (sha256
          (base32
            "017k109nfif5mzkj547py8pdnzlr4sxb74yqqsl944znflq67blr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web emacs-kv emacs-gh))
    (home-page
      "https://github.com/nicferrier/emacs-marmalade-upload")
    (synopsis "client for marmalade API from emacs")
    (description
      "Documentation at https://melpa.org/#/marmalade-client")
    (license #f)))

(define-public emacs-masm-mode
  (package
    (name "emacs-masm-mode")
    (version "20200308.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/YiGeeker/masm-mode.git")
               (commit
                 "626b9255c2bb967a53d1d50be0b98a1bcae3250c")))
        (sha256
          (base32
            "1k6wcksddy0k02hrqfaifr61c09pg6kpcqpmfm9zkb444pdqjn17"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/YiGeeker/masm-mode")
    (synopsis "MASM x86 and x64 assembly major mode")
    (description
      "Documentation at https://melpa.org/#/masm-mode")
    (license #f)))

(define-public emacs-maven-test-mode
  (package
    (name "emacs-maven-test-mode")
    (version "20141220.557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rranelli/maven-test-mode.git")
               (commit
                 "a19151861df2ad8ae4880a2e7c86ddf848cb569a")))
        (sha256
          (base32
            "1xn2yyr8mr90cynbxgv0h5v180pzf0ydnjr9spg34mrdicqlki6c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/rranelli/maven-test-mode")
    (synopsis
      "Utilities for navigating test files and running maven test tasks.")
    (description
      "Documentation at https://melpa.org/#/maven-test-mode")
    (license #f)))

(define-public emacs-mbe
  (package
    (name "emacs-mbe")
    (version "20151126.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ijp/mbe.el.git")
               (commit
                 "bb10aa8f26bb7e9b1d5746934c94edb00402940c")))
        (sha256
          (base32
            "1zywygdgnp2zr8fxqhl0cbrgbl43931k936b9imhqi96p6622pb6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mbe.el")))
    (home-page "https://github.com/ijp/mbe.el")
    (synopsis "Macros by Example")
    (description
      "Documentation at https://melpa.org/#/mbe")
    (license #f)))

(define-public emacs-md-readme
  (package
    (name "emacs-md-readme")
    (version "20191112.1943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomas11/md-readme.git")
               (commit
                 "ca99f44de11fab18d1f50d4b1722f2ceee3c814d")))
        (sha256
          (base32
            "1llwvcbwfj5mw100rx2hp8vcr7kawpl18nvy6vxl6brqw7ka0d2s"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "http://github.com/thomas11/md-readme/tree/master")
    (synopsis
      "Markdown-formatted READMEs for your ELisp")
    (description
      "Documentation at https://melpa.org/#/md-readme")
    (license #f)))

(define-public emacs-md4rd
  (package
    (name "emacs-md4rd")
    (version "20211015.2123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/md4rd.git")
               (commit
                 "fc5fbf6c966dcee1075ef359638eb23003417f30")))
        (sha256
          (base32
            "19ay7n5ds8622qs799icdcmkyhfcqfxd2myffzswsrhvkm9afr8r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hierarchy
            emacs-request
            emacs-dash
            emacs-s
            emacs-tree-mode))
    (home-page "https://github.com/ahungry/md4rd")
    (synopsis "Mode for reddit (browse it).")
    (description
      "Documentation at https://melpa.org/#/md4rd")
    (license #f)))

(define-public emacs-meghanada
  (package
    (name "emacs-meghanada")
    (version "20210505.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mopemope/meghanada-emacs.git")
               (commit
                 "6c57e8a0ae27e2929bb12572cf33059cd4ecbc04")))
        (sha256
          (base32
            "1wq4x80lqzlpixy701xncvmz0jwk1zgp1kpz1z7wgl5i0jnb1516"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet
            emacs-company
            emacs-flycheck))
    (home-page
      "https://github.com/mopemope/meghanada-emacs")
    (synopsis "A better java development mode")
    (description
      "Documentation at https://melpa.org/#/meghanada")
    (license #f)))

(define-public emacs-melancholy-theme
  (package
    (name "emacs-melancholy-theme")
    (version "20211018.1911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/techquila/melancholy-theme.git")
               (commit
                 "37adfa56ff99b266209be4b9f6bc6be554d43317")))
        (sha256
          (base32
            "17zq1w7h6i2dv5yc0h9bvjm29vpd2lbzlff844hi4p45d3jdrk1a"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/techquila/melancholy-theme")
    (synopsis "No description available.")
    (description
      "Documentation at https://melpa.org/#/melancholy-theme")
    (license #f)))

(define-public emacs-memento-mori
  (package
    (name "emacs-memento-mori")
    (version "20190628.2147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-memento-mori.git")
               (commit
                 "b99c5ff526079fc5a1e1be097534855da176bc2b")))
        (sha256
          (base32
            "15l993g6ihx3m634y3wdzx0wl4546qdr1xr723qxcvxi0ph16kbx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-memento-mori")
    (synopsis "Reminder of mortality")
    (description
      "Documentation at https://melpa.org/#/memento-mori")
    (license #f)))

(define-public emacs-mentor
  (package
    (name "emacs-mentor")
    (version "20211023.431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skangas/mentor.git")
               (commit
                 "b68c47b3d898a441da2278e2e0636197397d755e")))
        (sha256
          (base32
            "0yrfnzj1havjzvlr6s6mamrr875fniafb2wwck76yggfyhdvmxxv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xml-rpc emacs-async))
    (home-page "unspecified")
    (synopsis
      "Frontend for the rTorrent bittorrent client")
    (description
      "Documentation at https://melpa.org/#/mentor")
    (license #f)))

(define-public emacs-meow
  (package
    (name "emacs-meow")
    (version "20211224.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meow-edit/meow.git")
               (commit
                 "7244c32cde623bc92c508436e217a8d3082e3d03")))
        (sha256
          (base32
            "1x6gkinyd4kaawpzddpf8cf67vzyn6vz7pb8mnj86qs4as72j8li"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/DogLooksGood/meow")
    (synopsis "Yet Another modal editing")
    (description
      "Documentation at https://melpa.org/#/meow")
    (license #f)))

(define-public emacs-merlin
  (package
    (name "emacs-merlin")
    (version "20210720.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "ab77e5bdc6bad11f94e7f04fbba21e9c489c76d4")))
        (sha256
          (base32
            "0y0mjx8w21nc4v5f5vym7cgwjwai10ab5j80wlq4vjiyhmcaw89z"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/*.el"
         (:exclude
           "emacs/merlin-ac.el"
           "emacs/merlin-company.el"
           "emacs/merlin-iedit.el"))))
    (home-page "https://github.com/ocaml/merlin")
    (synopsis
      "Mode for Merlin, an assistant for OCaml")
    (description
      "Documentation at https://melpa.org/#/merlin")
    (license #f)))

(define-public emacs-merlin-company
  (package
    (name "emacs-merlin-company")
    (version "20210615.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "ab77e5bdc6bad11f94e7f04fbba21e9c489c76d4")))
        (sha256
          (base32
            "0y0mjx8w21nc4v5f5vym7cgwjwai10ab5j80wlq4vjiyhmcaw89z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-merlin emacs-company))
    (arguments
      '(#:files ("emacs/merlin-company.el")))
    (home-page "http://github.com/ocaml/merlin")
    (synopsis "Merlin and company mode integration.")
    (description
      "Documentation at https://melpa.org/#/merlin-company")
    (license #f)))

(define-public emacs-merlin-iedit
  (package
    (name "emacs-merlin-iedit")
    (version "20210615.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "ab77e5bdc6bad11f94e7f04fbba21e9c489c76d4")))
        (sha256
          (base32
            "0y0mjx8w21nc4v5f5vym7cgwjwai10ab5j80wlq4vjiyhmcaw89z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-merlin emacs-iedit))
    (arguments '(#:files ("emacs/merlin-iedit.el")))
    (home-page "http://github.com/ocaml/merlin")
    (synopsis "Merlin and iedit integration.")
    (description
      "Documentation at https://melpa.org/#/merlin-iedit")
    (license #f)))

(define-public emacs-messages-are-flowing
  (package
    (name "emacs-messages-are-flowing")
    (version "20191029.954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/messages-are-flowing.git")
               (commit
                 "d582a564a63b7b90764ffc5c618bc5300225d0ab")))
        (sha256
          (base32
            "0lgh8vi6ya7mnzc3ik8189kx6lqh4xfnsxpn7r52q7745x4d8zb1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "visible indication when composing \"flowed\" emails")
    (description
      "Documentation at https://melpa.org/#/messages-are-flowing")
    (license #f)))

(define-public emacs-metal-archives-shopping-list
  (package
    (name "emacs-metal-archives-shopping-list")
    (version "20201229.949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seblemaguer/metal-archives.el.git")
               (commit
                 "a218d63b990365edeef6a2394f72d1f2286aeeae")))
        (sha256
          (base32
            "1mpsc1xvgl6g3bz0dx10i3x5abivna01f1carwyz9w47zs599svk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ml
            emacs-alert
            emacs-ht
            emacs-metal-archives))
    (arguments
      '(#:files ("metal-archives-shopping-list.el")))
    (home-page
      "https://github.com/seblemaguer/metal-archives.el")
    (synopsis
      "Add shopping list generation support to metal-archives")
    (description
      "Documentation at https://melpa.org/#/metal-archives-shopping-list")
    (license #f)))

(define-public emacs-metaweblog
  (package
    (name "emacs-metaweblog")
    (version "20210422.326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org2blog/org2blog.git")
               (commit
                 "68695ed0e012379556d57f9564ac5ad8cd68fbb8")))
        (sha256
          (base32
            "1qk9kshi4hyy0fni3gb383m0yvj4fmgidiab6vhnms5zgghj4kl7"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("metaweblog.el")))
    (home-page
      "https://github.com/org2blog/org2blog")
    (synopsis
      "An XML-RPC MetaWeblog and WordPress API client.")
    (description
      "Documentation at https://melpa.org/#/metaweblog")
    (license #f)))

(define-public emacs-metronome
  (package
    (name "emacs-metronome")
    (version "20200502.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jagrg/metronome.git")
               (commit
                 "18257ecdd7b3d816104e83a5f0f96e676cc9fbfc")))
        (sha256
          (base32
            "14qzb1i9l149nw4zhx8jlrrz7nvflc974zr5lbv7vv2zky0pya6w"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "sounds")))
    (home-page "https://gitlab.com/jagrg/metronome")
    (synopsis "A simple metronome")
    (description
      "Documentation at https://melpa.org/#/metronome")
    (license #f)))

(define-public emacs-mhc
  (package
    (name "emacs-mhc")
    (version "20201227.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/mhc.git")
               (commit
                 "67f9596dcd43b7ece3ab6e7a6ce8dc18a4851fe8")))
        (sha256
          (base32
            "01is2x9yfijxz0w7h7nrygkk0dkxnz0a3p3w38kvariqis8vbhl0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-calfw))
    (arguments '(#:files ("emacs/mhc*.el")))
    (home-page "http://www.quickhack.net/mhc")
    (synopsis
      "Message Harmonized Calendaring system.")
    (description
      "Documentation at https://melpa.org/#/mhc")
    (license #f)))

(define-public emacs-mic-paren
  (package
    (name "emacs-mic-paren")
    (version "20170731.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/mic-paren.git")
               (commit
                 "d0410c7d805c9aaf51a1bcefaaef092bed5824c4")))
        (sha256
          (base32
            "0f24ibzgra94bwal8b0dpjxa11n42gkmanqswfnjhlvx052v9dxr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "advanced highlighting of matching parentheses")
    (description
      "Documentation at https://melpa.org/#/mic-paren")
    (license #f)))

(define-public emacs-midje-mode
  (package
    (name "emacs-midje-mode")
    (version "20170809.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dnaumov/midje-mode.git")
               (commit
                 "10ad5b6084cd03d5cd268b486a7c3c246d85535f")))
        (sha256
          (base32
            "0nag9ks7qbg40h9z954v42x8zi65wbgfhviwvxvb2bmbzv4m4pbs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-clojure-mode))
    (home-page "unspecified")
    (synopsis
      "Minor mode for running Midje tests in emacs")
    (description
      "Documentation at https://melpa.org/#/midje-mode")
    (license #f)))

(define-public emacs-migemo
  (package
    (name "emacs-migemo")
    (version "20200913.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/migemo.git")
               (commit
                 "f756cba3d5268968da361463c2e29b3a659a3de7")))
        (sha256
          (base32
            "0q2mljzkpci6p8svz17xz48kv4yhh86irg2dpypk0k2dlyr8gykx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emacs-jp/migemo")
    (synopsis
      "Japanese incremental search through dynamic pattern expansion")
    (description
      "Documentation at https://melpa.org/#/migemo")
    (license #f)))

(define-public emacs-minesweeper
  (package
    (name "emacs-minesweeper")
    (version "20200416.2342")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/minesweeper-"
               version
               ".el"))
        (sha256
          (base32
            "0ri1nyhl9xjjb9wz6ixv0fkvd5bmmmcw5i4655mq7x0qkgyqf1yi"))))
    (build-system melpa-build-system)
    (home-page "https://hg.sr.ht/~zck/minesweeper")
    (synopsis "play minesweeper in Emacs")
    (description
      "Documentation at https://melpa.org/#/minesweeper")
    (license #f)))

(define-public emacs-minibuffer-complete-cycle
  (package
    (name "emacs-minibuffer-complete-cycle")
    (version "20130813.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/minibuffer-complete-cycle.git")
               (commit
                 "3df80135887d0169e02294a948711f6dfeca4a6f")))
        (sha256
          (base32
            "1zyb6c3xwdzk7dpn7xi0mvbcjdfxvzz1a0zlbs053pfar8iim5fk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/minibuffer-complete-cycle")
    (synopsis
      "Cycle through the *Completions* buffer")
    (description
      "Documentation at https://melpa.org/#/minibuffer-complete-cycle")
    (license #f)))

(define-public emacs-minor-mode-hack
  (package
    (name "emacs-minor-mode-hack")
    (version "20170926.34")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/minor-mode-hack.git")
               (commit
                 "9688994e23ccb2de568225ef125b41c46e5667c3")))
        (sha256
          (base32
            "0f6kafr7zqgdlw914bxh2390a1bjz5zy3h30yrfpavz283ycvrrw"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el")
    (synopsis
      "Change priority of minor-mode keymaps")
    (description
      "Documentation at https://melpa.org/#/minor-mode-hack")
    (license #f)))

(define-public emacs-mlscroll
  (package
    (name "emacs-mlscroll")
    (version "20210601.2158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/mlscroll.git")
               (commit
                 "a9f2abd32f2517392a396d61e558bea3c887b5b6")))
        (sha256
          (base32
            "0affcw4vnk2jk7pn56alg4i1vmhf3db9dz0x06k4wl2jcm5cslzd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdtsmith/mlscroll")
    (synopsis "A scroll bar for the modeline")
    (description
      "Documentation at https://melpa.org/#/mlscroll")
    (license #f)))

(define-public emacs-mo-vi-ment-mode
  (package
    (name "emacs-mo-vi-ment-mode")
    (version "20181217.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AjayMT/mo-vi-ment.git")
               (commit
                 "e8b525ffc5faa31d36ecc5496b40f0f5c3603c08")))
        (sha256
          (base32
            "16ic8yhjfk0ijlcw7a270p7953w750qza3xdbf4vygkiqqkxiv84"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provide vi-like cursor movement that's easy on the fingers")
    (description
      "Documentation at https://melpa.org/#/mo-vi-ment-mode")
    (license #f)))

(define-public emacs-mocha
  (package
    (name "emacs-mocha")
    (version "20200729.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/scottaj/mocha.el.git")
               (commit
                 "6a72fa20e7be6e55c09b1bc9887ee09c5df28e45")))
        (sha256
          (base32
            "0xp0xps5xvamp7jdxq6hkmyp63ww9ca7imf0nz35xivwwkk17ri6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode emacs-f))
    (home-page "http://github.com/scottaj/mocha.el")
    (synopsis "Run Mocha or Jasmine tests")
    (description
      "Documentation at https://melpa.org/#/mocha")
    (license #f)))

(define-public emacs-mocha-snippets
  (package
    (name "emacs-mocha-snippets")
    (version "20190417.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cowboyd/mocha-snippets.el.git")
               (commit
                 "44998ea42136a6912ce80061909db1c4c77c8ed8")))
        (sha256
          (base32
            "0w1d7j3ay0nkq4lp63lf7597rxfchikvw58w2h8g49cxx8vyl4l8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis
      "Yasnippets for the Mocha JS Testing Framework")
    (description
      "Documentation at https://melpa.org/#/mocha-snippets")
    (license #f)))

(define-public emacs-mocker
  (package
    (name "emacs-mocker")
    (version "20210115.157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/mocker.el.git")
               (commit
                 "5b01b3cc51388faf1ba823683c3600790099c84c")))
        (sha256
          (base32
            "0nmi6bsbbgcxihjb865bmm2zrirnzi1lq02d6cl1df57k47md4ny"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mocker.el")))
    (home-page "unspecified")
    (synopsis "mocking framework for emacs")
    (description
      "Documentation at https://melpa.org/#/mocker")
    (license #f)))

(define-public emacs-mode-line-debug
  (package
    (name "emacs-mode-line-debug")
    (version "20210525.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/mode-line-debug.git")
               (commit
                 "41184eb66a3205abcc32a885780004207df86dbd")))
        (sha256
          (base32
            "0qnrvddbka8klmihfaydpkwrigrjmbabxnm0vkybdqwzx619hwyi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/mode-line-debug")
    (synopsis
      "show status of `debug-on-error' in the mode-line")
    (description
      "Documentation at https://melpa.org/#/mode-line-debug")
    (license #f)))

(define-public emacs-mode-line-idle
  (package
    (name "emacs-mode-line-idle")
    (version "20210215.2345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-mode-line-idle.git")
               (commit
                 "8454a5ef404c6f4fe954a10da6ce4fd4311decfa")))
        (sha256
          (base32
            "01aq4bgris8v7q0yfyz1928q4rh9mba3b799zw2df8slqiigbf8i"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-mode-line-idle")
    (synopsis "Evaluate mode line content when idle")
    (description
      "Documentation at https://melpa.org/#/mode-line-idle")
    (license #f)))

(define-public emacs-modern-fringes
  (package
    (name "emacs-modern-fringes")
    (version "20200321.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpecialBomb/emacs-modern-fringes.git")
               (commit
                 "108daba8407dc8acf140157e7f49137c397a0af7")))
        (sha256
          (base32
            "15370yw3147fzx8ly1svk7xvm0l9fg2gbzd8sx9ls93nyml7c5k7"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/specialbomb/emacs-modern-fringes")
    (synopsis
      "Replaces default fringe bitmaps with better looking ones")
    (description
      "Documentation at https://melpa.org/#/modern-fringes")
    (license #f)))

(define-public emacs-modern-sh
  (package
    (name "emacs-modern-sh")
    (version "20211101.1001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/modern-sh.git")
               (commit
                 "8ebebe77304aa8170f7af809e7564c79d3bd45da")))
        (sha256
          (base32
            "08a6b8yjryphq4qpnqfy62saq1vmwqnhcind0n6s88f0qrmlywvc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hydra emacs-eval-in-repl))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/modern-sh")
    (synopsis "Minor mode for editing shell script")
    (description
      "Documentation at https://melpa.org/#/modern-sh")
    (license #f)))

(define-public emacs-modular-config
  (package
    (name "emacs-modular-config")
    (version "20210726.1614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SidharthArya/modular-config.el.git")
               (commit
                 "2bd77193fa3a7ec0541db284b4034821a8f59fea")))
        (sha256
          (base32
            "1bbycd4cr280vl643kvnzyml44mg63yh4i28bbszmj2yrkxy0frj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/SidharthArya/modular-config.el")
    (synopsis
      "Organize your config into small and loadable modules")
    (description
      "Documentation at https://melpa.org/#/modular-config")
    (license #f)))

(define-public emacs-molecule
  (package
    (name "emacs-molecule")
    (version "20180527.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/drymerisnothere/molecule-el.git")
               (commit
                 "2ef72b81d9aa24ea782b71a061a3abdad6cae162")))
        (sha256
          (base32
            "0fn16jlpdfy35mz0n27bzdiwgvv8l9nfxf8j4pypgpqarnxzpsgc"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.daemons.it/drymer/molecule.el")
    (synopsis "Simple wrapper for molecule")
    (description
      "Documentation at https://melpa.org/#/molecule")
    (license #f)))

(define-public emacs-molokai-theme
  (package
    (name "emacs-molokai-theme")
    (version "20151016.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alloy-d/color-theme-molokai.git")
               (commit
                 "04a44f21184b6a26caae4f2c92db9019d883309c")))
        (sha256
          (base32
            "1hqa59pdrnwfykyl58lr8pfbh2f13sygvmrh707hbwc2aii0jjv2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("molokai-theme.el")))
    (home-page
      "https://github.com/alloy-d/color-theme-molokai")
    (synopsis
      "molokai theme with Emacs theme engine")
    (description
      "Documentation at https://melpa.org/#/molokai-theme")
    (license #f)))

(define-public emacs-monky
  (package
    (name "emacs-monky")
    (version "20210417.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/monky.git")
               (commit
                 "72c7cd21b7b995c476e938fd0b92a494aa25c3a7")))
        (sha256
          (base32
            "03khwadd3x3s9wrggdfjj8cff0nr64fj6hzc9yqbn2baxfkgrn8l"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.info" "style")))
    (home-page
      "http://github.com/ananthakumaran/monky")
    (synopsis "Control Hg from Emacs.")
    (description
      "Documentation at https://melpa.org/#/monky")
    (license #f)))

(define-public emacs-monokai-theme
  (package
    (name "emacs-monokai-theme")
    (version "20201229.1001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oneKelvinSmith/monokai-emacs.git")
               (commit
                 "c5a7978bfc2ad2aa90882e6b2583668dc7b3e1a5")))
        (sha256
          (base32
            "0p22mfb84ja35v52v4x5inzndcl1ac3g9vvl3s2m5zq68ljy2p18"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/oneKelvinSmith/monokai-emacs")
    (synopsis "A fruity color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/monokai-theme")
    (license #f)))

(define-public emacs-mood-one-theme
  (package
    (name "emacs-mood-one-theme")
    (version "20210221.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jessieh/mood-one-theme.git")
               (commit
                 "42e402a89473458f55a71c5bbe785575e9a927ba")))
        (sha256
          (base32
            "1ma5138src6iglkhd2h8w9k4gqqaxvsngz08cd4v2s8dhqkcayw8"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jessieh/mood-one-theme")
    (synopsis
      "A dark color scheme inspired by the Doom One theme.")
    (description
      "Documentation at https://melpa.org/#/mood-one-theme")
    (license #f)))

(define-public emacs-moonshot
  (package
    (name "emacs-moonshot")
    (version "20210627.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ageldama/moonshot.git")
               (commit
                 "ec37a12825888047a90d9ee8131aa4bea348edf7")))
        (sha256
          (base32
            "0vd9m2zs3rch361ykmf0l3fjsrk1rwlb7w1dc7zz3gwpb6nas845"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-projectile
            emacs-counsel
            emacs-realgud
            emacs-levenshtein))
    (home-page
      "https://github.com/ageldama/moonshot")
    (synopsis
      "Run executable file, debug and build commands on project")
    (description
      "Documentation at https://melpa.org/#/moonshot")
    (license #f)))

(define-public emacs-morganey-mode
  (package
    (name "emacs-morganey-mode")
    (version "20170118.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/morganey-lang/morganey-mode.git")
               (commit
                 "5cf3870432a2aeb69d373abe63b3be1f325f6d21")))
        (sha256
          (base32
            "04xv4v2n03axjlpm9pg3j4zjapqjb7is3anx6laa90zbw3z2iv9z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/morganey-lang/morganey-mode")
    (synopsis
      "Major mode for editing Morganey files")
    (description
      "Documentation at https://melpa.org/#/morganey-mode")
    (license #f)))

(define-public emacs-most-used-words
  (package
    (name "emacs-most-used-words")
    (version "20200808.931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/udyantw/most-used-words.git")
               (commit
                 "f712879493660c3c3ee3793470b8f8939b79c2b0")))
        (sha256
          (base32
            "0aim8kzs95xjf6ldc4qy9xma1crxybmafs40sqaq35cbfszg0mf0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/udyantw/most-used-words")
    (synopsis "Display most used words in buffer")
    (description
      "Documentation at https://melpa.org/#/most-used-words")
    (license #f)))

(define-public emacs-motion-mode
  (package
    (name "emacs-motion-mode")
    (version "20140920.156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ainame/motion-mode.git")
               (commit
                 "4c94180e3ecea611a61240a0c0cd48f1032c4a55")))
        (sha256
          (base32
            "17570labnwdnwca2cg4ga0mrrm00n0h3wlxry823k5yn3k93rnj1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flymake-easy emacs-flymake-cursor))
    (arguments '(#:files ("*.el" "bin" "lib")))
    (home-page
      "https://github.com/ainame/motion-mode")
    (synopsis "major mode for RubyMotion enviroment")
    (description
      "Documentation at https://melpa.org/#/motion-mode")
    (license #f)))

(define-public emacs-move-text
  (package
    (name "emacs-move-text")
    (version "20170909.330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/move-text.git")
               (commit
                 "bfc255110ad05732a43cf25d6a0e3b4a6710b58c")))
        (sha256
          (base32
            "0pjrl9az2c42bxz3ll7d8mng31ki5id8yfymkgmz73vajik2yc3h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/move-text")
    (synopsis
      "Move current line or region with M-up or M-down.")
    (description
      "Documentation at https://melpa.org/#/move-text")
    (license #f)))

(define-public emacs-mozc-temp
  (package
    (name "emacs-mozc-temp")
    (version "20160228.840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/mozc-temp.git")
               (commit
                 "90a6eb1db8fa1283b944432cfb83739286b37f92")))
        (sha256
          (base32
            "03pqqzzca9z3a1nbrfdkvfczzi7nr3bn75x7m4mdww9z3wxxda2c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-mozc))
    (home-page "https://github.com/HKey/mozc-temp")
    (synopsis "Use mozc temporarily")
    (description
      "Documentation at https://melpa.org/#/mozc-temp")
    (license #f)))

(define-public emacs-mpages
  (package
    (name "emacs-mpages")
    (version "20150710.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slevin/mpages.git")
               (commit
                 "39a72a0931ab1cdbfdf0ab9f412dc12d43a3829f")))
        (sha256
          (base32
            "11c8pr3s77aq34ic32lnsialwh8bw3m78kj838xl2aab2pgrlny2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/slevin/mpages")
    (synopsis
      "An Emacs buffer for quickly writing your Morning Pages")
    (description
      "Documentation at https://melpa.org/#/mpages")
    (license #f)))

(define-public emacs-mpdmacs
  (package
    (name "emacs-mpdmacs")
    (version "20210904.35")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sp1ff/mpdmacs.git")
               (commit
                 "334b066dc5bb82d9ccb6cc30d63afed0f7610fe8")))
        (sha256
          (base32
            "0pkw79sccsvx845xgd2a2rql6ic7jkzki90xj268czvcgvfy4kn1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elmpd))
    (home-page "https://github.com/sp1ff/mpdmacs")
    (synopsis "A lightweight MPD client")
    (description
      "Documentation at https://melpa.org/#/mpdmacs")
    (license #f)))

(define-public emacs-mpmc-queue
  (package
    (name "emacs-mpmc-queue")
    (version "20180303.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smizoe/mpmc-queue.git")
               (commit
                 "df07d6bef7468edb1d73ef73b8331b94d0e5d0ca")))
        (sha256
          (base32
            "17817l3afghg9z8jxkj61yg85plmr74ki3wf4hz685llx8fr69w0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-queue))
    (home-page
      "https://github.com/smizoe/mpmc-queue")
    (synopsis
      "a multiple-producer-multiple-consumer queue")
    (description
      "Documentation at https://melpa.org/#/mpmc-queue")
    (license #f)))

(define-public emacs-mpv
  (package
    (name "emacs-mpv")
    (version "20211121.1801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kljohann/mpv.el.git")
               (commit
                 "b026ae5bb6139b8bbbc572d24974dcd295c1465c")))
        (sha256
          (base32
            "1knipmddx8nrd762v7lsnjjqacfrj53ya28yji8k2929k9s3rq83"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kljohann/mpv.el")
    (synopsis "control mpv for easy note-taking")
    (description
      "Documentation at https://melpa.org/#/mpv")
    (license #f)))

(define-public emacs-mqr
  (package
    (name "emacs-mqr")
    (version "20180527.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/calancha/multi-replace.git")
               (commit
                 "4ade19d4620b8b61340290bf63fa56d5e493859f")))
        (sha256
          (base32
            "0pkxmv0rla9f2ly9fq3i3mrsa2q8rsrs4pk6w7wpi3v5fbj1jmd6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/calancha/multi-replace")
    (synopsis "Multi-dimensional query and replace")
    (description
      "Documentation at https://melpa.org/#/mqr")
    (license #f)))

(define-public emacs-msgpack
  (package
    (name "emacs-msgpack")
    (version "20200323.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/msgpack.el.git")
               (commit
                 "90e3086f259549b1667a3c5b9aa2d70aaeaa4d3d")))
        (sha256
          (base32
            "0g9a59x7xjf1p2swbi3v8bawdwkqliw3kcg70bca5dgg2jxgd4z6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/msgpack.el")
    (synopsis "Read and write MessagePack object")
    (description
      "Documentation at https://melpa.org/#/msgpack")
    (license #f)))

(define-public emacs-mu4e-overview
  (package
    (name "emacs-mu4e-overview")
    (version "20200824.1549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkcms/mu4e-overview.git")
               (commit
                 "7daaa35a6d78feb83167e780a9c23da719c9051b")))
        (sha256
          (base32
            "1fv31h6f7vhnkdrjf2jij6nirnqfxmxq464cmqzp3lfyzxi8pxg0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkcms/mu4e-overview")
    (synopsis "Show overview of maildir")
    (description
      "Documentation at https://melpa.org/#/mu4e-overview")
    (license #f)))

(define-public emacs-mu4e-views
  (package
    (name "emacs-mu4e-views")
    (version "20211222.1457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lordpretzel/mu4e-views.git")
               (commit
                 "a1d7268eb2b737ee69b5bdf45aacbc30e50204fe")))
        (sha256
          (base32
            "00yj0ldyxhzqdsbxr4jr4rd4j1njy1r0blh7py2nlxqia22c015g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xwidgets-reuse emacs-ht emacs-esxml))
    (home-page
      "https://github.com/lordpretzel/mu4e-views")
    (synopsis
      "View emails in mu4e using xwidget-webkit")
    (description
      "Documentation at https://melpa.org/#/mu4e-views")
    (license #f)))

(define-public emacs-mugur
  (package
    (name "emacs-mugur")
    (version "20210719.722")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaiolteanu/mugur.git")
               (commit
                 "267e0594790a5f34e474a5b480015f0f216a6865")))
        (sha256
          (base32
            "079pqjgq1gkd0mwhzdns5gw3l1xs8qxs0w59njxc8yp8p4ngzcq4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-anaphora emacs-dash))
    (home-page
      "https://github.com/mihaiolteanu/mugur")
    (synopsis
      "Configurator for QMK compatible keyboards")
    (description
      "Documentation at https://melpa.org/#/mugur")
    (license #f)))

(define-public emacs-multifiles
  (package
    (name "emacs-multifiles")
    (version "20130615.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/multifiles.el.git")
               (commit
                 "dddfe64b8e1c1cd1f9ccc1f03405477fc0d53897")))
        (sha256
          (base32
            "065l04ylplng1vgykkbn2vnkcs3sn1k2cikx1ha2q8wmgx6bkvai"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "View and edit parts of multiple files in one buffer")
    (description
      "Documentation at https://melpa.org/#/multifiles")
    (license #f)))

(define-public emacs-multiple-cursors
  (package
    (name "emacs-multiple-cursors")
    (version "20211112.2223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/multiple-cursors.el.git")
               (commit
                 "8a60fc7ef0ae6e5ca089a7c95264cd0ae83e7274")))
        (sha256
          (base32
            "14yayh8hmv00f27kgz5y57z035ccv94cmsgqpyl15p1vnwiq2if3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/magnars/multiple-cursors.el")
    (synopsis "Multiple cursors for Emacs.")
    (description
      "Documentation at https://melpa.org/#/multiple-cursors")
    (license #f)))

(define-public emacs-multistate
  (package
    (name "emacs-multistate")
    (version "20210124.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/multistate.git")
               (commit
                 "a7ab9dc7aac0b6d6d2f872de4e0d1b8550834a9b")))
        (sha256
          (base32
            "1r4l0s8401yfm3dl83yqffim5m1gsqzqz9pv3dvq3v8rb94m9n9s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "https://gitlab.com/matsievskiysv/multistate")
    (synopsis "Multistate mode")
    (description
      "Documentation at https://melpa.org/#/multistate")
    (license #f)))

(define-public emacs-mustache
  (package
    (name "emacs-mustache")
    (version "20210224.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/mustache.el.git")
               (commit
                 "6fcb31f5075edc5fc70c63426b2aef91352ca80f")))
        (sha256
          (base32
            "1rq2p376016y68w6447sd7h6zgzrxbb3skh7fjw7xfq1p6f19kr4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-s emacs-dash))
    (arguments
      '(#:files ("*.el" (:exclude "*-tests.el"))))
    (home-page
      "https://github.com/Wilfred/mustache.el")
    (synopsis
      "Mustache templating library in emacs lisp")
    (description
      "Documentation at https://melpa.org/#/mustache")
    (license #f)))

(define-public emacs-mustang-theme
  (package
    (name "emacs-mustang-theme")
    (version "20170719.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/mustang-theme.git")
               (commit
                 "dda6d04803f1c9b196b620ef564e7768fee15de2")))
        (sha256
          (base32
            "0pg3iay0iinf361v4ay8kizdxs5rm23ir556cwwgz3m3gbs0mgsh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mustang-theme.el")))
    (home-page
      "http://github.com/mswift42/mustang-theme")
    (synopsis "port of vim's mustang theme")
    (description
      "Documentation at https://melpa.org/#/mustang-theme")
    (license #f)))

(define-public emacs-mutt-mode
  (package
    (name "emacs-mutt-mode")
    (version "20191102.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/flexw/mutt-mode.git")
               (commit
                 "1d495de49e6f536459b00d5396a2f5ce5ad4757b")))
        (sha256
          (base32
            "1nxsbvhh99kwbgaxzmraryayppfmci2grg591zj8yhdh6d3l1jmj"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/flexw/mutt-mode")
    (synopsis
      "major mode for editing mutt configuration")
    (description
      "Documentation at https://melpa.org/#/mutt-mode")
    (license #f)))

(define-public emacs-mvn
  (package
    (name "emacs-mvn")
    (version "20181002.1617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/mvn-el.git")
               (commit
                 "223723d9ceeb2878b884e83abb8ca74ad2e42081")))
        (sha256
          (base32
            "1sl7kfg5w73cw9mv4x1m497dg27h42zgx2ywl4s8fmx2k9f2pq1q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/apgwoz/mvn-el")
    (synopsis "helpers for compiling with maven")
    (description
      "Documentation at https://melpa.org/#/mvn")
    (license #f)))

(define-public emacs-mxf-view
  (package
    (name "emacs-mxf-view")
    (version "20180501.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/t-suwa/mxf-view.git")
               (commit
                 "6ca3cc93d995fac5fc4d72275e1e984e9857ffcb")))
        (sha256
          (base32
            "0n0142kc7q4vy0n7winbvnc8zv4janlr2x4mi97f8v70drl4b18h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/t-suwa/mxf-view")
    (synopsis "Simple MXF viewer")
    (description
      "Documentation at https://melpa.org/#/mxf-view")
    (license #f)))

(define-public emacs-mynt-mode
  (package
    (name "emacs-mynt-mode")
    (version "20150512.2049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cbrst/mynt-mode.git")
               (commit
                 "23d4489167bfa899634548cb41ed32fdeb3600c9")))
        (sha256
          (base32
            "18ml0qz3iipm9w36zvwz77cbbrg885jgvzk6z4a33xcfp524xhma"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-virtualenvwrapper))
    (home-page "https://github.com/crshd/mynt-mode")
    (synopsis
      "Minor mode to work with the mynt static site generator")
    (description
      "Documentation at https://melpa.org/#/mynt-mode")
    (license #f)))

(define-public emacs-nameframe-projectile
  (package
    (name "emacs-nameframe-projectile")
    (version "20160928.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/nameframe.git")
               (commit
                 "aafb8c5c5fbe0510e2f5d5b6b6b5dd0b73abe5d8")))
        (sha256
          (base32
            "1ivklkz3j722wg038bh3hmycp9j64zjrig49vl42mkj6d3ggwilg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nameframe emacs-projectile))
    (arguments
      '(#:files ("nameframe-projectile.el")))
    (home-page "https://github.com/john2x/nameframe")
    (synopsis
      "Nameframe integration with Projectile")
    (description
      "Documentation at https://melpa.org/#/nameframe-projectile")
    (license #f)))

(define-public emacs-nameless
  (package
    (name "emacs-nameless")
    (version "20190429.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/Nameless.git")
               (commit
                 "a3a1ce3ec0c5724bcbfe553d831bd4f6b3fe863a")))
        (sha256
          (base32
            "0pxfn81bc8smik0qksfjbrdjkzy0cbjzbc3ik47zl2i9blmx5krv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/nameless")
    (synopsis
      "Hide package namespace in your emacs-lisp code")
    (description
      "Documentation at https://melpa.org/#/nameless")
    (license #f)))

(define-public emacs-namespaces
  (package
    (name "emacs-namespaces")
    (version "20130326.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/elisp-namespaces.git")
               (commit
                 "3d02525d9b9a5ae6e7be3adefd880121436e6270")))
        (sha256
          (base32
            "157hhb253m6a9l5wy6x8w5ar3x0qz1326l7a0npxif6pma0dd140"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("namespaces.el")))
    (home-page
      "https://github.com/chrisbarrett/elisp-namespaces")
    (synopsis
      "An implementation of namespaces for Elisp, with an emphasis on immutabilty.")
    (description
      "Documentation at https://melpa.org/#/namespaces")
    (license #f)))

(define-public emacs-navi-mode
  (package
    (name "emacs-navi-mode")
    (version "20201220.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/navi.git")
               (commit
                 "cf97e1e338815ad3a4d0bbbf4ff6dd1a4e322ca8")))
        (sha256
          (base32
            "12nb7rha3fh29djwnnc28k8g5bnwk2cvijym1i4m4q1fpymfm4ri"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-outshine emacs-outorg))
    (home-page "https://github.com/alphapapa/navi")
    (synopsis
      "major-mode for easy buffer-navigation")
    (description
      "Documentation at https://melpa.org/#/navi-mode")
    (license #f)))

(define-public emacs-nclip
  (package
    (name "emacs-nclip")
    (version "20130617.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/nclip.el.git")
               (commit
                 "af88e38b1f04be02bf2e57affc662dbd0f828e67")))
        (sha256
          (base32
            "178gjv7kq97p9i4naxql7xabvmchw5x8idkpyjqqky3b24v5wkis"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("nclip.el" "nclip.rb" "nclip.py")))
    (home-page "http://www.github.com/maio/nclip.el")
    (synopsis "Network (HTTP) Clipboard")
    (description
      "Documentation at https://melpa.org/#/nclip")
    (license #f)))

(define-public emacs-neato-graph-bar
  (package
    (name "emacs-neato-graph-bar")
    (version "20181130.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/RobertCochran/neato-graph-bar.git")
               (commit
                 "a7ae35afd67911e8924f36e646bce0d3e3c1bbe6")))
        (sha256
          (base32
            "0sx2m2j00xhcb8l7fw595zsn9wjhcj4xb163rjqd3d1wjrk6fpn8"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/RobertCochran/neato-graph-bar")
    (synopsis "Neat-o graph bars CPU/memory etc.")
    (description
      "Documentation at https://melpa.org/#/neato-graph-bar")
    (license #f)))

(define-public emacs-neotree
  (package
    (name "emacs-neotree")
    (version "20200324.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaypei/emacs-neotree.git")
               (commit
                 "98fe21334affaffe2334bf7c987edaf1980d2d0b")))
        (sha256
          (base32
            "1m4d5l48k1frbkspk6wlzhbjn133bj7spp5chlgv8p4p9rpnc2zr"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/jaypei/emacs-neotree")
    (synopsis "A tree plugin like NerdTree for Vim")
    (description
      "Documentation at https://melpa.org/#/neotree")
    (license #f)))

(define-public emacs-netease-cloud-music
  (package
    (name "emacs-netease-cloud-music")
    (version "20211030.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpringHan/netease-cloud-music.el.git")
               (commit
                 "d821e0359883ae5ccc12a1cb0f684909cbde98a3")))
        (sha256
          (base32
            "0p595lfwzzmjzxx4mdzp47bab07ypxkk3jk3yzvd1dcf2lgd0h9k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/SpringHan/netease-cloud-music.git")
    (synopsis "Netease Cloud Music client")
    (description
      "Documentation at https://melpa.org/#/netease-cloud-music")
    (license #f)))

(define-public emacs-netease-music
  (package
    (name "emacs-netease-music")
    (version "20210411.603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicehiro/netease-music.git")
               (commit
                 "db7f1eef2d8544983509db679be1cbe6a5678071")))
        (sha256
          (base32
            "13vylyywsp6h4w04g56af5fav8d11sbf90h78b6mv81vp850842p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names))
    (home-page
      "https://github.com/nicehiro/netease-music")
    (synopsis "listen netease music")
    (description
      "Documentation at https://melpa.org/#/netease-music")
    (license #f)))

(define-public emacs-neuron-mode
  (package
    (name "emacs-neuron-mode")
    (version "20210227.1737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/felko/neuron-mode.git")
               (commit
                 "a968a923aad07ab15fb35deb79ac95581a427b4c")))
        (sha256
          (base32
            "1mb55bbsb32gxms488pjw9fsqiic2qfmwkhm3pwcgy194723vcaa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-markdown-mode
            emacs-company))
    (home-page
      "https://github.com/felko/neuron-mode")
    (synopsis
      "Major mode for editing zettelkasten notes using neuron")
    (description
      "Documentation at https://melpa.org/#/neuron-mode")
    (license #f)))

(define-public emacs-nexus
  (package
    (name "emacs-nexus")
    (version "20210903.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-nexus.git")
               (commit
                 "9603fd3d8ef34d4b3dcad3292c4ac743500d4946")))
        (sha256
          (base32
            "07bp6vb2d4sf0csnrc52xiib3lzxpd0mzlpjbikpcn17xjm6xjcb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "REST Client for Nexus Maven Repository servers")
    (description
      "Documentation at https://melpa.org/#/nexus")
    (license #f)))

(define-public emacs-nikki
  (package
    (name "emacs-nikki")
    (version "20210227.1707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/th994/nikki.git")
               (commit
                 "b2ea20d04a061df88d72bd8dd0412a6e7876458d")))
        (sha256
          (base32
            "0a4kv2zb6wmacfjsihzr1ac6rsynay30zl2qiyzv21js6wmrwn9c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/th994/nikki")
    (synopsis "A simple diary mode")
    (description
      "Documentation at https://melpa.org/#/nikki")
    (license #f)))

(define-public emacs-nikola
  (package
    (name "emacs-nikola")
    (version "20170703.2021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/drymerisnothere/nikola-el.git")
               (commit
                 "964715ac30943c9d6976999cad208dc60d09def0")))
        (sha256
          (base32
            "0b0bpw9r2xi1avzq76pl58bbk1shb57d3bmzd9d53d07gj5c9399"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      ": https://git.daemons.it/drymer/nikola.el")
    (synopsis "Simple wrapper for nikola")
    (description
      "Documentation at https://melpa.org/#/nikola")
    (license #f)))

(define-public emacs-nimbus-theme
  (package
    (name "emacs-nimbus-theme")
    (version "20211209.1529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m-cat/nimbus-theme.git")
               (commit
                 "5ae0bee99d005e62c3b18e793a81405a1a3ca0e5")))
        (sha256
          (base32
            "15fhim7cj7inc2kyl0xgv18a8p4lygnpkxgbq34nl567y9374vs4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/m-cat/nimbus-theme")
    (synopsis "An awesome dark theme")
    (description
      "Documentation at https://melpa.org/#/nimbus-theme")
    (license #f)))

(define-public emacs-nix-haskell-mode
  (package
    (name "emacs-nix-haskell-mode")
    (version "20190615.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matthewbauer/nix-haskell-mode.git")
               (commit
                 "68efbcbf949a706ecca6409506968ed2ef928a20")))
        (sha256
          (base32
            "1zv3sj3pgc2chv3880nyixvdmpw9sm4h153xw7gm26v2yhhkfdnn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-haskell-mode emacs-nix-mode))
    (home-page
      "https://github.com/matthewbauer/nix-haskell")
    (synopsis "haskell-mode integrations for Nix")
    (description
      "Documentation at https://melpa.org/#/nix-haskell-mode")
    (license #f)))

(define-public emacs-nix-sandbox
  (package
    (name "emacs-nix-sandbox")
    (version "20210325.1622")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (arguments '(#:files ("nix-sandbox.el")))
    (home-page
      "https://github.com/travisbhartwell/nix-emacs")
    (synopsis
      "Utility functions to work with nix-shell sandboxes")
    (description
      "Documentation at https://melpa.org/#/nix-sandbox")
    (license #f)))

(define-public emacs-nix-update
  (package
    (name "emacs-nix-update")
    (version "20190124.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/nix-update-el.git")
               (commit
                 "fc6c39c2da3fcfa62f4796816c084a6389c8b6e7")))
        (sha256
          (base32
            "01cpl4w49m5dfkx7l8g1q183s341iz6vkjv2q4fbx93avd7msjgi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/nix-update-el")
    (synopsis
      "Update \"fetch\" blocks in .nix expressions")
    (description
      "Documentation at https://melpa.org/#/nix-update")
    (license #f)))

(define-public emacs-nixos-options
  (package
    (name "emacs-nixos-options")
    (version "20160209.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("nixos-options.el")))
    (home-page
      "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis
      "Interface for browsing and completing NixOS options.")
    (description
      "Documentation at https://melpa.org/#/nixos-options")
    (license #f)))

(define-public emacs-nntwitter
  (package
    (name "emacs-nntwitter")
    (version "20210911.1751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/nntwitter.git")
               (commit
                 "a802ef9b589dda41bcb5d6cfce2faf8948c20c8c")))
        (sha256
          (base32
            "0fcskdyapz59cvik117vzj7hyv8kvvp6kh0aing2bgndwvai4apg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-anaphora emacs-request))
    (arguments '(#:files ("lisp/*.el")))
    (home-page
      "https://github.com/dickmao/nntwitter")
    (synopsis "Gnus Backend For Twitter")
    (description
      "Documentation at https://melpa.org/#/nntwitter")
    (license #f)))

(define-public emacs-nocomments-mode
  (package
    (name "emacs-nocomments-mode")
    (version "20170213.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/nocomments-mode.git")
               (commit
                 "5a41a20cc44dfe4a9ea584354ed6dbc15dd92f46")))
        (sha256
          (base32
            "0jwwnypa0lx812p3dqqn9c05g27qavnvr23pzphydx9i15nz80g0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/nocomments-mode")
    (synopsis
      "Minor mode that makes comments invisible.")
    (description
      "Documentation at https://melpa.org/#/nocomments-mode")
    (license #f)))

(define-public emacs-nordless-theme
  (package
    (name "emacs-nordless-theme")
    (version "20201222.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-colorless-themes))
    (arguments '(#:files ("nordless-theme.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A mostly colorless version of nord-theme")
    (description
      "Documentation at https://melpa.org/#/nordless-theme")
    (license #f)))

(define-public emacs-notmuch-addr
  (package
    (name "emacs-notmuch-addr")
    (version "20210615.1512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tarsius/notmuch-addr")
               (commit
                 "c447ddb94b3c2a473ec1762fc083794acd6057f0")))
        (sha256
          (base32
            "0x6vvi3j27xi2gkgd9mf7mfprmymdhc4zvna9gn71padpaqf9v50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/notmuch-addr")
    (synopsis "An alternative to notmuch-address.el")
    (description
      "Documentation at https://melpa.org/#/notmuch-addr")
    (license #f)))

(define-public emacs-notmuch-transient
  (package
    (name "emacs-notmuch-transient")
    (version "20210703.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tarsius/notmuch-transient")
               (commit
                 "d43ac12e397e1f014deef6c76aaf9b187b17ba5b")))
        (sha256
          (base32
            "1hv3p124wg8lc9jzb8llp47q9x3c9bwy7k6zvsncb1p513n7z8di"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/notmuch-transient")
    (synopsis "Command dispatchers for Notmuch")
    (description
      "Documentation at https://melpa.org/#/notmuch-transient")
    (license #f)))

(define-public emacs-noxml-fold
  (package
    (name "emacs-noxml-fold")
    (version "20170823.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paddymcall/noXML-fold.git")
               (commit
                 "46c7f6a008672213238a9f8d7a416ce80916aa62")))
        (sha256
          (base32
            "0axr7n4wdrd009lz6sg4y9ggf4f5svgrsclwhs0hyn2ld34rvrax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paddymcall/noxml-fold")
    (synopsis "Fold away XML things.")
    (description
      "Documentation at https://melpa.org/#/noxml-fold")
    (license #f)))

(define-public emacs-nrepl-eval-sexp-fu
  (package
    (name "emacs-nrepl-eval-sexp-fu")
    (version "20201007.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samaaron/nrepl-eval-sexp-fu.git")
               (commit
                 "2d6ad728b1ba290974a2ae1f232a5a96810a135b")))
        (sha256
          (base32
            "0prm2iyahvrm1ngkq3vxz21g2pzvrz60dl7g4yrs683vbmys7b0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-highlight emacs-smartparens))
    (home-page "unspecified")
    (synopsis
      "Tiny functionality enhancements for evaluating sexps.")
    (description
      "Documentation at https://melpa.org/#/nrepl-eval-sexp-fu")
    (license #f)))

(define-public emacs-ns-auto-titlebar
  (package
    (name "emacs-ns-auto-titlebar")
    (version "20181022.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ns-auto-titlebar.git")
               (commit
                 "60273e764bf8d95abc40dd2fdc23af87ea9ee33b")))
        (sha256
          (base32
            "0cr0y0mflqr434223rfwlzzp2zdaddqymsrysbsrbv3qhh157sk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/ns-auto-titlebar")
    (synopsis
      "Set the MacOS transparent titlebar to match theme")
    (description
      "Documentation at https://melpa.org/#/ns-auto-titlebar")
    (license #f)))

(define-public emacs-nswbuff
  (package
    (name "emacs-nswbuff")
    (version "20210721.741")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/nswbuff.git")
               (commit
                 "fa9dcf131697ea7af066e11a1edcc881c397e07f")))
        (sha256
          (base32
            "0bkx7mwy3zbb0ixawvn4cysxk3jjc7ahssvdprvw19ls9xx3wbsp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joostkremers/nswbuff")
    (synopsis "Quick switching between buffers.")
    (description
      "Documentation at https://melpa.org/#/nswbuff")
    (license #f)))

(define-public emacs-nubox
  (package
    (name "emacs-nubox")
    (version "20170619.910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martijnat/nubox.git")
               (commit
                 "1ccb8035ae42727ba6bdd5c1106fbceddeeed370")))
        (sha256
          (base32
            "02yh99rcgxdq6jn4xs8782nl6bjccmal8j78qslvpkrzrrxjajx6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Nubox color theme (dark, light and tty versions)")
    (description
      "Documentation at https://melpa.org/#/nubox")
    (license #f)))

(define-public emacs-nvm
  (package
    (name "emacs-nvm")
    (version "20210826.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/nvm.el.git")
               (commit
                 "c214762fd6f539ec3e1fd8198cefbdb4b428b19c")))
        (sha256
          (base32
            "0xcb2k98ka7lks7k0mk9inmjpyz03v8aq64a24pj635xp54x3iah"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/nvm.el")
    (synopsis "Manage Node versions within Emacs")
    (description
      "Documentation at https://melpa.org/#/nvm")
    (license #f)))

(define-public emacs-ob-ammonite
  (package
    (name "emacs-ob-ammonite")
    (version "20190813.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/ob-ammonite.git")
               (commit
                 "39937dff395e70aff76a4224fa49cf2ec6c57cca")))
        (sha256
          (base32
            "0aibvrhwj2swv9ixl6hx4b2yicbpi095mvs0fib7i1nhlg0zciqd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-ammonite-term-repl
            emacs-xterm-color))
    (home-page
      "https://github.com/zwild/ob-ammonite")
    (synopsis
      "org-babel for scala evaluation in Ammonite.")
    (description
      "Documentation at https://melpa.org/#/ob-ammonite")
    (license #f)))

(define-public emacs-ob-axiom
  (package
    (name "emacs-ob-axiom")
    (version "20190623.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pdo/axiom-environment")
               (commit
                 "e60de5ed107ffeb530a56d24d04f38988124d12b")))
        (sha256
          (base32
            "0p8kbxfcrx1ib8g17g6h2i2ygy35qq992n3s2xa6ysij7wrfn4hd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-axiom-environment))
    (arguments '(#:files ("ob-axiom.el")))
    (home-page "unspecified")
    (synopsis
      "An org-babel backend for the axiom-environment system")
    (description
      "Documentation at https://melpa.org/#/ob-axiom")
    (license #f)))

(define-public emacs-ob-cfengine3
  (package
    (name "emacs-ob-cfengine3")
    (version "20191011.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickanderson/ob-cfengine3.git")
               (commit
                 "195ba4694a0ec18d3fb89342e8e0988b382a5b1a")))
        (sha256
          (base32
            "0a18fv141s35vh1mza2d6q5japrfjg5g6l7gp6qq4k4im3gmaf86"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickanderson/ob-cfengine3")
    (synopsis "Org Babel functions for CFEngine 3")
    (description
      "Documentation at https://melpa.org/#/ob-cfengine3")
    (license #f)))

(define-public emacs-ob-cypher
  (package
    (name "emacs-ob-cypher")
    (version "20200521.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-cypher.git")
               (commit
                 "da9f97339474a48d759fc128cee610c0bc9ae6c0")))
        (sha256
          (base32
            "0r4dsbrdxhyyh708pm8fqn423v21xk7a940nbajw9y07n28y5hgk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-cypher-mode
            emacs-dash
            emacs-dash-functional))
    (home-page
      "http://github.com/zweifisch/ob-cypher")
    (synopsis
      "query neo4j using cypher in org-mode blocks")
    (description
      "Documentation at https://melpa.org/#/ob-cypher")
    (license #f)))

(define-public emacs-ob-dart
  (package
    (name "emacs-ob-dart")
    (version "20170106.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mzimmerm/ob-dart.git")
               (commit
                 "04d63b922a5469506560ca0c00678e57131e0269")))
        (sha256
          (base32
            "1r0r0dqsr44kcbj2w96rbx8alvkkfzc98ac35zb4ncy1bf71jhfb"))))
    (build-system melpa-build-system)
    (home-page "http://github.org/mzimmerm/ob-dart")
    (synopsis
      "org-babel functions for Dart evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-dart")
    (license #f)))

(define-public emacs-ob-fsharp
  (package
    (name "emacs-ob-fsharp")
    (version "20170618.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/ob-fsharp.git")
               (commit
                 "0b2fdd9bb4f38af8b5cf4914627af52f5b43d9f7")))
        (sha256
          (base32
            "1z1m2dqnvyyv9ff289p8x1hajnz9n0mmfkrkyl1zvipaqd9mgljw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fsharp-mode))
    (home-page
      "https://github.com/juergenhoetzel/ob-fsharp")
    (synopsis "Org-Babel F#")
    (description
      "Documentation at https://melpa.org/#/ob-fsharp")
    (license #f)))

(define-public emacs-ob-http
  (package
    (name "emacs-ob-http")
    (version "20180707.1448")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-http.git")
               (commit
                 "b1428ea2a63bcb510e7382a1bf5fe82b19c104a7")))
        (sha256
          (base32
            "11fx9c94xxhl09nj9z5b5v6sm0xwkqawgjnnm7bg56vvj495n6h7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "http://github.com/zweifisch/ob-http")
    (synopsis "http request in org-mode babel")
    (description
      "Documentation at https://melpa.org/#/ob-http")
    (license #f)))

(define-public emacs-ob-ipython
  (package
    (name "emacs-ob-ipython")
    (version "20180224.953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregsexton/ob-ipython.git")
               (commit
                 "7147455230841744fb5b95dcbe03320313a77124")))
        (sha256
          (base32
            "1a10fc2jk37ni5sjjvf87s5nyaz2a6h2mlj5dxh4dhv5sd3bb85p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-dash-functional
            emacs-f))
    (arguments '(#:files (:defaults "*.py")))
    (home-page "http://www.gregsexton.org")
    (synopsis
      "org-babel functions for IPython evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-ipython")
    (license #f)))

(define-public emacs-ob-mermaid
  (package
    (name "emacs-ob-mermaid")
    (version "20200320.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnm/ob-mermaid.git")
               (commit
                 "cca09b64eff689d8bb15a77de9d4c7fe9845a1f9")))
        (sha256
          (base32
            "1wwmf14df2rnxlfs8bwb9p4q1a1plschbq2g9vqflphj6kv213m4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/arnm/ob-mermaid")
    (synopsis
      "org-babel support for mermaid evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-mermaid")
    (license #f)))

(define-public emacs-ob-mongo
  (package
    (name "emacs-ob-mongo")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/ob-mongo.git")
               (commit
                 "371bf19c7c10eab2f86424f8db8ab685997eb5aa")))
        (sha256
          (base32
            "02k4gvh1nqhn0h36h77vvms7xwwak8rdddibbidsrwwspbr4qr1s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/krisajenkins/ob-mongo")
    (synopsis
      "Execute mongodb queries within org-mode blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-mongo")
    (license #f)))

(define-public emacs-ob-php
  (package
    (name "emacs-ob-php")
    (version "20211109.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/ob-php.git")
               (commit
                 "3699808eb1ba56268ccc2e366151183e91e8c711")))
        (sha256
          (base32
            "0m0qgssa0rxh7apcxr7lz0wi5vsrgnsysjw0zj2mk6fz1drg02dw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stardiviner/ob-php")
    (synopsis "Execute PHP within org-mode blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-php")
    (license #f)))

(define-public emacs-ob-prolog
  (package
    (name "emacs-ob-prolog")
    (version "20190410.2130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ljos/ob-prolog.git")
               (commit
                 "331899cfe345c934026c70b78352d320f7d8e239")))
        (sha256
          (base32
            "1k34cl2whc32ysd7anvz8ii66ljfrmkvx3cgb6i42jcx74kavlfr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ljos/ob-prolog")
    (synopsis
      "org-babel functions for prolog evaluation.")
    (description
      "Documentation at https://melpa.org/#/ob-prolog")
    (license #f)))

(define-public emacs-ob-restclient
  (package
    (name "emacs-ob-restclient")
    (version "20210718.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alf/ob-restclient.el.git")
               (commit
                 "bfbc4d8e8a348c140f9328542daf5d979f0993e2")))
        (sha256
          (base32
            "0nq5w2gankvb7ix8rv33814j7qvhiawd9r15b9i6syn1i5k5pxhj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-restclient))
    (home-page
      "https://github.com/alf/ob-restclient.el")
    (synopsis
      "org-babel functions for restclient-mode")
    (description
      "Documentation at https://melpa.org/#/ob-restclient")
    (license #f)))

(define-public emacs-ob-sagemath
  (package
    (name "emacs-ob-sagemath")
    (version "20191106.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/ob-sagemath.git")
               (commit
                 "79645bce0c25a650bae61e550434bed836995dce")))
        (sha256
          (base32
            "134d3pz38g2ki4war1jxp5440yq5smfkdjnknz5r29p49sch0zvx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sage-shell-mode emacs-s))
    (arguments '(#:files ("ob-sagemath.el" "*.py")))
    (home-page
      "https://github.com/stakemori/ob-sagemath")
    (synopsis
      "org-babel functions for SageMath evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-sagemath")
    (license #f)))

(define-public emacs-ob-smiles
  (package
    (name "emacs-ob-smiles")
    (version "20210527.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/ob-smiles.git")
               (commit
                 "9f1fed213eb194924ab7d12b9d6e1074578a791c")))
        (sha256
          (base32
            "1x0rq9l9j3khp47q2j9bnyhhj2xrs4zggw9p8rmmai165drh1i9r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-smiles-mode))
    (home-page "unspecified")
    (synopsis "Org-mode Babel support for SMILES.")
    (description
      "Documentation at https://melpa.org/#/ob-smiles")
    (license #f)))

(define-public emacs-ob-swift
  (package
    (name "emacs-ob-swift")
    (version "20170921.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-swift.git")
               (commit
                 "ed478ddbbe41ce5373efde06b4dd0c3663c9055f")))
        (sha256
          (base32
            "1vwg10d33mwb32bpdbpghfihy3ryiqbc4yydpb5hfv3v5k83vs0x"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zweifisch/ob-swift")
    (synopsis
      "org-babel functions for swift evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-swift")
    (license #f)))

(define-public emacs-ob-translate
  (package
    (name "emacs-ob-translate")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/ob-translate.git")
               (commit
                 "9d9054a51bafd5a29a8135964069b4fa3a80b169")))
        (sha256
          (base32
            "143dq3wp3h1zzk8ihj8yjw9ydqnf48q7y8yxxa0ly7f2v1li84bc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-google-translate))
    (home-page
      "https://github.com/krisajenkins/ob-translate")
    (synopsis
      "Translation of text blocks in org-mode.")
    (description
      "Documentation at https://melpa.org/#/ob-translate")
    (license #f)))

(define-public emacs-ob-typescript
  (package
    (name "emacs-ob-typescript")
    (version "20190910.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lurdan/ob-typescript.git")
               (commit
                 "0b2766b9d136cd6d81f4c15f1ad4b28542f484b9")))
        (sha256
          (base32
            "0crz6k41bva53x3qhvvzzdlml4v18f43fja8nkrlgwpn103d0x9h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lurdan/ob-typescript")
    (synopsis
      "org-babel functions for typescript evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-typescript")
    (license #f)))

(define-public emacs-obfusurl
  (package
    (name "emacs-obfusurl")
    (version "20170809.1524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/obfusurl.el.git")
               (commit
                 "7a5a41905000ce2ec1fd72509a5567e5fd9f47e5")))
        (sha256
          (base32
            "0jbrxlpx0cxg8jzqrssk3y3ab7v62ymi6ys24542a8vpk522vqxk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/obfusurl.el")
    (synopsis
      "Obfuscate URLs so they aren't spoilers")
    (description
      "Documentation at https://melpa.org/#/obfusurl")
    (license #f)))

(define-public emacs-objed
  (package
    (name "emacs-objed")
    (version "20200911.1435")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clemera/objed.git")
               (commit
                 "70f9fb5e0aa1627b0afc7c6b3d0aea9bac70a210")))
        (sha256
          (base32
            "1j9z2zj9b9yrvzmvhwqr7zrvh4rbxd62fdhn1rqv59b0jfmbcsqz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/clemera/objed")
    (synopsis "Navigate and edit text objects.")
    (description
      "Documentation at https://melpa.org/#/objed")
    (license #f)))

(define-public emacs-ocamlformat
  (package
    (name "emacs-ocamlformat")
    (version "20210923.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml-ppx/ocamlformat.git")
               (commit
                 "51cd55ad0aa6c6ccbea7fe3041de0931c0292be5")))
        (sha256
          (base32
            "1kga1izbp301rv8y2kdcwc2jrvy4bplaglsbspqm64yz6jcj570l"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/ocamlformat.el")))
    (home-page
      "https://github.com/ocaml-ppx/ocamlformat")
    (synopsis
      "Utility functions to format ocaml code")
    (description
      "Documentation at https://melpa.org/#/ocamlformat")
    (license #f)))

(define-public emacs-occur-x
  (package
    (name "emacs-occur-x")
    (version "20130610.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juan-leon/occur-x.git")
               (commit
                 "352f5fab207d8a1d3dd048073ff127a83e97c82b")))
        (sha256
          (base32
            "1zj0xhvl5qx42injv0av4lyzd3jsjls1m368dqd2qnswhfw8wfn6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Extra functionality for occur")
    (description
      "Documentation at https://melpa.org/#/occur-x")
    (license #f)))

(define-public emacs-oceanic-theme
  (package
    (name "emacs-oceanic-theme")
    (version "20161015.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/terry3/oceanic-theme.git")
               (commit
                 "a92ee9b470843c923e6cdcafdd65106ff994d04d")))
        (sha256
          (base32
            "1bj4l88546gmlfmwyg1zsqfz9g2l87hsa9jlrf8s4c907di736ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/terry3/oceanic-theme")
    (synopsis "Oceanic theme.")
    (description
      "Documentation at https://melpa.org/#/oceanic-theme")
    (license #f)))

(define-public emacs-ocp-indent
  (package
    (name "emacs-ocp-indent")
    (version "20211019.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OCamlPro/ocp-indent.git")
               (commit
                 "7c4d434132cebc15a8213c8be9e7323692eb0a2b")))
        (sha256
          (base32
            "036qvsjvs1div39w4rkkivg3yicmxcjdjsmdpp64asdzk7531bqq"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("tools/ocp-indent.el")))
    (home-page
      "http://www.typerex.org/ocp-indent.html")
    (synopsis
      "automatic indentation with ocp-indent")
    (description
      "Documentation at https://melpa.org/#/ocp-indent")
    (license #f)))

(define-public emacs-octicons
  (package
    (name "emacs-octicons")
    (version "20151101.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/octicons.git")
               (commit
                 "a61e561966ffd8faa3b48ce5b3a4eec10c59708b")))
        (sha256
          (base32
            "0w98ii2ny57al94a4h927xx1hn99df5if543v2gh36zqdlwc7xci"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-octicons")
    (synopsis "octicons utility")
    (description
      "Documentation at https://melpa.org/#/octicons")
    (license #f)))

(define-public emacs-ol-notmuch
  (package
    (name "emacs-ol-notmuch")
    (version "20210530.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tarsius/ol-notmuch")
               (commit
                 "126fb446d8fa9e54cf21103afaf506fd81273c02")))
        (sha256
          (base32
            "1pkb333m1rryhxf26p8661y7w9fnsaarn0qkzys1pyfj09q9rsmj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/ol-notmuch")
    (synopsis "Links to notmuch messages")
    (description
      "Documentation at https://melpa.org/#/ol-notmuch")
    (license #f)))

(define-public emacs-olc
  (package
    (name "emacs-olc")
    (version "20200818.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.liu.se/davby02/olc.git")
               (commit
                 "d2dc62dbc3cf6460cc12bd96857a988bc80ac37e")))
        (sha256
          (base32
            "176w03pybs5rg87cj94s0dy365pxp981mlkbh3zv3d34kpmrzh10"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.liu.se/davby02/olc")
    (synopsis "Open location code library")
    (description
      "Documentation at https://melpa.org/#/olc")
    (license #f)))

(define-public emacs-om-mode
  (package
    (name "emacs-om-mode")
    (version "20140915.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielsz/om-mode.git")
               (commit
                 "cdc0c2912321f8438b0f3449ba8aca50ec150bba")))
        (sha256
          (base32
            "03szb2i2xk3nq578cz1drsddsbld03ryvykdfzmfvwcmlpaknvzb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Insert Om component template with life cycle.")
    (description
      "Documentation at https://melpa.org/#/om-mode")
    (license #f)))

(define-public emacs-omni-log
  (package
    (name "emacs-omni-log")
    (version "20200304.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-log.el.git")
               (commit
                 "0a240660ccdd0b6588b4e3c322743b5ab1161338")))
        (sha256
          (base32
            "0xbrwj7zsqx91p28l3dknlhr3y5cj6lah6h5x1s9l9kmfz850dcp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-s emacs-dash))
    (home-page
      "https://github.com/AdrieanKhisbe/omni-log.el")
    (synopsis "Logging utilities")
    (description
      "Documentation at https://melpa.org/#/omni-log")
    (license #f)))

(define-public emacs-omni-tags
  (package
    (name "emacs-omni-tags")
    (version "20170426.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-tags.el.git")
               (commit
                 "8f0f6c302fab900b7681e5c039f90850cbbabd33")))
        (sha256
          (base32
            "0cqj4h4bdhmb0r6f2xx9g6cs3599m4j3snkrvsgddaq8c6mg47w0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pcre2el))
    (home-page
      "http://github.com/AdrieanKhisbe/omni-tags.el")
    (synopsis "Highlight and Actions for 'Tags'")
    (description
      "Documentation at https://melpa.org/#/omni-tags")
    (license #f)))

(define-public emacs-one-themes
  (package
    (name "emacs-one-themes")
    (version "20200720.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/balajisivaraman/emacs-one-themes.git")
               (commit
                 "0e77d31f9fc0cd55f3d92ec0db79513d616b2efd")))
        (sha256
          (base32
            "0dc2xkgnl5x542332cnlilbzy9ps060gjx0hkg8pfhismvavr4mi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/balajisivaraman/emacs-one-themes")
    (synopsis "One Colorscheme")
    (description
      "Documentation at https://melpa.org/#/one-themes")
    (license #f)))

(define-public emacs-opam
  (package
    (name "emacs-opam")
    (version "20150719.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/opam.git")
               (commit
                 "4d589de5765728f56af7078fae328b6792de8600")))
        (sha256
          (base32
            "1yqrp9icci5snp1485wb6y8mr2hjp9006ahch58lvmnq98bn7j45"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lunaryorn/opam.el")
    (synopsis "OPAM tools")
    (description
      "Documentation at https://melpa.org/#/opam")
    (license #f)))

(define-public emacs-openfoam
  (package
    (name "emacs-openfoam")
    (version "20210508.1903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralph-schleicher/emacs-openfoam.git")
               (commit
                 "1623aa8d9f72128cc007f84b108d2f6c6205c330")))
        (sha256
          (base32
            "14s0sfsy6gif6rfs39ryzwqkp150m9jbz2mna5aj7hiny46gjskf"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("openfoam.el")))
    (home-page
      "https://github.com/ralph-schleicher/emacs-openfoam")
    (synopsis "OpenFOAM files and directories")
    (description
      "Documentation at https://melpa.org/#/openfoam")
    (license #f)))

(define-public emacs-org-ac
  (package
    (name "emacs-org-ac")
    (version "20170401.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/org-ac.git")
               (commit
                 "41e3ef8e4039619d0370c23c66730b3b2e9e32ed")))
        (sha256
          (base32
            "1l3fn8vjdqq7rrn1b7l2i238bhjni13mg9v25dydin0sfb697abk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete-pcmp
            emacs-log4e
            emacs-yaxception))
    (home-page "https://github.com/aki2o/org-ac")
    (synopsis
      "Some auto-complete sources for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-ac")
    (license #f)))

(define-public emacs-org-agenda-property
  (package
    (name "emacs-org-agenda-property")
    (version "20140626.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/org-agenda-property.git")
               (commit
                 "3b469f3e93de0036547f3631cd0366d53f7584c8")))
        (sha256
          (base32
            "15xgkm5p30qfghyhkjivh5n4770794qf4pza462vb0xl5v6kffbm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/org-agenda-property")
    (synopsis
      "Display org properties in the agenda buffer.")
    (description
      "Documentation at https://melpa.org/#/org-agenda-property")
    (license #f)))

(define-public emacs-org-auto-tangle
  (package
    (name "emacs-org-auto-tangle")
    (version "20211115.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yilkalargaw/org-auto-tangle.git")
               (commit
                 "ad3c332f062b5830e88b2ab13287a096ae434657")))
        (sha256
          (base32
            "05yrw59zrzxj1p8n65sk6mvy7jzik812mp9i2nsimwhlhn3si1pj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/yilkalargaw/org-auto-tangle")
    (synopsis
      "Automatically and Asynchronously tangles org files on save")
    (description
      "Documentation at https://melpa.org/#/org-auto-tangle")
    (license #f)))

(define-public emacs-org-babel-eval-in-repl
  (package
    (name "emacs-org-babel-eval-in-repl")
    (version "20201206.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diadochos/org-babel-eval-in-repl.git")
               (commit
                 "3591f062873de2d64cc6f83b3555d030506e6ee7")))
        (sha256
          (base32
            "1fjifl69qja3ab0g72f1hkfns992qq0v9pw8p4hgvjycx7fpzk0a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eval-in-repl
            emacs-matlab-mode
            emacs-ess))
    (home-page
      "https://github.com/diadochos/org-babel-eval-in-repl")
    (synopsis
      "Eval org-mode babel code blocks in various REPLs.")
    (description
      "Documentation at https://melpa.org/#/org-babel-eval-in-repl")
    (license #f)))

(define-public emacs-org-beautify-theme
  (package
    (name "emacs-org-beautify-theme")
    (version "20170908.2218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jonnay/org-beautify-theme.git")
               (commit
                 "df6a1114fda313e1689363e196c8284fbe2a2738")))
        (sha256
          (base32
            "1lkz7736swimad12khwbbqc4gxjydgr1k45p4mx03s25pv1w920y"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("org-beautify-theme.el")))
    (home-page "unspecified")
    (synopsis
      "A sub-theme to make org-mode more beautiful.")
    (description
      "Documentation at https://melpa.org/#/org-beautify-theme")
    (license #f)))

(define-public emacs-org-board
  (package
    (name "emacs-org-board")
    (version "20200619.1016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/scallywag/org-board.git")
               (commit
                 "1393bd46d11a81328ed4fb8471831415a3efe224")))
        (sha256
          (base32
            "1kryrg988c3sbxyp1sdgc6xdv2iz6kiflpzn2rw4z3l4grzab53b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/scallywag/org-board")
    (synopsis
      "bookmarking and web archival system for Org mode.")
    (description
      "Documentation at https://melpa.org/#/org-board")
    (license #f)))

(define-public emacs-org-bookmark-heading
  (package
    (name "emacs-org-bookmark-heading")
    (version "20200103.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-bookmark-heading.git")
               (commit
                 "38a2813f72ff65f3ae91e2ebb23e0bbb42a8d1df")))
        (sha256
          (base32
            "09rfp0zf68gnhiwh61wc10kgqk75ypkbk0hawrw1rhida1bi2wb1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "http://github.com/alphapapa/org-bookmark-heading")
    (synopsis "Emacs bookmark support for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-bookmark-heading")
    (license #f)))

(define-public emacs-org-chef
  (package
    (name "emacs-org-chef")
    (version "20210930.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Chobbes/org-chef.git")
               (commit
                 "87e9a6c4844ff32f47c8d1108ec0f087a3148a8e")))
        (sha256
          (base32
            "0xdfaf3shl3iij7nnshb5ryccqq70rpk0zm0d3fdwdbfa8rf7fkp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Chobbes/org-chef")
    (synopsis
      "Cookbook and recipe management with org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-chef")
    (license #f)))

(define-public emacs-org-cliplink
  (package
    (name "emacs-org-cliplink")
    (version "20201126.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/org-cliplink.git")
               (commit
                 "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")))
        (sha256
          (base32
            "1avyiw8vlv4n1r7zqvc6wjlsz7jl2pqaprzpm782gzp0c999pssl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rexim/org-cliplink")
    (synopsis
      "insert org-mode links from the clipboard")
    (description
      "Documentation at https://melpa.org/#/org-cliplink")
    (license #f)))

(define-public emacs-org-d20
  (package
    (name "emacs-org-d20")
    (version "20210212.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.spwhitton.name/org-d20")
               (commit
                 "e6149dcfbb6302d10109dd792fd0ffae7bfe2595")))
        (sha256
          (base32
            "129zdnz97h6px0yz0f0if4gw96zxmsg24xc8vg51crsazqqz8l3b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://spwhitton.name/tech/code/org-d20/")
    (synopsis
      "minor mode for d20 tabletop roleplaying games")
    (description
      "Documentation at https://melpa.org/#/org-d20")
    (license #f)))

(define-public emacs-org-doing
  (package
    (name "emacs-org-doing")
    (version "20161017.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/org-doing.git")
               (commit
                 "07ddbfc238cba31e4990c9b52e9a2757b39111da")))
        (sha256
          (base32
            "1d9gf6wf3jp07bn2h6bbc75iy0wwdvzdlj9n4nwbc46nf3k154pa"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page "https://github.com/omouse/org-doing")
    (synopsis "Keep track of what you're doing")
    (description
      "Documentation at https://melpa.org/#/org-doing")
    (license #f)))

(define-public emacs-org-drill-table
  (package
    (name "emacs-org-drill-table")
    (version "20180115.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/org-drill-table.git")
               (commit
                 "2729aaa42c1e2720d9bf7bcc125e92dcf48b7f7d")))
        (sha256
          (base32
            "0rqjzn3n42jcnwa5vg2731vxrnj6vy2bacfxmg0hlh3rkhhn0r53"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis "Generate drill cards from org tables")
    (description
      "Documentation at https://melpa.org/#/org-drill-table")
    (license #f)))

(define-public emacs-org-dropbox
  (package
    (name "emacs-org-dropbox")
    (version "20150114.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/heikkil/org-dropbox.git")
               (commit
                 "75dab6d6f0438a7a8a18ccf3a5d55f50bf531f6e")))
        (sha256
          (base32
            "0jjdsng7fm4wbhvd9naqzdfsmkvj1sf1d9rikprg1pd58azv6idx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-names))
    (home-page
      "https://github.com/heikkil/org-dropbox")
    (synopsis
      "move Dropbox notes from phone into org-mode datetree")
    (description
      "Documentation at https://melpa.org/#/org-dropbox")
    (license #f)))

(define-public emacs-org-elisp-help
  (package
    (name "emacs-org-elisp-help")
    (version "20161122.55")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/org-elisp-help.git")
               (commit
                 "3e33ab1a2933dd7f2782ef91d667a37f12d633ab")))
        (sha256
          (base32
            "088pbafz1x4z7qi70cjbrvfrcdrjp4zy0yl115klbidshqhxycmj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/org-elisp-help")
    (synopsis
      "org links to emacs-lisp documentation")
    (description
      "Documentation at https://melpa.org/#/org-elisp-help")
    (license #f)))

(define-public emacs-org-elp
  (package
    (name "emacs-org-elp")
    (version "20210329.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guanyilun/org-elp.git")
               (commit
                 "36b5ab2ed3fa3b5917f058e3acf8dff2df69efae")))
        (sha256
          (base32
            "00qbabnac6i994ilrq1b7li1211ikc0frm5ilfafmh9v0y9k2spa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/guanyilun/org-elp")
    (synopsis
      "Preview latex equations in org mode while editing")
    (description
      "Documentation at https://melpa.org/#/org-elp")
    (license #f)))

(define-public emacs-org-grep
  (package
    (name "emacs-org-grep")
    (version "20151202.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/org-grep.git")
               (commit
                 "5bdd04c0f53b8a3d656f36ea17bba3df7f0cb684")))
        (sha256
          (base32
            "10jwqzs431mnwz717qdmcn0v8raklw41sbxbnkb36yrgznk8c09c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/pinard/org-grep")
    (synopsis
      "Kind of M-x rgrep adapted for Org mode.")
    (description
      "Documentation at https://melpa.org/#/org-grep")
    (license #f)))

(define-public emacs-org-journal-list
  (package
    (name "emacs-org-journal-list")
    (version "20190221.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/huytd/org-journal-list.git")
               (commit
                 "2b26d00181bb49bff64b31ad020490acd1b6ae02")))
        (sha256
          (base32
            "0bcj9b7c4pyyvxlgnysl5lhs9ndp60xwizd85zrkd2mh2m8sbq9v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/huytd/org-journal-list")
    (synopsis "Org mode Journal List")
    (description
      "Documentation at https://melpa.org/#/org-journal-list")
    (license #f)))

(define-public emacs-org-latex-impatient
  (package
    (name "emacs-org-latex-impatient")
    (version "20210409.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yangsheng6810/org-latex-impatient.git")
               (commit
                 "39f22dc98cb8268af67c6df71778ec5784d2b683")))
        (sha256
          (base32
            "14rjgdl941kja3hndc55q3c65fi7plviirxihffkw498h0vkbyhs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-posframe emacs-dash))
    (home-page
      "https://github.com/yangsheng6810/org-latex-instant-preview")
    (synopsis
      "Preview org-latex Fragments Instantly via MathJax")
    (description
      "Documentation at https://melpa.org/#/org-latex-impatient")
    (license #f)))

(define-public emacs-org-link-travis
  (package
    (name "emacs-org-link-travis")
    (version "20140405.2327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/org-link-travis.git")
               (commit
                 "596615ad8373d9090bd4138da683524f0ad0bda5")))
        (sha256
          (base32
            "1797pd264zn19zk93nifyw6pwk2a7wrpfir373qclk601yv2g5h8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aki2o/org-link-travis")
    (synopsis
      "Insert/Export the link of Travis CI on org-mode")
    (description
      "Documentation at https://melpa.org/#/org-link-travis")
    (license #f)))

(define-public emacs-org-listcruncher
  (package
    (name "emacs-org-listcruncher")
    (version "20210706.1741")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org-listcruncher.git")
               (commit
                 "075e0e6d36eb50406a608bc8a2f0dd359ec63938")))
        (sha256
          (base32
            "133smvw9iaxg0p3y5wl0rc4fwwgbxgw6hxngpmar8qf4grwy4w27"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dfeich/org-listcruncher")
    (synopsis
      "Planning tool - Parse Org mode lists into table")
    (description
      "Documentation at https://melpa.org/#/org-listcruncher")
    (license #f)))

(define-public emacs-org-make-toc
  (package
    (name "emacs-org-make-toc")
    (version "20200409.1436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-make-toc.git")
               (commit
                 "26fbd6a7e1e7f8e473fe3a5f74faec715c3a05aa")))
        (sha256
          (base32
            "08gkzl0cbgkyg31sxafqmq6v1hjgr2q62vnvncrdnhs3ly54inf8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "http://github.com/alphapapa/org-make-toc")
    (synopsis
      "Automatic tables of contents for Org files")
    (description
      "Documentation at https://melpa.org/#/org-make-toc")
    (license #f)))

(define-public emacs-org-mime
  (package
    (name "emacs-org-mime")
    (version "20211130.716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-mime/org-mime.git")
               (commit
                 "3b119a22be0ee22d16773e4d9a26478d3c8bf2df")))
        (sha256
          (base32
            "1khvfw2vqakvnai0i5wzr6mlxr01ijbcjm655xv17yp95d878bqw"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/org-mime/org-mime")
    (synopsis
      "org html export for text/html MIME emails")
    (description
      "Documentation at https://melpa.org/#/org-mime")
    (license #f)))

(define-public emacs-org-mobile-sync
  (package
    (name "emacs-org-mobile-sync")
    (version "20180606.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/org-mobile-sync.git")
               (commit
                 "06764b943a528827df1e2acc6bc7806cc2c1351f")))
        (sha256
          (base32
            "0qdgs965ppihsz2ihyykdinr4n7nbb89d384z7kn985b17263lvn"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/org-mobile-sync")
    (synopsis
      "automatically sync org-mobile on changes")
    (description
      "Documentation at https://melpa.org/#/org-mobile-sync")
    (license #f)))

(define-public emacs-org-movies
  (package
    (name "emacs-org-movies")
    (version "20210920.101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/teeann/org-movies.git")
               (commit
                 "e96fecaffa2924de64a507aa31d2934e667ee1ea")))
        (sha256
          (base32
            "1h514knqys20nv9qknxdl5y6rgmyymyr42i07dar8hln9vj0ywqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/teeann/org-movies")
    (synopsis "Manage watchlist with Org mode")
    (description
      "Documentation at https://melpa.org/#/org-movies")
    (license #f)))

(define-public emacs-org-noter
  (package
    (name "emacs-org-noter")
    (version "20191020.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/weirdNox/org-noter.git")
               (commit
                 "9ead81d42dd4dd5074782d239b2efddf9b8b7b3d")))
        (sha256
          (base32
            "1ysz8v2yakchs4va5niaf5rnydwrmz721hbaa2l63wjw0nsmi7l3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/weirdNox/org-noter")
    (synopsis
      "A synchronized, Org-mode, document annotator")
    (description
      "Documentation at https://melpa.org/#/org-noter")
    (license #f)))

(define-public emacs-org-parser
  (package
    (name "emacs-org-parser")
    (version "20200417.301")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-parser-"
               version
               ".el"))
        (sha256
          (base32
            "00aiiga5bccm17xv35123xk7ps7h96q829kwh3q7khdh1gyy3jqd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ht))
    (home-page "https://hg.sr.ht/~zck/org-parser")
    (synopsis
      "parse org files into structured datatypes.")
    (description
      "Documentation at https://melpa.org/#/org-parser")
    (license #f)))

(define-public emacs-org-pivotal
  (package
    (name "emacs-org-pivotal")
    (version "20210705.408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-pivotal/org-pivotal.git")
               (commit
                 "6403cefb8440567fc593a8d267536138cd6165e2")))
        (sha256
          (base32
            "0a95gnvgfvj3f9xy5hl4d7367j8sfysf5ghnz6hxiz6ilhngfnz7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-a emacs-dash emacs-request))
    (home-page
      "https://github.com/org-pivotal/org-pivotal")
    (synopsis "Sync Pivotal Tracker to org buffer")
    (description
      "Documentation at https://melpa.org/#/org-pivotal")
    (license #f)))

(define-public emacs-org-projectile
  (package
    (name "emacs-org-projectile")
    (version "20190130.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/org-projectile.git")
               (commit
                 "96a57a43555e24e5e0d81e79f0fbb47001c41bac")))
        (sha256
          (base32
            "05h9scvnd9ggfwbbl1m124k6sdn5kp9mv2695cril2m4dkr1kyqz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-dash
            emacs-s
            emacs-org-category-capture))
    (arguments '(#:files ("org-projectile.el")))
    (home-page
      "https://github.com/IvanMalison/org-projectile")
    (synopsis
      "Repository todo management for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-projectile")
    (license #f)))

(define-public emacs-org-projectile-helm
  (package
    (name "emacs-org-projectile-helm")
    (version "20180601.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/org-projectile.git")
               (commit
                 "96a57a43555e24e5e0d81e79f0fbb47001c41bac")))
        (sha256
          (base32
            "05h9scvnd9ggfwbbl1m124k6sdn5kp9mv2695cril2m4dkr1kyqz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-projectile emacs-helm))
    (arguments
      '(#:files ("org-projectile-helm*.el")))
    (home-page
      "https://github.com/IvanMalison/org-projectile")
    (synopsis "helm functions for org-projectile")
    (description
      "Documentation at https://melpa.org/#/org-projectile-helm")
    (license #f)))

(define-public emacs-org-ql
  (package
    (name "emacs-org-ql")
    (version "20210922.615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-ql.git")
               (commit
                 "31aeb0a2505acf8044c07824888ddec7f3e529c1")))
        (sha256
          (base32
            "1jfm4ahh58x3a3njigrbfzd86fnbyybbcgca2mgmxddcy6bszfp1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-org-super-agenda
            emacs-ov
            emacs-peg
            emacs-s
            emacs-transient
            emacs-ts))
    (arguments
      '(#:files (:defaults (:exclude "helm-org-ql.el"))))
    (home-page "https://github.com/alphapapa/org-ql")
    (synopsis
      "Org Query Language, search command, and agenda-like view")
    (description
      "Documentation at https://melpa.org/#/org-ql")
    (license #f)))

(define-public emacs-org-ref
  (package
    (name "emacs-org-ref")
    (version "20211222.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkitchin/org-ref.git")
               (commit
                 "6f3e4a7ea14e6900acffe88303491b64b96ecb59")))
        (sha256
          (base32
            "18pkb83akiikjqaxs9abf1z9yw1ch2b0zws25gsxqi20yyvc3lzf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-htmlize
            emacs-hydra
            emacs-avy
            emacs-parsebib
            emacs-bibtex-completion
            emacs-citeproc))
    (arguments
      '(#:files
        (:defaults
          "org-ref.org"
          "org-ref.bib"
          "citeproc")))
    (home-page "https://github.com/jkitchin/org-ref")
    (synopsis
      "citations, cross-references and bibliographies in org-mode")
    (description
      "Documentation at https://melpa.org/#/org-ref")
    (license #f)))

(define-public emacs-org-repo-todo
  (package
    (name "emacs-org-repo-todo")
    (version "20171228.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/org-repo-todo.git")
               (commit
                 "f73ebd91399c5760ad52c6ad9033de1066042003")))
        (sha256
          (base32
            "0c74zwmac8x1y8jimdx473v0falpky2kfig8pnaxavz415gb315q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/waymondo/org-repo-todo")
    (synopsis
      "Simple repository todo management with org-mode")
    (description
      "Documentation at https://melpa.org/#/org-repo-todo")
    (license #f)))

(define-public emacs-org-review
  (package
    (name "emacs-org-review")
    (version "20160907.537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brabalan/org-review.git")
               (commit
                 "058e75b7f28d2ad2390290fe17a63d98ef5ab763")))
        (sha256
          (base32
            "1j917zblg5ncls9lbvpzhqal55mx27d3kpvhzvjw2h7x47ji6iym"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brabalan/org-review")
    (synopsis "schedule reviews for Org entries")
    (description
      "Documentation at https://melpa.org/#/org-review")
    (license #f)))

(define-public emacs-org-rich-yank
  (package
    (name "emacs-org-rich-yank")
    (version "20201115.823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/org-rich-yank.git")
               (commit
                 "56d698c2614025538f456479c79073ef40399bc3")))
        (sha256
          (base32
            "0l20a8ljpg8bk6hw4py5g9wv6kyv6y4nrc06l1w0lr0l808w5gqd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/unhammer/org-rich-yank")
    (synopsis
      "Paste with org-mode markup and link to source")
    (description
      "Documentation at https://melpa.org/#/org-rich-yank")
    (license #f)))

(define-public emacs-org-roam-timestamps
  (package
    (name "emacs-org-roam-timestamps")
    (version "20211108.943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ThomasFKJorna/org-roam-timestamps.git")
               (commit
                 "f4de72c09cd2cace275ede19c39a56b68ca56b83")))
        (sha256
          (base32
            "050jnyqdnx4l946hl9cw08l4sk8z70c2063z08m4qh2sxrdh3nzw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-roam))
    (home-page
      "https://github.com/thomas/org-roam-timestamps")
    (synopsis
      "Keep track of modification times for org-roam")
    (description
      "Documentation at https://melpa.org/#/org-roam-timestamps")
    (license #f)))

(define-public emacs-org-rtm
  (package
    (name "emacs-org-rtm")
    (version "20160214.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pmiddend/org-rtm.git")
               (commit
                 "adc42ad1fbe92ab447ccc9553780f4456f2508d2")))
        (sha256
          (base32
            "1hn8y9933x5x6lxpijcqx97p3hln69ahabqdsl2bmzda3mxm4bn2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtm))
    (home-page "https://github.com/pmiddend/org-rtm")
    (synopsis
      "Simple import/export from rememberthemilk to org-mode")
    (description
      "Documentation at https://melpa.org/#/org-rtm")
    (license #f)))

(define-public emacs-org-scrum
  (package
    (name "emacs-org-scrum")
    (version "20200131.1129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianxm/emacs-scrum.git")
               (commit
                 "f7a46bc4bc85305f0c2b72565170ea0e007c42fd")))
        (sha256
          (base32
            "1x37jcfbdmyba3301fbrvmps93ibwcgn6dcqzv39qfsbpr5j0iik"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianxm/emacs-scrum")
    (synopsis
      "org mode extensions for scrum planning and reporting")
    (description
      "Documentation at https://melpa.org/#/org-scrum")
    (license #f)))

(define-public emacs-org-sql
  (package
    (name "emacs-org-sql")
    (version "20210404.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndwarshuis/org-sql.git")
               (commit
                 "71b6e01ff94be4c68cfeb17a34518bf1f118cf95")))
        (sha256
          (base32
            "05c1hgzq69lnw59x1w5bybrdhnyli8d9pzjczixklrrahmx4ig8k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash emacs-org-ml))
    (home-page
      "https://github.com/ndwarshuis/org-sql")
    (synopsis "Org-Mode SQL converter")
    (description
      "Documentation at https://melpa.org/#/org-sql")
    (license #f)))

(define-public emacs-org-starter
  (package
    (name "emacs-org-starter")
    (version "20210314.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-starter.git")
               (commit
                 "786257e682bf147022d5b19e6df6e7c9939193af")))
        (sha256
          (base32
            "1vfw06c08yhpc1dbqb4gprh9l3j0rgsyvhhgmvcv3y5cq2yaibhb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "counsel-org-starter.el"
            "helm-org-starter.el"
            "org-starter-swiper.el"
            "org-starter-extras.el"))))
    (home-page
      "https://github.com/akirak/org-starter")
    (synopsis
      "A basic configuration framework for org mode")
    (description
      "Documentation at https://melpa.org/#/org-starter")
    (license #f)))

(define-public emacs-org-sticky-header
  (package
    (name "emacs-org-sticky-header")
    (version "20201223.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-sticky-header.git")
               (commit
                 "79136b8c54c48547ba8a07a72a9790cb8e23ecbd")))
        (sha256
          (base32
            "1ijfy4yr39rrg58w5506pcb0xnqf2l5ammwl4z8r4mmknznysp9i"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alphapapa/org-sticky-header")
    (synopsis
      "Show off-screen Org heading at top of window")
    (description
      "Documentation at https://melpa.org/#/org-sticky-header")
    (license #f)))

(define-public emacs-org-superstar
  (package
    (name "emacs-org-superstar")
    (version "20210915.1934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/integral-dw/org-superstar-mode.git")
               (commit
                 "03be6c0a3081c46a59b108deb8479ee24a6d86c0")))
        (sha256
          (base32
            "0w97xqvbgh57227qq750b8rxlkkdd61j9frz7wc9f9x1mya305j2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/integral-dw/org-superstar-mode")
    (synopsis
      "Prettify headings and plain lists in Org mode")
    (description
      "Documentation at https://melpa.org/#/org-superstar")
    (license #f)))

(define-public emacs-org-sync
  (package
    (name "emacs-org-sync")
    (version "20181204.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arbox/org-sync.git")
               (commit
                 "e34a385fa9e658c8341a0a6e6bc3472d4d536bb8")))
        (sha256
          (base32
            "1xk0wqr66wjh00wgbr4f0q02zchmzdgpz2inz316zfjm4cik8y5c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/arbox/org-sync")
    (synopsis
      "Synchronize Org documents with External Issue Trackers")
    (description
      "Documentation at https://melpa.org/#/org-sync")
    (license #f)))

(define-public emacs-org-tag-beautify
  (package
    (name "emacs-org-tag-beautify")
    (version "20211209.447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/org-tag-beautify.git")
               (commit
                 "7ba298dba1da0cb0d5cee3f366a88f17e778a20f")))
        (sha256
          (base32
            "0bkaj43d1pnna2yicj6584acx173irqdbnhn7mg5hr223qzks42z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-pretty-tags emacs-all-the-icons))
    (home-page
      "https://github.com/stardiviner/org-tag-beautify")
    (synopsis "Beautify Org Mode tags")
    (description
      "Documentation at https://melpa.org/#/org-tag-beautify")
    (license #f)))

(define-public emacs-org-themis
  (package
    (name "emacs-org-themis")
    (version "20160122.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellio/org-themis.git")
               (commit
                 "78aadbbe22b1993be5c4accd0d3f91a4e85c9a3c")))
        (sha256
          (base32
            "1apd5yyr12skagma7xpzrh22rhplmhhv0pma4zf5b0i6nkxy06j2"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zellio/org-themis")
    (synopsis
      "Experimental project management mode for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-themis")
    (license #f)))

(define-public emacs-org-time-budgets
  (package
    (name "emacs-org-time-budgets")
    (version "20200715.1016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/org-time-budgets.git")
               (commit
                 "1d6bfc323013bbf725167842d9e097fad805de03")))
        (sha256
          (base32
            "0cny7ck4acj8s2l6hzp48mvz0v0yk7q91mmzxn8vgrggsb02qm5k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page "unspecified")
    (synopsis
      "Define time budgets and display clocked time.")
    (description
      "Documentation at https://melpa.org/#/org-time-budgets")
    (license #f)))

(define-public emacs-org-tree-slide
  (package
    (name "emacs-org-tree-slide")
    (version "20211213.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/org-tree-slide.git")
               (commit
                 "917612a0d1593de533b7bf0a2792d7e37bb2ca3d")))
        (sha256
          (base32
            "0kqq47f5fgjx1dp72c3qy3lbqb088qh0b5shn5xrqrq84xzilipy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/takaxp/org-tree-slide")
    (synopsis "A presentation tool for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-tree-slide")
    (license #f)))

(define-public emacs-org-tree-slide-pauses
  (package
    (name "emacs-org-tree-slide-pauses")
    (version "20201215.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cnngimenez/org-tree-slide-pauses.git")
               (commit
                 "f02af7102e9ecef7c3dac0d376d85bbb8c4de4cc")))
        (sha256
          (base32
            "0fzif0ss5yhvhj7q041qbpdb91az03zjf4rgs43a81g6a8qwi803"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-tree-slide))
    (home-page
      "https://github.com/cnngimenez/org-tree-slide-pauses")
    (synopsis
      "Bring the pause command from Beamer to org-tree-slide")
    (description
      "Documentation at https://melpa.org/#/org-tree-slide-pauses")
    (license #f)))

(define-public emacs-org-treescope
  (package
    (name "emacs-org-treescope")
    (version "20200503.1609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/org-treescope.el.git")
               (commit
                 "905029a9e2ce6ed325bb8e10f59dc589c181d148")))
        (sha256
          (base32
            "11xbm6161rd5kv2bffqw678a7bymclvhpmm1qjxsvmi8bhfk1ls0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-dash))
    (home-page
      "https://github.com/mtekman/org-treescope.el")
    (synopsis "Time scoping sparse trees within org")
    (description
      "Documentation at https://melpa.org/#/org-treescope")
    (license #f)))

(define-public emacs-org-treeusage
  (package
    (name "emacs-org-treeusage")
    (version "20200418.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/org-treeusage.el.git")
               (commit
                 "fe4323bc500e2d949848c75e8f59340971b35562")))
        (sha256
          (base32
            "0v9zd2lnzvdxz3wqvw0j3bzd7228x6k8dyr7pzmimkl4l26cybqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mtekman/org-treeusage.el")
    (synopsis
      "Examine the usage of org headings in a tree-like manner")
    (description
      "Documentation at https://melpa.org/#/org-treeusage")
    (license #f)))

(define-public emacs-org-trello
  (package
    (name "emacs-org-trello")
    (version "20210314.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-trello/org-trello.git")
               (commit
                 "fc63ed580101e6160edfb6f43215fb3200ce1ea7")))
        (sha256
          (base32
            "1kg3q8bhyydmd9jb41kyg8xcn5dbwpy2y0fnq7avkaypdn1q27w0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred
            emacs-deferred
            emacs-s
            emacs-dash))
    (arguments
      '(#:files
        ("org-trello*.el"
         (:exclude "org-trello-tools*.el"))))
    (home-page
      "https://github.com/org-trello/org-trello")
    (synopsis
      "Minor mode to synchronize org-mode buffer and trello board")
    (description
      "Documentation at https://melpa.org/#/org-trello")
    (license #f)))

(define-public emacs-org-web-tools
  (package
    (name "emacs-org-web-tools")
    (version "20201212.1058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-web-tools.git")
               (commit
                 "b94a07add8558ef7b0666173dbb8a2554f1d41a6")))
        (sha256
          (base32
            "08z5qc0gki5ci4cf2j4b7190vi2wpsb9qpq9768ifkhhm82mfawr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-esxml
            emacs-s
            emacs-request))
    (home-page
      "http://github.com/alphapapa/org-web-tools")
    (synopsis
      "Display and capture web content with Org-mode")
    (description
      "Documentation at https://melpa.org/#/org-web-tools")
    (license #f)))

(define-public emacs-org-wild-notifier
  (package
    (name "emacs-org-wild-notifier")
    (version "20210330.304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akhramov/org-wild-notifier.el.git")
               (commit
                 "772806f9d46fb93cabe9409c7a559eb7b9cda3d3")))
        (sha256
          (base32
            "0cp7gr0b83s830q1fzd4gwwz4x1n5cyh4r4v73w2cfml3kqf8nz1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-async emacs-dash))
    (home-page
      "https://github.com/akhramov/org-wild-notifier.el")
    (synopsis
      "Customizable org-agenda notifications")
    (description
      "Documentation at https://melpa.org/#/org-wild-notifier")
    (license #f)))

(define-public emacs-org-wunderlist
  (package
    (name "emacs-org-wunderlist")
    (version "20191017.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/org-wunderlist.git")
               (commit
                 "1a084bb49be4b5a1066db9cd9b7da2f8efab293f")))
        (sha256
          (base32
            "05kd8d0687dlmy8a4qvxa3bdcsvxd10hxkl5i4654w88pg07qm8g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred emacs-alert emacs-s))
    (home-page
      "https://github.com/myuhe/org-wunderlist.el")
    (synopsis "Org sync with Wunderlist")
    (description
      "Documentation at https://melpa.org/#/org-wunderlist")
    (license #f)))

(define-public emacs-org2blog
  (package
    (name "emacs-org2blog")
    (version "20210929.17")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org2blog/org2blog.git")
               (commit
                 "68695ed0e012379556d57f9564ac5ad8cd68fbb8")))
        (sha256
          (base32
            "1qk9kshi4hyy0fni3gb383m0yvj4fmgidiab6vhnms5zgghj4kl7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-htmlize
            emacs-hydra
            emacs-xml-rpc
            emacs-metaweblog))
    (arguments
      '(#:files
        (:defaults
          "README.org"
          (:exclude "metaweblog.el"))))
    (home-page
      "https://github.com/org2blog/org2blog")
    (synopsis "Blog from Org mode to WordPress")
    (description
      "Documentation at https://melpa.org/#/org2blog")
    (license #f)))

(define-public emacs-org2web
  (package
    (name "emacs-org2web")
    (version "20210203.324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/org2web.git")
               (commit
                 "6f5c5f0cc5c877ac3a383782bbe8751264d807b6")))
        (sha256
          (base32
            "12rgrmcp91y27zcq8kcqvndb38n6ix4amf13cc2gjhi6aayxxx7k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-mustache
            emacs-htmlize
            emacs-dash
            emacs-el2org
            emacs-simple-httpd))
    (arguments
      '(#:files
        ("org2web*.el" "documents" "themes" "uploaders")))
    (home-page "https://github.com/tumashu/org2web")
    (synopsis
      "A static site generator based on org mode.")
    (description
      "Documentation at https://melpa.org/#/org2web")
    (license #f)))

(define-public emacs-organic-green-theme
  (package
    (name "emacs-organic-green-theme")
    (version "20201216.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/organic-green-theme.git")
               (commit
                 "0ed99a9c0cf14be0a1f491518821f0e9b7e88b88")))
        (sha256
          (base32
            "1l70vvyv8walqjk96jgr8047fi0yiqz0lm3r0vh6xrh6phna5mcd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Low-contrast green color theme.")
    (description
      "Documentation at https://melpa.org/#/organic-green-theme")
    (license #f)))

(define-public emacs-orgit
  (package
    (name "emacs-orgit")
    (version "20210620.1943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/orgit.git")
               (commit
                 "f956d802f19ea495efa95af6c673588afeb3adc5")))
        (sha256
          (base32
            "0mbcr98xq3zim01dk1fbyc1vajnjwx90k62mygv343rhrd05v44m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page "https://github.com/magit/orgit")
    (synopsis
      "support for Org links to Magit buffers")
    (description
      "Documentation at https://melpa.org/#/orgit")
    (license #f)))

(define-public emacs-orglink
  (package
    (name "emacs-orglink")
    (version "20211010.2105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/orglink.git")
               (commit
                 "05df4989c987dece40a450bd5cfbbd6cda0f2e7a")))
        (sha256
          (base32
            "184hag1kjbzfc7k7c1nd1y9w3gimgxjgkkyqawjzv00sph3mnvd4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tarsius/orglink")
    (synopsis "use Org Mode links in other modes")
    (description
      "Documentation at https://melpa.org/#/orglink")
    (license #f)))

(define-public emacs-orglue
  (package
    (name "emacs-orglue")
    (version "20200411.311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/orglue.git")
               (commit
                 "9d5a8e24be9acb8c55bb4d6aa8b98e30e2677401")))
        (sha256
          (base32
            "1n2l9acc54sbpbv5d1h2ib9cn7nbidmkvhhlwihqzpvvh7bhjfj7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epic))
    (home-page "unspecified")
    (synopsis "more functionality to org-mode.")
    (description
      "Documentation at https://melpa.org/#/orglue")
    (license #f)))

(define-public emacs-orgtbl-aggregate
  (package
    (name "emacs-orgtbl-aggregate")
    (version "20211203.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tbanel/orgaggregate.git")
               (commit
                 "bbffe6ac2ec3f0ec8c84d628f105072f64f5a00e")))
        (sha256
          (base32
            "1ybva6qxdpnawhv53rqkbs14yrcsgqr0s8xmz1d135pcf31fbsrr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Create an aggregated Org table from another one")
    (description
      "Documentation at https://melpa.org/#/orgtbl-aggregate")
    (license #f)))

(define-public emacs-origami
  (package
    (name "emacs-origami")
    (version "20200331.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregsexton/origami.el.git")
               (commit
                 "e558710a975e8511b9386edc81cd6bdd0a5bda74")))
        (sha256
          (base32
            "0ycjbsn03cjzx6adabcvi1j7f92yhx3xjzj3xc68m1hw9r2f2gzf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/gregsexton/origami.el")
    (synopsis "Flexible text folding")
    (description
      "Documentation at https://melpa.org/#/origami")
    (license #f)))

(define-public emacs-ormolu
  (package
    (name "emacs-ormolu")
    (version "20211020.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vyorkin/ormolu.el.git")
               (commit
                 "1941a8ce48027b5670d226bacc2fa10b00774b3a")))
        (sha256
          (base32
            "1bs6c6059g585dwsd4ldl49v38l6jlr54z9rj9qhc1a1gg6pzb3b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/vyorkin/ormolu.el")
    (synopsis
      "Format Haskell source code using the \"ormolu\" program")
    (description
      "Documentation at https://melpa.org/#/ormolu")
    (license #f)))

(define-public emacs-osx-dictionary
  (package
    (name "emacs-osx-dictionary")
    (version "20210703.1152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/osx-dictionary.el.git")
               (commit
                 "1a4479d9f44ef1e6e5f7643c172c32f6fe6cce21")))
        (sha256
          (base32
            "1714bh7gx1limy8zs1sbxyr9an7gj7viq8sf4cr6wnxz44v237fb"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("osx-dictionary.el" "osx-dictionary.m")))
    (home-page
      "https://github.com/xuchunyang/osx-dictionary.el")
    (synopsis "Interface for OSX Dictionary.app")
    (description
      "Documentation at https://melpa.org/#/osx-dictionary")
    (license #f)))

(define-public emacs-osx-plist
  (package
    (name "emacs-osx-plist")
    (version "20200212.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/osx-plist.git")
               (commit
                 "46d52aa186ea50a35c1780977bf0aa261bd53922")))
        (sha256
          (base32
            "14786js8zl2yy0f3gbhh980wzsc3lmiga2w6fls36gmgdxsgrqym"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gonewest818/osx-plist")
    (synopsis "Apple plist file parser")
    (description
      "Documentation at https://melpa.org/#/osx-plist")
    (license #f)))

(define-public emacs-osx-trash
  (package
    (name "emacs-osx-trash")
    (version "20210419.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/osx-trash.git")
               (commit
                 "af74a2055a15bf4182d8196600f7decd66eec634")))
        (sha256
          (base32
            "09960kif9gnfmic4iyv9d28577j6zsiji9fdrxcnhh6586hz70ri"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "*.AppleScript")))
    (home-page
      "https://github.com/lunaryorn/osx-trash.el")
    (synopsis "System trash for OS X")
    (description
      "Documentation at https://melpa.org/#/osx-trash")
    (license #f)))

(define-public emacs-outlook
  (package
    (name "emacs-outlook")
    (version "20180428.1430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asavonic/outlook.el.git")
               (commit
                 "359683aff91b38bd1398a6ed4058a06f09a02d65")))
        (sha256
          (base32
            "1kdqwyghrrmwcqkjjr2wq4ig1gsv7mr8fy2y6ddy4zmygblqi6si"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/asavonic/outlook.el")
    (synopsis "send emails in MS Outlook style")
    (description
      "Documentation at https://melpa.org/#/outlook")
    (license #f)))

(define-public emacs-outrespace
  (package
    (name "emacs-outrespace")
    (version "20190724.1553")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/articuluxe/outrespace.git")
               (commit
                 "d8c1619ec81fd3f4e728212a3526cd13bc2b0147")))
        (sha256
          (base32
            "0rcr85slklpaqhx5j8agd8yz6lg66qisniqlbz6zm4vvszqh0r4a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/articuluxe/outrespace.git")
    (synopsis "Some c++ namespace utility functions")
    (description
      "Documentation at https://melpa.org/#/outrespace")
    (license #f)))

(define-public emacs-ox-bibtex-chinese
  (package
    (name "emacs-ox-bibtex-chinese")
    (version "20170723.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/ox-bibtex-chinese.git")
               (commit
                 "2ad2364399229144110db7ef6365ad0461d6a38c")))
        (sha256
          (base32
            "06lp56na1fv87296hhaxgb6gfnzln39p4v245gfxhk0k27589vxj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "bibtex-styles")))
    (home-page
      "https://github.com/tumashu/ox-bibtex-chinese.git")
    (synopsis
      "Let ox-bibtex work well for Chinese users")
    (description
      "Documentation at https://melpa.org/#/ox-bibtex-chinese")
    (license #f)))

(define-public emacs-ox-clip
  (package
    (name "emacs-ox-clip")
    (version "20210528.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkitchin/ox-clip.git")
               (commit
                 "05a14d56bbffe569d86f20b49ae31ed2ac7d1101")))
        (sha256
          (base32
            "14z5pghli7d3rkq3xmbjpssskx3zgwqwypb59wcprkyw8pl66rfp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page "https://github.com/jkitchin/ox-clip")
    (synopsis
      "Cross-platform formatted copying for org-mode")
    (description
      "Documentation at https://melpa.org/#/ox-clip")
    (license #f)))

(define-public emacs-ox-gemini
  (package
    (name "emacs-ox-gemini")
    (version "20210819.437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~abrahms/ox-gemini")
               (commit
                 "b69e7418fdd12c6228079886d42c12fe1342727c")))
        (sha256
          (base32
            "0z011ipycqr4rvf305z2fdd7zhgqaak4hx7kgzh0yap20h6xqlww"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~abrahms/ox-gemini")
    (synopsis
      "Output gemini formatted documents from org-mode")
    (description
      "Documentation at https://melpa.org/#/ox-gemini")
    (license #f)))

(define-public emacs-ox-gfm
  (package
    (name "emacs-ox-gfm")
    (version "20170628.2102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larstvei/ox-gfm.git")
               (commit
                 "99f93011b069e02b37c9660b8fcb45dab086a07f")))
        (sha256
          (base32
            "0drdypmgxk3238hmkqw9s3cw9wv94cyfqar5ar0bv0k69s92pxj8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Github Flavored Markdown Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-gfm")
    (license #f)))

(define-public emacs-ox-haunt
  (package
    (name "emacs-ox-haunt")
    (version "20200202.229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~jakob/ox-haunt")
               (commit
                 "f3c8fda6fee78f45a259e5d218a519dfd11c00c7")))
        (sha256
          (base32
            "1rs1n228c2fmpvirc57bqgf2616ijpphkgf4w9ln5j46snmkam25"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~jakob/ox-haunt")
    (synopsis
      "Haunt-flavored HTML backend for the Org export engine")
    (description
      "Documentation at https://melpa.org/#/ox-haunt")
    (license #f)))

(define-public emacs-ox-impress-js
  (package
    (name "emacs-ox-impress-js")
    (version "20150412.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nullpofy/org-impress-js.el.git")
               (commit
                 "91c6d2af6af308ade352a03355c4fb551b238c6b")))
        (sha256
          (base32
            "1kf2si2lyy0xc971bx5zd2j9mnz1smc9s8l0dwc6iksh2v9q8cy9"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "resources")))
    (home-page
      "https://github.com/kinjo/org-impress-js.el")
    (synopsis
      "impress.js Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-impress-js")
    (license #f)))

(define-public emacs-ox-json
  (package
    (name "emacs-ox-json")
    (version "20210928.347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jlumpe/ox-json.git")
               (commit
                 "4d2e0aa7f92d07e16cea2dd5e1d250a3f243c3cf")))
        (sha256
          (base32
            "1h5930953nnddg7ysr87m5r6gm517zbfi7jbc77hmrywgibqvpik"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/jlumpe/ox-json")
    (synopsis "JSON export backend for Org mode")
    (description
      "Documentation at https://melpa.org/#/ox-json")
    (license #f)))

(define-public emacs-ox-reveal
  (package
    (name "emacs-ox-reveal")
    (version "20211128.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yjwen/org-reveal.git")
               (commit
                 "59adea80013e962811b204403cc500a4d28b85a0")))
        (sha256
          (base32
            "133vzdhyzg5w5fqrams9n88adr8klpgb53g2ig2rvir3sckp449v"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "reveal.js Presentation Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-reveal")
    (license #f)))

(define-public emacs-ox-spectacle
  (package
    (name "emacs-ox-spectacle")
    (version "20181211.953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lorniu/ox-spectacle.git")
               (commit
                 "9d3ec9a6326289074d8620e97d65e3105307ff51")))
        (sha256
          (base32
            "1gm8wwpsq10cfppzl104g3x2g9bha1209p2n8mj9azv71b9mszqx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "spectacle.js Presentation Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-spectacle")
    (license #f)))

(define-public emacs-ox-textile
  (package
    (name "emacs-ox-textile")
    (version "20210919.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yashi/org-textile.git")
               (commit
                 "5f2f61f572c24d702e922845c11a4c3da38ab261")))
        (sha256
          (base32
            "17qf0346a5n1sy3cjzfx8r9kblrlfbnp8hy74y5fq2dczmhqrjrh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-textile.el")))
    (home-page
      "https://github.com/yashi/org-textile")
    (synopsis
      "Textile Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-textile")
    (license #f)))

(define-public emacs-ox-tiddly
  (package
    (name "emacs-ox-tiddly")
    (version "20200927.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org8-wikiexporters.git")
               (commit
                 "3377d8732aa916e736ce5822c7a9a4fbdc894e37")))
        (sha256
          (base32
            "05133n998sp3qymhrz6sarjc7ypzjiwpvpcgilq6z8i4sl2ip98q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-tiddly.el")))
    (home-page
      "https://github.com/dfeich/org8-wikiexporters")
    (synopsis "Org TiddlyWiki exporter")
    (description
      "Documentation at https://melpa.org/#/ox-tiddly")
    (license #f)))

(define-public emacs-ox-timeline
  (package
    (name "emacs-ox-timeline")
    (version "20210118.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjuliano/org-simple-timeline.git")
               (commit
                 "238e05b01dde37fa27a3a8943cc04dcc9b9b83b2")))
        (sha256
          (base32
            "0949gabr0wfsrzzaf217jsaawkc3gj1lxkrzwp3bigmxngsn4ykn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jjuliano/org-simple-timeline")
    (synopsis
      "HTML Timeline Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-timeline")
    (license #f)))

(define-public emacs-ox-wk
  (package
    (name "emacs-ox-wk")
    (version "20191231.2058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/w-vi/ox-wk.el.git")
               (commit
                 "d34d1b72e4e940745a377bfa745dfb618900a09e")))
        (sha256
          (base32
            "05813w4adafm596x1rikvc7xqk10xwfihdpdq1zr2zyqcpdabqza"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/w-vi/ox-wk.el")
    (synopsis "Wiki Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-wk")
    (license #f)))

(define-public emacs-pacfiles-mode
  (package
    (name "emacs-pacfiles-mode")
    (version "20200915.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/UndeadKernel/pacfiles-mode.git")
               (commit
                 "8d06f64abc98c3f3338560c8d6eb47719e034069")))
        (sha256
          (base32
            "177v9mb2clwymnq9v6b9qza9d7rsd78mvx13hyc9cpbjnlalpjzc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/UndeadKernel/pacfiles-mode")
    (synopsis "pacnew and pacsave merging tool")
    (description
      "Documentation at https://melpa.org/#/pacfiles-mode")
    (license #f)))

(define-public emacs-pack
  (package
    (name "emacs-pack")
    (version "20191017.456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/pack-el.git")
               (commit
                 "85cd856fdc00a2365e88b50373b99f1b3d2227be")))
        (sha256
          (base32
            "0v95ni44scn42mm6mwrdi1vbi1n2h4bw961apm7bp6ilamwpbif8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/10sr/pack-el")
    (synopsis "Pack and unpack archive files")
    (description
      "Documentation at https://melpa.org/#/pack")
    (license #f)))

(define-public emacs-package-filter
  (package
    (name "emacs-package-filter")
    (version "20161122.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/package-filter.git")
               (commit
                 "bc73b41aea1d65ca44ef1593ca13126df9bbb39e")))
        (sha256
          (base32
            "0fq31zcz5j0n29p3zmx2k2w0xvay24zs34mbq8nb0y0jr7ycm184"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("package-filter.el")))
    (home-page
      "https://github.com/milkypostman/package-filter")
    (synopsis
      "package archive whitelist and blacklist")
    (description
      "Documentation at https://melpa.org/#/package-filter")
    (license #f)))

(define-public emacs-package-safe-delete
  (package
    (name "emacs-package-safe-delete")
    (version "20150116.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/package-safe-delete.git")
               (commit
                 "138171e4fc03c0ef05a8260cbb5cd2e114c1c194")))
        (sha256
          (base32
            "1pdv6d6bm5jmpgjqf9ycvzasxz1205zdi0zjrmkr33c03azwz7rd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epl))
    (home-page
      "https://github.com/Fanael/package-safe-delete")
    (synopsis "Safely delete package.el packages")
    (description
      "Documentation at https://melpa.org/#/package-safe-delete")
    (license #f)))

(define-public emacs-page-break-lines
  (package
    (name "emacs-page-break-lines")
    (version "20210104.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/page-break-lines.git")
               (commit
                 "28783cd6b86b3cd41e51e6b2486173e2485a76cc")))
        (sha256
          (base32
            "0c9971l4xz2qm6pskad9fga6rcz72lyr2jfzwjxwhqx1v7ss46bc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/page-break-lines")
    (synopsis
      "Display ^L page breaks as tidy horizontal lines")
    (description
      "Documentation at https://melpa.org/#/page-break-lines")
    (license #f)))

(define-public emacs-pager
  (package
    (name "emacs-pager")
    (version "20151202.120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pager.git")
               (commit
                 "5c791ed23f1136e04040d6f4bc9b4ca5b6dc919f")))
        (sha256
          (base32
            "198zlh7zrql1185b9qjim44a09kbbgs9zyahak9nhv1gxqn7mrdf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "windows-scroll commands")
    (description
      "Documentation at https://melpa.org/#/pager")
    (license #f)))

(define-public emacs-pallet
  (package
    (name "emacs-pallet")
    (version "20150512.702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/pallet.git")
               (commit
                 "b8d0df1883224a371ac0a3bc9b9c1c4dc61e6ac0")))
        (sha256
          (base32
            "0j87yq8rycklk8df4rlwx0bp2n94pyhaz4yv8vacbqrzchpa1bb0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-f emacs-cask))
    (arguments '(#:files ("lib/*")))
    (home-page
      "https://github.com/rdallasgray/pallet")
    (synopsis
      "A package management tool for Emacs, using Cask.")
    (description
      "Documentation at https://melpa.org/#/pallet")
    (license #f)))

(define-public emacs-pamparam
  (package
    (name "emacs-pamparam")
    (version "20210105.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/pamparam.git")
               (commit
                 "0ba91149095bee8c43688c68f83f4d365fbe6771")))
        (sha256
          (base32
            "0459qqhra9zx9klw89s5hjbka1kdh1nvhl6wc7igfklglzw0d7zs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lispy emacs-worf emacs-ivy-posframe))
    (arguments '(#:files ("pamparam.el" "doc")))
    (home-page "https://github.com/abo-abo/pamparam")
    (synopsis "Simple and fast flashcards.")
    (description
      "Documentation at https://melpa.org/#/pamparam")
    (license #f)))

(define-public emacs-panda
  (package
    (name "emacs-panda")
    (version "20200715.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/panda.git")
               (commit
                 "44beb80ac991e58231c05dc4afa1646fa768d573")))
        (sha256
          (base32
            "17x0ayf894gnm7kkm5bp64h9bfigr6shjm8y7pi91vk0xij3l7jx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sebasmonia/panda")
    (synopsis "Client for Bamboo's REST API.")
    (description
      "Documentation at https://melpa.org/#/panda")
    (license #f)))

(define-public emacs-panda-theme
  (package
    (name "emacs-panda-theme")
    (version "20181128.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamiecollinson/emacs-panda-theme.git")
               (commit
                 "60aa47c7a930377807da0d601351ad91e8ca446a")))
        (sha256
          (base32
            "169khnipnxv0y412wc2r5nsh9d9zwpdyip0l9ayyzb19zdjl1l47"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jamiecollinson/emacs-panda-theme")
    (synopsis "Panda Theme")
    (description
      "Documentation at https://melpa.org/#/panda-theme")
    (license #f)))

(define-public emacs-pandoc-mode
  (package
    (name "emacs-pandoc-mode")
    (version "20211208.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/pandoc-mode.git")
               (commit
                 "c1429887287b7ee9601196e26f97c908b6e4f5c0")))
        (sha256
          (base32
            "1zw92bkp5mjzc78vrvsaj3ycqn0j5mqzxxxv2nkb891spgandpvy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra emacs-dash))
    (home-page
      "http://joostkremers.github.io/pandoc-mode/")
    (synopsis
      "Minor mode for interacting with Pandoc")
    (description
      "Documentation at https://melpa.org/#/pandoc-mode")
    (license #f)))

(define-public emacs-paperless
  (package
    (name "emacs-paperless")
    (version "20201130.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atgreen/paperless.git")
               (commit
                 "2db39586a2914f78f345379511d0e8cea4c96b86")))
        (sha256
          (base32
            "03ckcbhpiys3p0jambrlcapba6sv7jn101kikvj2jp66vygdnsn0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page "http://github.com/atgreen/paperless")
    (synopsis
      "A major mode for sorting and filing PDF documents.")
    (description
      "Documentation at https://melpa.org/#/paperless")
    (license #f)))

(define-public emacs-paredit-everywhere
  (package
    (name "emacs-paredit-everywhere")
    (version "20210510.531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/paredit-everywhere.git")
               (commit
                 "b81e5d5356c85001a71640941b469aea9cf2e309")))
        (sha256
          (base32
            "0qnm020npchrazj6na79ccwjhr7j1gm7n0yksqxzciram1lfggjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (home-page "unspecified")
    (synopsis
      "Enable some paredit features in non-lisp buffers")
    (description
      "Documentation at https://melpa.org/#/paredit-everywhere")
    (license #f)))

(define-public emacs-paren-completer
  (package
    (name "emacs-paren-completer")
    (version "20160501.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MatthewBregg/paren-completer.git")
               (commit
                 "74183a8e13fa1266271bdcbcb4bfb29a4f915f0a")))
        (sha256
          (base32
            "1il0gbyjnlxhk04z3lgxmvlmlhgc94rmxdf8nl5sk3gblqmr8v3b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MatthewBregg/paren-completer")
    (synopsis
      "Automatically, language agnostically, fill in delimiters.")
    (description
      "Documentation at https://melpa.org/#/paren-completer")
    (license #f)))

(define-public emacs-paren-face
  (package
    (name "emacs-paren-face")
    (version "20210127.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/paren-face.git")
               (commit
                 "6790c7fdec490a69e7d460c0bea36ad343776f9b")))
        (sha256
          (base32
            "1zyrrrr8rmksr3rfsv96psk1z15wbbx1bvcfp3hf5ciyc2n79000"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/paren-face")
    (synopsis "a face for parentheses in lisp modes")
    (description
      "Documentation at https://melpa.org/#/paren-face")
    (license #f)))

(define-public emacs-parent-mode
  (package
    (name "emacs-parent-mode")
    (version "20150824.2300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/parent-mode.git")
               (commit
                 "db692cf08deff2f0e973e6e86e26662b44813d1b")))
        (sha256
          (base32
            "0i5bc7lyyrx6swqlrp9l5x72yzwi53qn6ldrfs99gh08b3yvsnni"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/parent-mode")
    (synopsis "get major mode's parent modes")
    (description
      "Documentation at https://melpa.org/#/parent-mode")
    (license #f)))

(define-public emacs-pass
  (package
    (name "emacs-pass")
    (version "20210203.810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/pass.git")
               (commit
                 "5651da53137db9adcb125b4897c2fe27eeb4368d")))
        (sha256
          (base32
            "0xrdi06m55mzm14fw0ly0xbfyh2g43k3np2fm771nwzdw5kmin4v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-password-store
            emacs-password-store-otp
            emacs-f))
    (home-page "unspecified")
    (synopsis "Major mode for password-store.el")
    (description
      "Documentation at https://melpa.org/#/pass")
    (license #f)))

(define-public emacs-password-store-otp
  (package
    (name "emacs-password-store-otp")
    (version "20190713.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/volrath/password-store-otp.el.git")
               (commit
                 "04998c8578a060ab4a4e8f46f2ee0aafad4ab4d5")))
        (sha256
          (base32
            "1c9lvxi0yf0x3ywciv58zkn9ss6n41305g5rp4l32a33sq51s567"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-password-store))
    (home-page
      "https://github.com/volrath/password-store-otp.el")
    (synopsis
      "Password store (pass) OTP extension support")
    (description
      "Documentation at https://melpa.org/#/password-store-otp")
    (license #f)))

(define-public emacs-paste-of-code
  (package
    (name "emacs-paste-of-code")
    (version "20170709.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spebern/paste-of-code.el.git")
               (commit
                 "92d258e8ec98598d847ecab82903f9224c7c2050")))
        (sha256
          (base32
            "1bf2d0i726psjwnqdp0w4h0qk7fnwcbwf1a66q7p8vczavqygfan"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis
      "paste code on https://paste.ofcode.org")
    (description
      "Documentation at https://melpa.org/#/paste-of-code")
    (license #f)))

(define-public emacs-path-headerline-mode
  (package
    (name "emacs-path-headerline-mode")
    (version "20140423.1332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/7696122/path-headerline-mode.git")
               (commit
                 "b5b2725c6a8b1cb592fc242b7dbbd54b4dff2e69")))
        (sha256
          (base32
            "1ffnkw8djs8kvfjd1crnaqram1vl4w3g1zhsqp74ds0mccsd6830"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/7696122/path-headerline-mode")
    (synopsis "Displaying file path on headerline.")
    (description
      "Documentation at https://melpa.org/#/path-headerline-mode")
    (license #f)))

(define-public emacs-pcmpl-git
  (package
    (name "emacs-pcmpl-git")
    (version "20170121.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoliu/pcmpl-git-el.git")
               (commit
                 "9472ac70baeda025ef7becd1cf141d72aec93f32")))
        (sha256
          (base32
            "17y3rdp7fgyg4i9hwyzgpv1d19i5c6rqdf1gm5bdm2csk12vfg9n"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "git-options")))
    (home-page "unspecified")
    (synopsis "pcomplete for git")
    (description
      "Documentation at https://melpa.org/#/pcmpl-git")
    (license #f)))

(define-public emacs-pcmpl-homebrew
  (package
    (name "emacs-pcmpl-homebrew")
    (version "20200911.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/pcmpl-homebrew.git")
               (commit
                 "a2044042dd498abad1dc06162a8ee0d70314ca40")))
        (sha256
          (base32
            "1x0hc6n710199aygqch9nh55dsic2sdl7nnncs4h2s0dd91bnz6g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "pcomplete for homebrew")
    (description
      "Documentation at https://melpa.org/#/pcmpl-homebrew")
    (license #f)))

(define-public emacs-pcmpl-pip
  (package
    (name "emacs-pcmpl-pip")
    (version "20181229.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/pcmpl-pip.git")
               (commit
                 "bc79228674ad5c1bc458c90dd8839790fb0a09e8")))
        (sha256
          (base32
            "017fwacc3vqvvxx4mn0a1glcsxccjyfai0rymyf3yfy4rgd7w0p4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page "unspecified")
    (synopsis "pcomplete for pip")
    (description
      "Documentation at https://melpa.org/#/pcmpl-pip")
    (license #f)))

(define-public emacs-pcre2el
  (package
    (name "emacs-pcre2el")
    (version "20161120.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joddie/pcre2el.git")
               (commit
                 "0b5b2a2c173aab3fd14aac6cf5e90ad3bf58fa7d")))
        (sha256
          (base32
            "14br6ad138qx1z822wqssswqiihxiynz1k69p6mcdisr2q8yyi1z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pcre2el.el")))
    (home-page "https://github.com/joddie/pcre2el")
    (synopsis "regexp syntax converter")
    (description
      "Documentation at https://melpa.org/#/pcre2el")
    (license #f)))

(define-public emacs-pcsv
  (package
    (name "emacs-pcsv")
    (version "20150220.1131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-pcsv.git")
               (commit
                 "798e0933f8d0818beb17aebf3b1056bbf74e03d0")))
        (sha256
          (base32
            "0aaprjczjf3al5vcypw1fsnz5a0xnnlhmvy0lc83i9aqbsa2y8af"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pcsv.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el")
    (synopsis "Parser of csv")
    (description
      "Documentation at https://melpa.org/#/pcsv")
    (license #f)))

(define-public emacs-pdb-mode
  (package
    (name "emacs-pdb-mode")
    (version "20150128.1751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sixpi/pdb-mode.git")
               (commit
                 "855fb18ebb73b5df30c8d7677c2bcd0f361b138a")))
        (sha256
          (base32
            "1xkkyz7y08jr71rzdacb9v7gk95qsxlsshkdsxq8jp70irq51099"))))
    (build-system melpa-build-system)
    (home-page
      "http://bondxray.org/software/pdb-mode/")
    (synopsis
      "Major mode for editing Protein Data Bank files")
    (description
      "Documentation at https://melpa.org/#/pdb-mode")
    (license #f)))

(define-public emacs-pdf-view-restore
  (package
    (name "emacs-pdf-view-restore")
    (version "20190904.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/007kevin/pdf-view-restore.git")
               (commit
                 "5a1947c01a3edecc9e0fe7629041a2f53e0610c9")))
        (sha256
          (base32
            "1b9zzvfsprf7x0v7l4dabdh5qdfhl7mm30vvqah8l10jvlf2wlc7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pdf-tools))
    (home-page
      "https://github.com/007kevin/pdf-view-restore")
    (synopsis
      "Support for opening last known pdf position in pdfview mode")
    (description
      "Documentation at https://melpa.org/#/pdf-view-restore")
    (license #f)))

(define-public emacs-pdfgrep
  (package
    (name "emacs-pdfgrep")
    (version "20210203.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeremy-compostella/pdfgrep.git")
               (commit
                 "a4ca0a1e6521de93f28bb6736a5344b4974d144c")))
        (sha256
          (base32
            "093sm3ywa338lhhz2ib3ylcgklsbxcsqck2qsaq26i2qxr0r7lq2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jeremy-compostella/pdfgrep")
    (synopsis
      "run `pdfgrep' and display the results.")
    (description
      "Documentation at https://melpa.org/#/pdfgrep")
    (license #f)))

(define-public emacs-peacock-theme
  (package
    (name "emacs-peacock-theme")
    (version "20170808.1320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-peacock-theme.git")
               (commit
                 "9e46fbfb562b6e26c6e3d6d618b044b3694da4c8")))
        (sha256
          (base32
            "0w4dzdsv2cdldss5jwmdbjb5a62k5j1szwdim4gv8ldifhj7fy22"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Peacock (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/peacock-theme")
    (license #f)))

(define-public emacs-peek-mode
  (package
    (name "emacs-peek-mode")
    (version "20130620.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erikriverson/peek-mode.git")
               (commit
                 "55a7dd011375330c7d57322257a5167516702c71")))
        (sha256
          (base32
            "11nv6pll0zj9dkgzlzgav39a6x3sfi7kvfhwm96fa3iy4v8bixrb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elnode))
    (arguments
      '(#:files ("index.html" "peek-mode.el")))
    (home-page
      "https://github.com/erikriverson/peek-mode")
    (synopsis
      "Serve buffers live over HTTP with elnode backend")
    (description
      "Documentation at https://melpa.org/#/peek-mode")
    (license #f)))

(define-public emacs-peertube
  (package
    (name "emacs-peertube")
    (version "20210101.1007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~yoctocell/peertube")
               (commit
                 "bb529db154596e86327829edbd7144b67cf72255")))
        (sha256
          (base32
            "1vqlz6s57cqhbmxc9733crhb1z91lrhm0xmwfsq3yb30nfdwlyyb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transmission))
    (home-page
      "https://git.sr.ht/~yoctocell/peertube")
    (synopsis "Query and download PeerTube videos")
    (description
      "Documentation at https://melpa.org/#/peertube")
    (license #f)))

(define-public emacs-persistent-overlays
  (package
    (name "emacs-persistent-overlays")
    (version "20161128.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mneilly/Emacs-Persistent-Overlays.git")
               (commit
                 "f563c8b966edc78c9d806661c4eb80e4781c4eab")))
        (sha256
          (base32
            "0csllpkpjf4csw3zfaw8k05jg078najfmjz6pz1jcl6b4sxjdfqa"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("persistent-overlays.el" "README.md" "LICENSE")))
    (home-page
      "https://github.com/mneilly/Emacs-Persistent-Overlays")
    (synopsis
      "Minor mode to store selected overlays to be loaded later")
    (description
      "Documentation at https://melpa.org/#/persistent-overlays")
    (license #f)))

(define-public emacs-persp-fr
  (package
    (name "emacs-persp-fr")
    (version "20191108.754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/persp-fr.git")
               (commit
                 "1adbb6a9f9a4db580a9b7ed8b4091738e01345e6")))
        (sha256
          (base32
            "0f9ljpmq8b97n6wa8bwn4f2v7imvfxc2pjqk6xjkmwbfpihrns10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persp-mode emacs-dash))
    (home-page "http://github.com/rocher/persp-fr")
    (synopsis
      "In persp-mode, show perspective list in the GUI window title")
    (description
      "Documentation at https://melpa.org/#/persp-fr")
    (license #f)))

(define-public emacs-persp-mode
  (package
    (name "emacs-persp-mode")
    (version "20201128.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Bad-ptr/persp-mode.el.git")
               (commit
                 "298df111f081b5925f0aa0126a1b8d334117e0a2")))
        (sha256
          (base32
            "0r2j8zs6hwpfvwd6av35izlyd3kplnvc4c941vjjq7sm6j95q6k8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Bad-ptr/persp-mode.el")
    (synopsis
      "windows/buffers sets shared among frames + save/load.")
    (description
      "Documentation at https://melpa.org/#/persp-mode")
    (license #f)))

(define-public emacs-perspeen
  (package
    (name "emacs-perspeen")
    (version "20171203.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seudut/perspeen.git")
               (commit
                 "edb70c530bda50ff3d1756e32a703d5fef5e5480")))
        (sha256
          (base32
            "12h0kj96s4h8z4kqalp7hccnlnqn5lrax3df75gz16pskx2dwxqr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page "https://github.com/seudut/perspeen")
    (synopsis "An package for multi-workspace")
    (description
      "Documentation at https://melpa.org/#/perspeen")
    (license #f)))

(define-public emacs-pest-mode
  (package
    (name "emacs-pest-mode")
    (version "20200321.504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksqsf/pest-mode.git")
               (commit
                 "43447a2c70f98edd1139005e32f437d3f142442b")))
        (sha256
          (base32
            "1ccpb1jbynlqqzhsm3h7xk2s7n9nbpnnxmixz77kxskdxj5as79a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pest-mode.el")))
    (home-page "https://github.com/ksqsf/pest-mode")
    (synopsis "Major mode for editing Pest files")
    (description
      "Documentation at https://melpa.org/#/pest-mode")
    (license #f)))

(define-public emacs-pfuture
  (package
    (name "emacs-pfuture")
    (version "20200425.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/pfuture.git")
               (commit
                 "d7926de3ba0105a36cfd00811fd6278aea903eef")))
        (sha256
          (base32
            "1chpin5277vbl2xvsl04pzzk7a9dbcvclibm2496gz6yvd19pwsf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Alexander-Miller/pfuture")
    (synopsis
      "a simple wrapper around asynchronous processes")
    (description
      "Documentation at https://melpa.org/#/pfuture")
    (license #f)))

(define-public emacs-pgdevenv
  (package
    (name "emacs-pgdevenv")
    (version "20150105.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/pgdevenv-el.git")
               (commit
                 "7f1d5bc734750aca98cf67a9491cdbd5615fd132")))
        (sha256
          (base32
            "0c9d4c24ic67y07y74bv5b7vc56b6l0lbh2fbzm870r1dl5zbzcj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Manage your PostgreSQL development envs")
    (description
      "Documentation at https://melpa.org/#/pgdevenv")
    (license #f)))

(define-public emacs-phi-search-mc
  (package
    (name "emacs-phi-search-mc")
    (version "20160324.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/phi-search-mc.el.git")
               (commit
                 "7aa671910f766437089aec26c3aa7814222d1356")))
        (sha256
          (base32
            "0wr86ad0yl52im6b9z0b9pzmhcn39qg5m9878yfv1nbxliw40lcd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-phi-search emacs-multiple-cursors))
    (home-page
      "https://github.com/knu/phi-search-mc.el")
    (synopsis
      "multiple-cursors extension for phi-search")
    (description
      "Documentation at https://melpa.org/#/phi-search-mc")
    (license #f)))

(define-public emacs-phi-search-migemo
  (package
    (name "emacs-phi-search-migemo")
    (version "20170618.921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-search-migemo.git")
               (commit
                 "308909ebfc8003d16673f97ca9eb26a667b72969")))
        (sha256
          (base32
            "07pi72jnd6k5xj9ypmxa0pbb03r07safpgf8vlp1m0xda5ixl0wf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-phi-search emacs-migemo))
    (home-page "http://hins11.yu-yake.com/")
    (synopsis "migemo extension for phi-search")
    (description
      "Documentation at https://melpa.org/#/phi-search-migemo")
    (license #f)))

(define-public emacs-php-cs-fixer
  (package
    (name "emacs-php-cs-fixer")
    (version "20210923.718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OVYA/php-cs-fixer.git")
               (commit
                 "7e12a1af5d65cd8a801eeb5564c6268a4e190c0c")))
        (sha256
          (base32
            "1i0jlszc5z59arwknclhi3vmwp0mf6jk18axisvh5xdqggiwpjqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/OVYA/php-cs-fixer")
    (synopsis "php-cs-fixer wrapper.")
    (description
      "Documentation at https://melpa.org/#/php-cs-fixer")
    (license #f)))

(define-public emacs-php-quickhelp
  (package
    (name "emacs-php-quickhelp")
    (version "20210819.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vpxyz/php-quickhelp.git")
               (commit
                 "d5e11b7a6bad64550521e8822139a33218b8c9bb")))
        (sha256
          (base32
            "1d9rg699wl67qkb93r4qnjn0ng4xn9c2g6kc98zaiy2v0v2wcv8g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vpxyz/php-quickhelp")
    (synopsis "Quickhelp at point for php")
    (description
      "Documentation at https://melpa.org/#/php-quickhelp")
    (license #f)))

(define-public emacs-php-refactor-mode
  (package
    (name "emacs-php-refactor-mode")
    (version "20171124.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/keelerm84/php-refactor-mode.el.git")
               (commit
                 "7a794b0618df2882b1bd586fdd698dba0bc5130d")))
        (sha256
          (base32
            "12kjyzmicay7y37znk0znpn81lszmnydq5fkl5pk57bxblwwiivg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/keelerm84/php-refactor-mode.el")
    (synopsis
      "Minor mode to quickly and safely perform common refactorings")
    (description
      "Documentation at https://melpa.org/#/php-refactor-mode")
    (license #f)))

(define-public emacs-phpt-mode
  (package
    (name "emacs-phpt-mode")
    (version "20190512.1809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpt-mode.git")
               (commit
                 "deb386f1a81003074c476f15e1975d445ff6df01")))
        (sha256
          (base32
            "0wv1q44f5hmpsrjvjb5y8c1gnjkazdghmgbzw6l30i3j3z36fy60"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-php-mode))
    (home-page
      "https://github.com/emacs-php/phpt-mode")
    (synopsis
      "Major mode for editing PHPT test code")
    (description
      "Documentation at https://melpa.org/#/phpt-mode")
    (license #f)))

(define-public emacs-phpunit
  (package
    (name "emacs-phpunit")
    (version "20180829.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/phpunit.el.git")
               (commit
                 "fe6bc91c3bd8b329c6d26ad883a025f06b5121ee")))
        (sha256
          (base32
            "1silbfmv85r73pbc7f5cm4znc6644ngihfnhibk1fgp9j0rf7ahc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-pkg-info))
    (home-page
      "https://github.com/nlamirault/phpunit.el")
    (synopsis "Launch PHP unit tests using phpunit")
    (description
      "Documentation at https://melpa.org/#/phpunit")
    (license #f)))

(define-public emacs-picpocket
  (package
    (name "emacs-picpocket")
    (version "20210806.1135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johanclaesson/picpocket.git")
               (commit
                 "7e30e96c26b1ff0d374612534c3e09d309426252")))
        (sha256
          (base32
            "0sx4493sxgw0fd7b48h8biygnd10k5bl69hhsd69a4yc7yq1zbnm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/johanclaesson/picpocket")
    (synopsis "Image viewer")
    (description
      "Documentation at https://melpa.org/#/picpocket")
    (license #f)))

(define-public emacs-pig-snippets
  (package
    (name "emacs-pig-snippets")
    (version "20130913.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motus/pig-mode.git")
               (commit
                 "4c6c6e1b1bb719d8adc6c47cc24665f6fe558959")))
        (sha256
          (base32
            "1vwnybyrzk8nw2cs27yrsipxb6hmx7cs5d60yf00h0wiv3l6v3rr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("pig-snippets*.el" "snippets")))
    (home-page "https://github.com/motus/pig-mode")
    (synopsis "Snippets for pig-mode")
    (description
      "Documentation at https://melpa.org/#/pig-snippets")
    (license #f)))

(define-public emacs-pillar
  (package
    (name "emacs-pillar")
    (version "20141112.1811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pillar-markup/pillar-mode.git")
               (commit
                 "13a7f676544cc66005ccd8e6fc1c25e4ccd6f909")))
        (sha256
          (base32
            "19i8hgzr7kdj4skf0cnv6vlsklq9qcyxcv3p33k9vgq7y4f9mah8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-makey))
    (home-page
      "http://github.com/DamienCassou/pillar-mode")
    (synopsis "Major mode for editing Pillar files")
    (description
      "Documentation at https://melpa.org/#/pillar")
    (license #f)))

(define-public emacs-pinboard
  (package
    (name "emacs-pinboard")
    (version "20200630.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/pinboard.el.git")
               (commit
                 "d426f9d2ebec5f907c8a89d6b38ccbcb13750d4f")))
        (sha256
          (base32
            "0jganb5ws2qlzyncyhaw1hldqbpxm44ddzzy17hmriy8n5701fyv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/pinboard.el")
    (synopsis "A pinboard.in client")
    (description
      "Documentation at https://melpa.org/#/pinboard")
    (license #f)))

(define-public emacs-pinboard-api
  (package
    (name "emacs-pinboard-api")
    (version "20140324.1148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danieroux/pinboard-api-el.git")
               (commit
                 "b7b5214d0c35178f8dca08cf22d6ef3c21f0fce4")))
        (sha256
          (base32
            "0wy9c37g6m5khchlp8qvfnjgkwq4r38659adcm5prvzjgzqhlfja"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danieroux/pinboard-api-el")
    (synopsis
      "Rudimentary http://pinboard.in integration")
    (description
      "Documentation at https://melpa.org/#/pinboard-api")
    (license #f)))

(define-public emacs-pinboard-popular
  (package
    (name "emacs-pinboard-popular")
    (version "20180511.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asimpson/pinboard-popular.git")
               (commit
                 "c0bc76cd35f8ecf34723c64a702b82eec2751318")))
        (sha256
          (base32
            "1msvb5r6ixd886plpbss62q2nwrrsb6271bi922vlhr817lhsain"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-loop))
    (home-page
      "https://github.com/asimpson/pinboard-popular")
    (synopsis
      "Displays links from the pinboard.in popular page.")
    (description
      "Documentation at https://melpa.org/#/pinboard-popular")
    (license #f)))

(define-public emacs-pinyin
  (package
    (name "emacs-pinyin")
    (version "20180620.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/pinyin.el.git")
               (commit
                 "e5508e5aa1ad4cfa05a7f4d299e5a155b288ec4c")))
        (sha256
          (base32
            "1bzs6i88b5d7bk9pg2q654kvbychz27rl1srhkq9lvqx91g8zbz2"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("pinyin-data" "pinyin-data/pinyin.txt"))))
    (home-page
      "https://github.com/xuchunyang/pinyin.el")
    (synopsis "Convert Hanzi to Pinyin (汉字转拼音)")
    (description
      "Documentation at https://melpa.org/#/pinyin")
    (license #f)))

(define-public emacs-pinyinlib
  (package
    (name "emacs-pinyinlib")
    (version "20200911.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/pinyinlib.el.git")
               (commit
                 "1772c79b6f319b26b6a394a8dda065be3ea4498d")))
        (sha256
          (base32
            "1lmw0hf6cjbvpsyjx686za74kwgz5bap7z1b49jgsimgrn5c20s4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Convert first letter of Pinyin to Simplified/Traditional Chinese characters")
    (description
      "Documentation at https://melpa.org/#/pinyinlib")
    (license #f)))

(define-public emacs-pixiv-novel-mode
  (package
    (name "emacs-pixiv-novel-mode")
    (version "20160220.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/pixiv-novel-mode.el.git")
               (commit
                 "0d1ca524d92b91f20a7105402a773bc21779b434")))
        (sha256
          (base32
            "18rvnvm097ca4yc1nfswdv7dfqg36insnif5kfj19aa60m9qxl09"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for pixiv novel")
    (description
      "Documentation at https://melpa.org/#/pixiv-novel-mode")
    (license #f)))

(define-public emacs-plan9-theme
  (package
    (name "emacs-plan9-theme")
    (version "20180804.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/plan9-theme.el.git")
               (commit
                 "c2da2fcb241e9800d931a1ff19ecd9fd84d30382")))
        (sha256
          (base32
            "0rjxbk9fljnjmg00vdqcyynzg591cgknyy2d92xsxsyg4d28dvwi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/john2x/plan9-theme.el")
    (synopsis
      "A color theme for Emacs based on Plan9")
    (description
      "Documentation at https://melpa.org/#/plan9-theme")
    (license #f)))

(define-public emacs-plaster
  (package
    (name "emacs-plaster")
    (version "20180127.2050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Shirakumo/plaster.git")
               (commit
                 "4d18c8bc3322668ac1695e25c556bda6771af1d5")))
        (sha256
          (base32
            "1cblfh3hjkfn5acq2hsha981v6bf3ns8x2dmdz75kngfnzavc6ns"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/shirakumo/plaster/")
    (synopsis
      "Pasting to a plaster host with buffers.")
    (description
      "Documentation at https://melpa.org/#/plaster")
    (license #f)))

(define-public emacs-platformio-mode
  (package
    (name "emacs-platformio-mode")
    (version "20210511.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ZachMassia/PlatformIO-Mode.git")
               (commit
                 "f4fd8932995a8aed80eab14e54232010c2889012")))
        (sha256
          (base32
            "1m6qmqp124idja9dq8gj8pzajxf40lm1adrnd24hbp26wh9pvc54"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async emacs-projectile))
    (home-page
      "https://github.com/zachmassia/platformio-mode")
    (synopsis "PlatformIO integration")
    (description
      "Documentation at https://melpa.org/#/platformio-mode")
    (license #f)))

(define-public emacs-play-crystal
  (package
    (name "emacs-play-crystal")
    (version "20180114.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/play-crystal.el.git")
               (commit
                 "0b4810a9025213bd11dbcbfd38b3ca928829e0a5")))
        (sha256
          (base32
            "15gqr11paz5qmx43qb0f95wc87nn2snr7my22b0n6jwbk5djf402"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request))
    (home-page
      "https://github.com/veelenga/play-crystal.el")
    (synopsis
      "https://play.crystal-lang.org integration.")
    (description
      "Documentation at https://melpa.org/#/play-crystal")
    (license #f)))

(define-public emacs-plsense-direx
  (package
    (name "emacs-plsense-direx")
    (version "20140520.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/plsense-direx.git")
               (commit
                 "8a2f465264c74e04524cc789cdad0190ace43f6c")))
        (sha256
          (base32
            "0s34nbqqy6aqi113xj452pbmqp43046wfbfbbfv1xwhybgq0c1j1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-direx
            emacs-plsense
            emacs-log4e
            emacs-yaxception))
    (home-page
      "https://github.com/aki2o/plsense-direx")
    (synopsis "Perl Package Explorer")
    (description
      "Documentation at https://melpa.org/#/plsense-direx")
    (license #f)))

(define-public emacs-po-mode
  (package
    (name "emacs-po-mode")
    (version "20200606.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/po-mode.git")
               (commit
                 "25eb1bdca30ed25d2e5d51b9feeb28a3faff51ec")))
        (sha256
          (base32
            "00ff5njs4aghkhipw5pmha4mj1a5s35g1cxihhbqpn9gr7kmbg02"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for GNU gettext PO files")
    (description
      "Documentation at https://melpa.org/#/po-mode")
    (license #f)))

(define-public emacs-pocket-api
  (package
    (name "emacs-pocket-api")
    (version "20180403.109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/pocket-api.el.git")
               (commit
                 "3eb9430b9db90bc02e736e433eb86389f7655189")))
        (sha256
          (base32
            "0k6a9zzdi02g677cc699llk04i06yb7ddnlnmxndap5jszfyqwfi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/lujun9972/pocket-api.el")
    (synopsis "another pocket api")
    (description
      "Documentation at https://melpa.org/#/pocket-api")
    (license #f)))

(define-public emacs-pocket-lib
  (package
    (name "emacs-pocket-lib")
    (version "20190720.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/pocket-lib.el.git")
               (commit
                 "f794e3e619e1f6cad25bbfd5fe019a7e62820bf4")))
        (sha256
          (base32
            "0iv03wjwmz0di8n5bndmq5r18r1pq999v1scyay0jm1cxlksqafg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash emacs-kv emacs-s))
    (home-page
      "https://github.com/alphapapa/pocket-lib.el")
    (synopsis
      "Library for accessing getpocket.com API")
    (description
      "Documentation at https://melpa.org/#/pocket-lib")
    (license #f)))

(define-public emacs-point-stack
  (package
    (name "emacs-point-stack")
    (version "20200427.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/point-stack.git")
               (commit
                 "cddcea2c91038710c245819b3cda2dd739726134")))
        (sha256
          (base32
            "1qjf13zmh0gf90knd73b6fyn3bhwjzn4k1w1xpa1ngnh6v233da9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Back and forward navigation through buffer locations")
    (description
      "Documentation at https://melpa.org/#/point-stack")
    (license #f)))

(define-public emacs-poly-erb
  (package
    (name "emacs-poly-erb")
    (version "20200316.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-erb.git")
               (commit
                 "56c744b8d87d8cbe0aba2696d4e8525afc4aa0e8")))
        (sha256
          (base32
            "118x9qrays54n6ksnln51ps5c298zs8ih7k49mn6aq6lpvwy5wjr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-erb")
    (synopsis "Polymode for erb")
    (description
      "Documentation at https://melpa.org/#/poly-erb")
    (license #f)))

(define-public emacs-poly-rst
  (package
    (name "emacs-poly-rst")
    (version "20210418.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-rst.git")
               (commit
                 "e71f2ae6a00683cdb8006f953e5db0673043e144")))
        (sha256
          (base32
            "1jhj1hrb998p9n6bjfdnmsinf0rd5wspm9gwsrdb0k6il897h7lf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-rst")
    (synopsis "poly-rst-mode polymode")
    (description
      "Documentation at https://melpa.org/#/poly-rst")
    (license #f)))

(define-public emacs-poly-ruby
  (package
    (name "emacs-poly-ruby")
    (version "20180905.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/poly-ruby.el.git")
               (commit
                 "794ebb926ace23e9c1398da934701951432dcea2")))
        (sha256
          (base32
            "1ffm81hg1gah7hb9x556hda5g4j3gk4c986q9gaacvfizqak3gyy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page "https://github.com/knu/poly-ruby.el")
    (synopsis "Provides poly-ruby-mode")
    (description
      "Documentation at https://melpa.org/#/poly-ruby")
    (license #f)))

(define-public emacs-poly-slim
  (package
    (name "emacs-poly-slim")
    (version "20200316.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-slim.git")
               (commit
                 "9e9b5164c68955974fd5f5d220aec5af9b5ba3ae")))
        (sha256
          (base32
            "1742wlx07khra7xfbd6f8d3i030w87mncnyx6kf6im10khf8qwmb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-slim-mode))
    (home-page
      "https://github.com/polymode/poly-slim")
    (synopsis "Polymodes for slim")
    (description
      "Documentation at https://melpa.org/#/poly-slim")
    (license #f)))

(define-public emacs-poly-wdl
  (package
    (name "emacs-poly-wdl")
    (version "20190712.529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmonlong/poly-wdl.git")
               (commit
                 "963faa828d15d49cee5a63f619c3c30e162c2d0f")))
        (sha256
          (base32
            "0bihvkkq4v7wadwbsrgi7a0zmhqn2lp76pnq7vwwsvs1rm36pbvy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-wdl-mode))
    (home-page
      "https://github.com/jmonlong/poly-wdl")
    (synopsis "Polymode for WDL")
    (description
      "Documentation at https://melpa.org/#/poly-wdl")
    (license #f)))

(define-public emacs-pomm
  (package
    (name "emacs-pomm")
    (version "20211219.728")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/pomm.el.git")
               (commit
                 "596eed778fa30e7b33910f015543eda13abd1888")))
        (sha256
          (base32
            "0arhl9x9d4d1s4x5qcf1kn9hkwgsrs6sjn0rky10pgja7gqh6214"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-transient))
    (arguments '(#:files (:defaults "resources")))
    (home-page
      "https://github.com/SqrtMinusOne/pomm.el")
    (synopsis
      "Yet another Pomodoro timer implementation")
    (description
      "Documentation at https://melpa.org/#/pomm")
    (license #f)))

(define-public emacs-pony-snippets
  (package
    (name "emacs-pony-snippets")
    (version "20200418.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ponylang/pony-snippets.git")
               (commit
                 "115a0d5066f89554bee9cb1045bcda5a18ebd441")))
        (sha256
          (base32
            "1g11w52bf724zwwsvrcylk3ndjci2cnbzing77c91psz6d7zjkvw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/seantallen/pony-snippets")
    (synopsis "Yasnippets for Pony")
    (description
      "Documentation at https://melpa.org/#/pony-snippets")
    (license #f)))

(define-public emacs-poporg
  (package
    (name "emacs-poporg")
    (version "20170403.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/QBobWatson/poporg.git")
               (commit
                 "2c58d68c81ecca4140bf179f19ed153ec804b65a")))
        (sha256
          (base32
            "1ymqhy0sqd54z154s3cm6q1m4xnr9wkx9dl5f93845k11ay3kvln"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/QBobWatson/poporg")
    (synopsis
      "Pop a comment or string to an empty buffer for text editing")
    (description
      "Documentation at https://melpa.org/#/poporg")
    (license #f)))

(define-public emacs-popup
  (package
    (name "emacs-popup")
    (version "20210625.400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/auto-complete/popup-el.git")
               (commit
                 "cf899f8012f4189e76a009bebb589ff71631b1e9")))
        (sha256
          (base32
            "09nf95bin4dq50vapax8xndm0bay2cbsws4zvpb4hp3kk0gdzrl6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("popup.el")))
    (home-page
      "https://github.com/auto-complete/popup-el")
    (synopsis "Visual Popup User Interface")
    (description
      "Documentation at https://melpa.org/#/popup")
    (license #f)))

(define-public emacs-popup-edit-menu
  (package
    (name "emacs-popup-edit-menu")
    (version "20170404.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/debugfan/popup-edit-menu.git")
               (commit
                 "925600a6e29183841199e866cf55e566a6a1b002")))
        (sha256
          (base32
            "1dd0ss7cjdjs3c7vkq8p874408iysih80brc8vlfh1f43cnc5v92"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "a popup context edit menu package")
    (description
      "Documentation at https://melpa.org/#/popup-edit-menu")
    (license #f)))

(define-public emacs-popup-switcher
  (package
    (name "emacs-popup-switcher")
    (version "20210402.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/popup-switcher.git")
               (commit
                 "94e01b9ea7970e86ed0f2fbeaa8cd320b60ae821")))
        (sha256
          (base32
            "14a43iv6sr52dh1qqcz58qinx20dxkrfznb7lvh35bihjj819m51"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup emacs-dash))
    (home-page
      "https://github.com/kostafey/popup-switcher")
    (synopsis
      "switch to other buffers and files via popup.")
    (description
      "Documentation at https://melpa.org/#/popup-switcher")
    (license #f)))

(define-public emacs-popwin
  (package
    (name "emacs-popwin")
    (version "20210215.1849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/popwin.git")
               (commit
                 "1184368d3610bd0d0ca4a3db4068048c562c2b50")))
        (sha256
          (base32
            "0inm6wbfkw6b9bwikd77d0zmk6ma9fzfs11acblp5imq202v76ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/popwin")
    (synopsis "Popup Window Manager")
    (description
      "Documentation at https://melpa.org/#/popwin")
    (license #f)))

(define-public emacs-portage-navi
  (package
    (name "emacs-portage-navi")
    (version "20141208.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-portage-navi.git")
               (commit
                 "8016c3e99fe6cef101d479a3d69185796b22ca2f")))
        (sha256
          (base32
            "1pm4x74pw67m2izr9dir201dn5g9icgk6h2j8rqvasgx8v8krv3i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable))
    (home-page
      "https://github.com/kiwanami/emacs-portage-navi")
    (synopsis "portage viewer")
    (description
      "Documentation at https://melpa.org/#/portage-navi")
    (license #f)))

(define-public emacs-pos-tip
  (package
    (name "emacs-pos-tip")
    (version "20191227.1356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pitkali/pos-tip.git")
               (commit
                 "179cc126b363f72ca12fab1e0dc462ce0ee79742")))
        (sha256
          (base32
            "1rz6lqmhs7l49cwwqs7gl2i49l3gvziz1gs556jzsic7jzf9xk1j"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Show tooltip at point")
    (description
      "Documentation at https://melpa.org/#/pos-tip")
    (license #f)))

(define-public emacs-pov-mode
  (package
    (name "emacs-pov-mode")
    (version "20161115.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/melmothx/pov-mode.git")
               (commit
                 "9fc1db3aab7c27155674dd1a87ec62606035d074")))
        (sha256
          (base32
            "1399fxivy15y2k4vp7vqqgsi8l1mzxc8aa2mf2x1hksgiyq60acp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing POV-Ray scene files.")
    (description
      "Documentation at https://melpa.org/#/pov-mode")
    (license #f)))

(define-public emacs-pow
  (package
    (name "emacs-pow")
    (version "20140420.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yukihr/emacs-pow.git")
               (commit
                 "ea83986b8ca8e27cb996290d6463b111ec0966ce")))
        (sha256
          (base32
            "112s6qb80sn44b1cxggqfci89wymxvvwkwl7nknfnr2dzd58lzzy"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/yukihr/emacs-pow")
    (synopsis
      "pow (http://pow.cx/) manager for emacs")
    (description
      "Documentation at https://melpa.org/#/pow")
    (license #f)))

(define-public emacs-powerline
  (package
    (name "emacs-powerline")
    (version "20211022.655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/powerline.git")
               (commit
                 "390a95fe5b71cfc20e18d034b4b35b5c159a83fc")))
        (sha256
          (base32
            "0n5fd38qqsj2m6m6dkm11ndk0blxnn5z5rdpb9blrni7p45d6z8b"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/milkypostman/powerline/")
    (synopsis "Rewrite of Powerline")
    (description
      "Documentation at https://melpa.org/#/powerline")
    (license #f)))

(define-public emacs-powershell
  (package
    (name "emacs-powershell")
    (version "20201005.1642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jschaf/powershell.el.git")
               (commit
                 "d1b3f95669343399f199f291ef76c09a0ede5e60")))
        (sha256
          (base32
            "1cxhzaaig88zhylyycvb3849r85j1ijqklnh9zbqsfl2zhpb0g5c"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jschaf/powershell.el")
    (synopsis "Mode for editing PowerShell scripts")
    (description
      "Documentation at https://melpa.org/#/powershell")
    (license #f)))

(define-public emacs-prassee-theme
  (package
    (name "emacs-prassee-theme")
    (version "20180709.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/prassee/prassee-emacs-theme.git")
               (commit
                 "81126f69cdbaab836c00ae7a49aaf89d4229fde1")))
        (sha256
          (base32
            "18yqsl8jsi3zxfcigvm6fjcx84hzb8b3j7ihiyzqmdhmvma3i08y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/prassee/prassee-emacs-theme")
    (synopsis
      "A high contrast color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/prassee-theme")
    (license #f)))

(define-public emacs-preproc-font-lock
  (package
    (name "emacs-preproc-font-lock")
    (version "20151107.2018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/preproc-font-lock.git")
               (commit
                 "565fda9f5fdeb0598986174a07e9fb09f7604397")))
        (sha256
          (base32
            "0yrfd9qaz16nqcvjyjm9qci526qgkv6k51q5752h3iyqkxnss1pd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/preproc-font-lock")
    (synopsis
      "Highlight C-style preprocessor directives.")
    (description
      "Documentation at https://melpa.org/#/preproc-font-lock")
    (license #f)))

(define-public emacs-preseed-generic-mode
  (package
    (name "emacs-preseed-generic-mode")
    (version "20180210.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/suntong/preseed-generic-mode.git")
               (commit
                 "3aa8806c4a659064baa01751400c53fbaf847f66")))
        (sha256
          (base32
            "02yb5xkgwqxpwghhjmxf2gx0faifi04w2jd8cvfsiwzwqmqyhmv7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/suntong/preseed-generic-mode")
    (synopsis "Debian preseed file major mode")
    (description
      "Documentation at https://melpa.org/#/preseed-generic-mode")
    (license #f)))

(define-public emacs-pretty-symbols
  (package
    (name "emacs-pretty-symbols")
    (version "20140814.959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drothlis/pretty-symbols.git")
               (commit
                 "582cbe51ecfe1cc0a5b185bc06113c8a661e3956")))
        (sha256
          (base32
            "1f00l9f6an1mh8yhf629mw0p37m4jcpl8giz47xbdyw1k6bqn830"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/drothlis/pretty-symbols")
    (synopsis "Draw tokens as Unicode glyphs.")
    (description
      "Documentation at https://melpa.org/#/pretty-symbols")
    (license #f)))

(define-public emacs-prism
  (package
    (name "emacs-prism")
    (version "20210804.417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/prism.el.git")
               (commit
                 "b0cbdaf4916c1cf348a8f0e4f6158e040a627562")))
        (sha256
          (base32
            "1h5fca47kinwr5qy58nh0bqn259vcj540013wb7kwki6ab33l809"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/alphapapa/prism.el")
    (synopsis
      "Customizable, depth-based syntax coloring")
    (description
      "Documentation at https://melpa.org/#/prism")
    (license #f)))

(define-public emacs-proc-net
  (package
    (name "emacs-proc-net")
    (version "20130322.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-proc-net.git")
               (commit
                 "10861112a1f3994c8e6374d6c5bb5d734cfeaf73")))
        (sha256
          (base32
            "0nly5h0d6w8dc08ifb2fiqcn4cqcn9crkh2wn0jzlz4zd2x75qrb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nicferrier/emacs-procnet")
    (synopsis "network process tools")
    (description
      "Documentation at https://melpa.org/#/proc-net")
    (license #f)))

(define-public emacs-proced-narrow
  (package
    (name "emacs-proced-narrow")
    (version "20190911.1818")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisjeffery/proced-narrow.git")
               (commit
                 "0e2a4dfb072eb0369d0020b429e820ae620d325e")))
        (sha256
          (base32
            "0d1qq5606prls7mzy0iri41j2c14l4axz6kq629r4wjdqwshxkli"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/travisjeffery/proced-narrow")
    (synopsis
      "Live-narrowing of search results for proced.")
    (description
      "Documentation at https://melpa.org/#/proced-narrow")
    (license #f)))

(define-public emacs-prodigy
  (package
    (name "emacs-prodigy")
    (version "20210116.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/prodigy.el.git")
               (commit
                 "168f5ace1671876d8c3bd350c0853bd0196bddda")))
        (sha256
          (base32
            "15rshpq0h5i252xamxh70acdz9jddn5xwgswzk5h2b24kxsbfnli"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/prodigy.el")
    (synopsis
      "Manage external services from within Emacs")
    (description
      "Documentation at https://melpa.org/#/prodigy")
    (license #f)))

(define-public emacs-professional-theme
  (package
    (name "emacs-professional-theme")
    (version "20150315.1100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juanjux/emacs-professional-theme.git")
               (commit
                 "0927d1474049a193f9f366bde5eb1887b9ba20ed")))
        (sha256
          (base32
            "0hx7rxa3smdippcpj4j63k0r5l4wflllb0vpnwwknc9j93r7042b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juanjux/emacs-professional-theme")
    (synopsis
      "Emacs port of Vim's professional theme")
    (description
      "Documentation at https://melpa.org/#/professional-theme")
    (license #f)))

(define-public emacs-programmer-dvorak
  (package
    (name "emacs-programmer-dvorak")
    (version "20150427.137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yangchenyun/programmer-dvorak.git")
               (commit
                 "3288a8f058eca4cab390a564babbbcb17cfa0350")))
        (sha256
          (base32
            "1yklm43d0ppyf4simhqab6m892z4mmxs2145lzw6kpizixavcv00"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yangchenyun/programmer-dvorak")
    (synopsis "Input method for Programmer Dvorak.")
    (description
      "Documentation at https://melpa.org/#/programmer-dvorak")
    (license #f)))

(define-public emacs-project-abbrev
  (package
    (name "emacs-project-abbrev")
    (version "20210715.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/project-abbrev.git")
               (commit
                 "4b059ff6ce8cc2ca817247fcc251994bee2090e4")))
        (sha256
          (base32
            "0jn8drn49ab15a7j0584hihzyw66zyq5zv7wwbipnwwkqrd4cagk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/project-abbrev")
    (synopsis
      "Customize abbreviation expansion in the project")
    (description
      "Documentation at https://melpa.org/#/project-abbrev")
    (license #f)))

(define-public emacs-project-explorer
  (package
    (name "emacs-project-explorer")
    (version "20150504.14")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/project-explorer.git")
               (commit
                 "589a09008706f5f4ef91393dc4306eede0d15ca9")))
        (sha256
          (base32
            "04l4m3kxbwvyw9xy6cwakrdxxdswrrs7sya8zn6m738aawbr1mcd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-es-lib emacs-es-windows))
    (home-page
      "https://github.com/sabof/project-explorer")
    (synopsis "A project explorer sidebar")
    (description
      "Documentation at https://melpa.org/#/project-explorer")
    (license #f)))

(define-public emacs-projectile-codesearch
  (package
    (name "emacs-projectile-codesearch")
    (version "20180508.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-codesearch.git")
               (commit
                 "f6eb96f034a925444412cfa03e45e0ccbbafe3f2")))
        (sha256
          (base32
            "1xdkm1f04z1h3ivd6zm8hckf3n3fbi5rwybg4dwi5mim6w84i7j9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-codesearch emacs-projectile))
    (arguments
      '(#:files ("projectile-codesearch.el")))
    (home-page
      "https://github.com/abingham/emacs-codesearch")
    (synopsis
      "Integration of codesearch into projectile")
    (description
      "Documentation at https://melpa.org/#/projectile-codesearch")
    (license #f)))

(define-public emacs-projectile-rails
  (package
    (name "emacs-projectile-rails")
    (version "20210810.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/projectile-rails.git")
               (commit
                 "30828afbfa7b0e07970e3e668e975e7916b824c4")))
        (sha256
          (base32
            "1m1n1rvna9qhq3dl4sd90lnkzvk7vaz2832r3zhfyg6l5d7dybh6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-inflections
            emacs-inf-ruby
            emacs-f
            emacs-rake
            emacs-dash))
    (home-page
      "https://github.com/asok/projectile-rails")
    (synopsis
      "Minor mode for Rails projects based on projectile-mode")
    (description
      "Documentation at https://melpa.org/#/projectile-rails")
    (license #f)))

(define-public emacs-projectile-trailblazer
  (package
    (name "emacs-projectile-trailblazer")
    (version "20170928.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/micdahl/projectile-trailblazer.git")
               (commit
                 "a37a4f7b7f727d98e4c74c0256e059e84263553d")))
        (sha256
          (base32
            "1njs2aps4mlbnnfjkfwrb8vy8lg6lyxzxkxpscv91la7yf3wpc3g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-inflections
            emacs-inf-ruby
            emacs-f
            emacs-rake))
    (home-page
      "https://github.com/micdahl/projectile-trailblazer")
    (synopsis
      "Minor mode for Rails projects using trailblazer")
    (description
      "Documentation at https://melpa.org/#/projectile-trailblazer")
    (license #f)))

(define-public emacs-projectile-variable
  (package
    (name "emacs-projectile-variable")
    (version "20170208.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/projectile-variable.git")
               (commit
                 "8d348ac70bdd6dc320c13a12941b32b38140e264")))
        (sha256
          (base32
            "0l38nldx6lwjb7mxixykiyj10xwb35249dxfg0k2wkmb2vy1fkxs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/projectile-variable")
    (synopsis "Store project local variables.")
    (description
      "Documentation at https://melpa.org/#/projectile-variable")
    (license #f)))

(define-public emacs-projmake-mode
  (package
    (name "emacs-projmake-mode")
    (version "20161031.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericbmerritt/projmake-mode.git")
               (commit
                 "a897701f7e8f8cc11459ed44eb0e454db2a460c1")))
        (sha256
          (base32
            "0las0xl4af6sn5pbllq16abw2hj1kswwpkyi6lf31sbwr5wnq4qb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-indicators))
    (arguments '(#:files ("src/*.el")))
    (home-page "unspecified")
    (synopsis
      "Project oriented automatic builder and error highlighter, flymake for projects")
    (description
      "Documentation at https://melpa.org/#/projmake-mode")
    (license #f)))

(define-public emacs-proof-general
  (package
    (name "emacs-proof-general")
    (version "20211217.1753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ProofGeneral/PG.git")
               (commit
                 "a61a1d8e5ffa610b794535995d58adf18e9ec47b")))
        (sha256
          (base32
            "1c6216yz2wb9c5yn5rq6jr9pwxb44vhvgnsi0wsh0rcccm24mdp8"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "CHANGES"
          "AUTHORS"
          "COPYING"
          "generic"
          "images"
          "lib"
          ("coq" "coq/*.el")
          "easycrypt"
          "phox"
          "pghaskell"
          "pgocaml"
          "pgshell")))
    (home-page "https://proofgeneral.github.io/")
    (synopsis
      "PG init file for package.el and ELPA compatibility")
    (description
      "Documentation at https://melpa.org/#/proof-general")
    (license #f)))

(define-public emacs-propfont-mixed
  (package
    (name "emacs-propfont-mixed")
    (version "20150113.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikirill/propfont-mixed.git")
               (commit
                 "0b461ef4754a469610dba71874a34b6da42176bf")))
        (sha256
          (base32
            "0lch20njy248w7bnvgs7jz0zqasskf5dakmykxwpb48llm6kx95v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikirill/propfont-mixed")
    (synopsis
      "Use proportional fonts with space-based indentation.")
    (description
      "Documentation at https://melpa.org/#/propfont-mixed")
    (license #f)))

(define-public emacs-proportional
  (package
    (name "emacs-proportional")
    (version "20200309.1556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksjogo/proportional.git")
               (commit
                 "0e4537af7ba2bc9dbb449c38350bce012b382f51")))
        (sha256
          (base32
            "0k4kwmyja5nb6rmbbq71vzxw7nnxr0w8f9vzws14an28niwr4s8p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ksjogo/proportional")
    (synopsis "use a proportional font everywhere")
    (description
      "Documentation at https://melpa.org/#/proportional")
    (license #f)))

(define-public emacs-protobuf-mode
  (package
    (name "emacs-protobuf-mode")
    (version "20211013.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/protobuf.git")
               (commit
                 "8c29dc2c4d55bb620bfe15ca6b74f8097cbb006d")))
        (sha256
          (base32
            "1kdk0rq2j06s3pjiwr9lb9d7p7zc91ar14d0szx5f1qyk2n7wrsc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("editors/protobuf-mode.el")))
    (home-page "unspecified")
    (synopsis
      "major mode for editing protocol buffers.")
    (description
      "Documentation at https://melpa.org/#/protobuf-mode")
    (license #f)))

(define-public emacs-proxy-mode
  (package
    (name "emacs-proxy-mode")
    (version "20201214.727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/proxy-mode.git")
               (commit
                 "dbf163413e9e404c652cc0ea7185c623016a38e1")))
        (sha256
          (base32
            "1c5m0gb4qms28vahvi5kam1qf1hnpd9v1f6cwxiqdj8aka9ll8sd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stardiviner/proxy-mode")
    (synopsis "A minor mode to toggle proxy.")
    (description
      "Documentation at https://melpa.org/#/proxy-mode")
    (license #f)))

(define-public emacs-punctuality-logger
  (package
    (name "emacs-punctuality-logger")
    (version "20141120.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/elzair/punctuality-logger.git")
               (commit
                 "e09e5dd37bc92289fa2f7dc44aed51a7b5e04bb0")))
        (sha256
          (base32
            "1bkkgs2agy00wivilljkj3a9fsb2ba935icjmhbk46zjc6yf3y6q"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/elzair/punctuality-logger")
    (synopsis "Punctuality logger for Emacs")
    (description
      "Documentation at https://melpa.org/#/punctuality-logger")
    (license #f)))

(define-public emacs-puni
  (package
    (name "emacs-puni")
    (version "20211204.1256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AmaiKinono/puni.git")
               (commit
                 "e147a72f3c6b7bb40ef7fa37d12ea54afa09cd7e")))
        (sha256
          (base32
            "06lkpzz6ri092awgba575vq4qy3ym4qbk6hrwfpvmy81n26v7wsw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/AmaiKinono/puni")
    (synopsis "Parentheses Universalistic")
    (description
      "Documentation at https://melpa.org/#/puni")
    (license #f)))

(define-public emacs-punpun-theme
  (package
    (name "emacs-punpun-theme")
    (version "20210508.1635")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/punpun-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "1phr7gb8dc3a0w3m2gkmadqc6iprbl2h3z16k7xxnqbsi0ladbja"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A bleak theme")
    (description
      "Documentation at https://melpa.org/#/punpun-theme")
    (license #f)))

(define-public emacs-puppet-mode
  (package
    (name "emacs-puppet-mode")
    (version "20210305.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/voxpupuli/puppet-mode.git")
               (commit
                 "71bcd383f20a457e8ad34e0e08ec47f8e1b64263")))
        (sha256
          (base32
            "1zgz1gs42ak29q7p3020ah9sm7bgfsagszia80bgiw1lc7wg77ni"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pkg-info))
    (home-page
      "https://github.com/voxpupuli/puppet-mode")
    (synopsis "Major mode for Puppet manifests")
    (description
      "Documentation at https://melpa.org/#/puppet-mode")
    (license #f)))

(define-public emacs-purp-theme
  (package
    (name "emacs-purp-theme")
    (version "20210912.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gnuvince/purp.git")
               (commit
                 "8d3510e1ed995b8323cd5205626ddde6386a76ca")))
        (sha256
          (base32
            "0b3xpiwrbwsc5fmh6k2kj1wxhp3xl4dablxwap07q0kcnp3q47d1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gnuvince/purp")
    (synopsis "A dark color theme with few colors")
    (description
      "Documentation at https://melpa.org/#/purp-theme")
    (license #f)))

(define-public emacs-pushbullet
  (package
    (name "emacs-pushbullet")
    (version "20140809.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theanalyst/revolver.git")
               (commit
                 "73c59a0f1dc04875b3e5a2c8afbc26c32128e445")))
        (sha256
          (base32
            "03ivg3ddhy5zh410wgwxa17m98wywqhk62jgijhjd00b6l8i4aym"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grapnel))
    (home-page
      "http://www.github.com/theanalyst/revolver")
    (synopsis
      "Emacs client for the PushBullet Android app")
    (description
      "Documentation at https://melpa.org/#/pushbullet")
    (license #f)))

(define-public emacs-py-import-check
  (package
    (name "emacs-py-import-check")
    (version "20130802.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/emacs-py-import-check.git")
               (commit
                 "9787f87745a4234cd9bed711860b707902bc8ae4")))
        (sha256
          (base32
            "1416hbc64gwn9c8g9lxfx58w60ysi0x8rbps6mfxalavdhbs20sv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/psibi/emacs-py-import-check")
    (synopsis
      "Finds the unused python imports using importchecker")
    (description
      "Documentation at https://melpa.org/#/py-import-check")
    (license #f)))

(define-public emacs-py-smart-operator
  (package
    (name "emacs-py-smart-operator")
    (version "20170531.1209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmuslimov/py-smart-operator.git")
               (commit
                 "0c8a66faca4b35158d0b5885472cb75286039167")))
        (sha256
          (base32
            "09pmkp24s7nwh6p4pzsjp1z65ksi9n3n2xv7d3igpa86l8qgcm2d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis "smart-operator for python-mode")
    (description
      "Documentation at https://melpa.org/#/py-smart-operator")
    (license #f)))

(define-public emacs-pycarddavel
  (package
    (name "emacs-pycarddavel")
    (version "20150831.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/pycarddavel.git")
               (commit
                 "a6d81ee4eb8309cd82f6082aeca68c5a015702a3")))
        (sha256
          (base32
            "09glwrb9q65qdm4yd0mbi5hwdy2434zm8699ywhs6hqpjacadlmi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "Integrate pycarddav")
    (description
      "Documentation at https://melpa.org/#/pycarddavel")
    (license #f)))

(define-public emacs-pyim
  (package
    (name "emacs-pyim")
    (version "20211223.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/pyim.git")
               (commit
                 "a6a667d864f2773f3662ced9cd9578eb9b7a8b42")))
        (sha256
          (base32
            "1fivss4qdnv13bsm0kpn6qh8dxydsnkh6p7z9n5zn4d1wv8vys52"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-xr))
    (arguments '(#:files ("pyim*.el")))
    (home-page "https://github.com/tumashu/pyim")
    (synopsis
      "A Chinese input method support quanpin, shuangpin, wubi, cangjie and rime.")
    (description
      "Documentation at https://melpa.org/#/pyim")
    (license #f)))

(define-public emacs-pyim-cangjiedict
  (package
    (name "emacs-pyim-cangjiedict")
    (version "20210617.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p1uxtar/pyim-cangjiedict.git")
               (commit
                 "d17e3d32a6480939b350a91a915ebe8e6efad819")))
        (sha256
          (base32
            "1bszpqsm15az0wvbgsk012manxnvigbk38qr5iqzkgd4d13yv5fs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (arguments '(#:files (:defaults "*.pyim")))
    (home-page
      "https://github.com/p1uxtar/pyim-cangjiedict")
    (synopsis "Some cangjie dicts for pyim")
    (description
      "Documentation at https://melpa.org/#/pyim-cangjiedict")
    (license #f)))

(define-public emacs-pyimpsort
  (package
    (name "emacs-pyimpsort")
    (version "20160130.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pyimpsort.git")
               (commit
                 "d5c61d70896b642646dfd3c809c06174ae086c1a")))
        (sha256
          (base32
            "05qx1p19dw3nr264shihfn33k579hd0wf4cxki5cqrxi7xzpjgrc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("pyimpsort.el" "pyimpsort.py")))
    (home-page
      "https://github.com/emacs-pe/pyimpsort.el")
    (synopsis "Sort python imports.")
    (description
      "Documentation at https://melpa.org/#/pyimpsort")
    (license #f)))

(define-public emacs-pyinspect
  (package
    (name "emacs-pyinspect")
    (version "20211102.1415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/it-is-wednesday/pyinspect.el.git")
               (commit
                 "36cf624236c8b4cce852dd52b64d058d4d4a32fd")))
        (sha256
          (base32
            "0g2k9fgjvcq2jc3j2k2x2v1vghaf0hyarzvdby5vzycsp7jlzcjm"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "pyinspect.py")))
    (home-page
      "https://github.com/it-is-wednesday/pyinspect.el")
    (synopsis "Python object inspector")
    (description
      "Documentation at https://melpa.org/#/pyinspect")
    (license #f)))

(define-public emacs-pynt
  (package
    (name "emacs-pynt")
    (version "20180710.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ebanner/pynt.git")
               (commit
                 "86cf9ce78d34f92bfd0764c9cbb75427ebd429e6")))
        (sha256
          (base32
            "14x6blikgg5ndc9955hdziy3h9gjr27gpzmhbi4pgjvs8gffhf31"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ein emacs-epc emacs-deferred))
    (arguments '(#:files ("pynt/*")))
    (home-page "https://github.com/ebanner/pynt")
    (synopsis
      "Generate and scroll EIN buffers from python code")
    (description
      "Documentation at https://melpa.org/#/pynt")
    (license #f)))

(define-public emacs-pyramid
  (package
    (name "emacs-pyramid")
    (version "20210427.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakra/pyramid.el.git")
               (commit
                 "66f54f4a9cc9fa81edf768ab433d5b3c5517363c")))
        (sha256
          (base32
            "0sijy6nk46yw21j49x5n93za2zjzqqrfmjm7dz3z3gj7jknk27i9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pythonic emacs-tablist))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "https://github.com/dakra/pyramid.el")
    (synopsis
      "Minor mode for working with pyramid projects")
    (description
      "Documentation at https://melpa.org/#/pyramid")
    (license #f)))

(define-public emacs-python-coverage
  (package
    (name "emacs-python-coverage")
    (version "20211224.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-python-coverage.git")
               (commit
                 "a341615af03dbe3ce0ac9b63cf43dc01c1ae5ebe")))
        (sha256
          (base32
            "1k5air9sgg95jl949lwf9hz8i4ivy646mnm4pc37wsxkh4g46wqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-xml+))
    (home-page
      "https://github.com/wbolster/emacs-python-coverage")
    (synopsis
      "Show Python coverage via overlays or Flycheck")
    (description
      "Documentation at https://melpa.org/#/python-coverage")
    (license #f)))

(define-public emacs-python-info
  (package
    (name "emacs-python-info")
    (version "20151228.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/python-info.git")
               (commit
                 "306f15441b54b25757cdfd3b327b84024ea21ed7")))
        (sha256
          (base32
            "0zk6014dzfrb3y3nhs890x082xf044w0a8nmy6rlrj375lvhfn99"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Python info manual for Emacs")
    (description
      "Documentation at https://melpa.org/#/python-info")
    (license #f)))

(define-public emacs-python-isort
  (package
    (name "emacs-python-isort")
    (version "20210603.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/emacs-python-isort.git")
               (commit
                 "339814df22b87eebca02137e581f65d6283fce97")))
        (sha256
          (base32
            "094nqaf60cw3kch2hka5jbbrc5b6v3z6np98w3y6690yxwx7wmz4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/wyuenho/emacs-python-isort")
    (synopsis
      "Reformat python-mode buffer with isort")
    (description
      "Documentation at https://melpa.org/#/python-isort")
    (license #f)))

(define-public emacs-python-mls
  (package
    (name "emacs-python-mls")
    (version "20211215.240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/python-mls.git")
               (commit
                 "2f7ce2c44e5d94eade297c07139bec6353e18ad7")))
        (sha256
          (base32
            "1m26nsdzciy5p1hv5vwhg51aw3bym6w7dqmjhk2y8nm3vdn48dn6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdtsmith/python-mls")
    (synopsis "Multi-line shell for (i)Python")
    (description
      "Documentation at https://melpa.org/#/python-mls")
    (license #f)))

(define-public emacs-python-mode
  (package
    (name "emacs-python-mode")
    (version "20211117.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/python-mode-devs/python-mode.git")
               (commit
                 "220379ffcd7961f290d7a4d9f67da136fffb25a6")))
        (sha256
          (base32
            "1h2hplhsqlh6vhdbjc93mf6hkvix8c5s49gbl48v3hr34pj6992r"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("python-mode.el"
         ("completion" "completion/pycomplete.*"))))
    (home-page
      "https://gitlab.com/groups/python-mode-devs")
    (synopsis "Python major mode")
    (description
      "Documentation at https://melpa.org/#/python-mode")
    (license #f)))

(define-public emacs-python-switch-quotes
  (package
    (name "emacs-python-switch-quotes")
    (version "20161228.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vladimirlagunov/python-switch-quotes.git")
               (commit
                 "93f1e9b40e061a6cea480139e8b1362b6404abd0")))
        (sha256
          (base32
            "1x04hnf3m8cgqp0i566q4n7kh59cayzfxka3g07kv0h543xbys4n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/werehuman/python-switch-quotes")
    (synopsis
      "cycle between ' and \" quotes in python strings")
    (description
      "Documentation at https://melpa.org/#/python-switch-quotes")
    (license #f)))

(define-public emacs-python-test
  (package
    (name "emacs-python-test")
    (version "20181018.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/python-test.el.git")
               (commit
                 "f899975b133539e19ba822e4b0bfd1a28572967e")))
        (sha256
          (base32
            "0ww0qf9hsd8j31dc0p3fmsiqsir3mqbd4pwv4i29qidmbgrk3cv0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("python-test.el")))
    (home-page
      "https://github.com/emacs-pe/python-test.el")
    (synopsis "Python testing integration")
    (description
      "Documentation at https://melpa.org/#/python-test")
    (license #f)))

(define-public emacs-python-x
  (package
    (name "emacs-python-x")
    (version "20190611.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/python-x.el.git")
               (commit
                 "b1f8eaccee210d7c0580dba6dc9bd361fcf3765d")))
        (sha256
          (base32
            "0vyipfsppissa87pdnbksamdby0yl2q8nzawqivv6smn33jp6vsn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-folding))
    (home-page "unspecified")
    (synopsis
      "python.el extras for interactive evaluation")
    (description
      "Documentation at https://melpa.org/#/python-x")
    (license #f)))

(define-public emacs-pythonic
  (package
    (name "emacs-pythonic")
    (version "20210122.1247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/pythonic.git")
               (commit
                 "fe75bc17baae314bf8f5e0b12aad3fccfc6c5397")))
        (sha256
          (base32
            "1g5mfn37d01259s2xii2d41027xpif4czxipq4sa7d6sfyq50h7h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "https://github.com/proofit404/pythonic")
    (synopsis
      "Utility functions for writing pythonic emacs package.")
    (description
      "Documentation at https://melpa.org/#/pythonic")
    (license #f)))

(define-public emacs-qt-pro-mode
  (package
    (name "emacs-qt-pro-mode")
    (version "20170604.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/qt-pro-mode.git")
               (commit
                 "7a2da323de834294b413cbbb3c92f42f54913643")))
        (sha256
          (base32
            "07054hzl7gd0wfibcqvij2wx9zji330gsryn53qad9gyalvlavpa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Qt Pro/Pri major mode")
    (description
      "Documentation at https://melpa.org/#/qt-pro-mode")
    (license #f)))

(define-public emacs-quasi-monochrome-theme
  (package
    (name "emacs-quasi-monochrome-theme")
    (version "20200415.705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-quasi-monochrome.git")
               (commit
                 "b38d71860fdea945e10e8a766ac9dfa1410ade67")))
        (sha256
          (base32
            "0jcwfmamvpd22r5sbicbf9442b22lvldfrqldysm4l9yyxs11jy3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lbolla/emacs-quasi-monochrome")
    (synopsis "Quasi Monochrome theme")
    (description
      "Documentation at https://melpa.org/#/quasi-monochrome-theme")
    (license #f)))

(define-public emacs-quickref
  (package
    (name "emacs-quickref")
    (version "20170817.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pd/quickref.el.git")
               (commit
                 "f368c8b8219bb90498c5ab84e26f00eedaa234cf")))
        (sha256
          (base32
            "0nalnfb816qk1dfxjk9j8r5lvzv2k4jf747xdjbj2mcvv07g2jd2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/pd/quickref.el")
    (synopsis
      "Display relevant notes-to-self in the echo area")
    (description
      "Documentation at https://melpa.org/#/quickref")
    (license #f)))

(define-public emacs-quickrun
  (package
    (name "emacs-quickrun")
    (version "20210904.1553")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/quickrun.git")
               (commit
                 "78317951cd3db986d811de616b7035559831749b")))
        (sha256
          (base32
            "0z7zpsmhfhnzvf1vqpsj5wsnlxmyxgc1z6599xsbvl30fw589y1r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-quickrun")
    (synopsis "Run commands quickly")
    (description
      "Documentation at https://melpa.org/#/quickrun")
    (license #f)))

(define-public emacs-quiet
  (package
    (name "emacs-quiet")
    (version "20200211.721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/quiet.git")
               (commit
                 "f8a4ef0be086f97e7fb631df7060f29cc4025b98")))
        (sha256
          (base32
            "01nbxgi1v6kqmcnzfdxxc0cqsswi8h12l98ngdiq6b62mv7cfcrs"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zzkt/quiet")
    (synopsis
      "Disconnect from the online world for a while")
    (description
      "Documentation at https://melpa.org/#/quiet")
    (license #f)))

(define-public emacs-racket-mode
  (package
    (name "emacs-racket-mode")
    (version "20211223.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/greghendershott/racket-mode.git")
               (commit
                 "25247b6af039b6029ee89d77c50720666025a8cb")))
        (sha256
          (base32
            "0jkm21dpm02hvc88h3mds95l267kpwqwb3csnb8yfdf06p0gyx6z"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "*.rkt"
          ("racket" "racket/*")
          (:exclude "racket/example/*" "racket/test/*"))))
    (home-page "https://www.racket-mode.com/")
    (synopsis "Racket editing, REPL, and more")
    (description
      "Documentation at https://melpa.org/#/racket-mode")
    (license #f)))

(define-public emacs-rails-i18n
  (package
    (name "emacs-rails-i18n")
    (version "20211026.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/otavioschwanck/rails-i18n.el.git")
               (commit
                 "5d7a3e46d801668f53efc4c974b5f46b2cd28a0c")))
        (sha256
          (base32
            "1r4x4j5d0i4v27mj0cdx6s3qs3vk9v6blxmgnldmbv2ychyxzrnr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yaml emacs-dash emacs-projectile))
    (home-page
      "https://github.com/otavioschwanck/rails-i18n.el")
    (synopsis "Seach and insert i18n on ruby code")
    (description
      "Documentation at https://melpa.org/#/rails-i18n")
    (license #f)))

(define-public emacs-railscasts-reloaded-theme
  (package
    (name "emacs-railscasts-reloaded-theme")
    (version "20190308.759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thegeorgeous/railscasts-reloaded-theme.git")
               (commit
                 "1c3850568e60a555d59cbb57bf2b6aa06e99d454")))
        (sha256
          (base32
            "1z6nyn2galkp9c06n6k431rqm12wla24pa0bmwqjbbhz4jz5dxf2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thegeorgeous/railscasts-reloaded-theme")
    (synopsis "Railscasts Reloaded color theme")
    (description
      "Documentation at https://melpa.org/#/railscasts-reloaded-theme")
    (license #f)))

(define-public emacs-rainbow-fart
  (package
    (name "emacs-rainbow-fart")
    (version "20211114.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/emacs-rainbow-fart.git")
               (commit
                 "aaaec8e20b3bde3a567baa501623c451f796a46a")))
        (sha256
          (base32
            "1mrq585wq4c23jv6fvphh03y4s8wjrh02dhd0l2369axl6bdslz7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files (:defaults "voices")))
    (home-page
      "https://github.com/stardiviner/emacs-rainbow-fart")
    (synopsis
      "Checks the keywords of code to play suitable sounds")
    (description
      "Documentation at https://melpa.org/#/rainbow-fart")
    (license #f)))

(define-public emacs-rand-theme
  (package
    (name "emacs-rand-theme")
    (version "20151219.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gopar/rand-theme.git")
               (commit
                 "65a00e5c5150f857aa96803b68f50bc8da0215b7")))
        (sha256
          (base32
            "0fmajgqf9j21qn7h35sky5di8cnma432g0ki9d5m41byxp9y1bdl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gopar/rand-theme")
    (synopsis "Random Emacs theme at start-up!")
    (description
      "Documentation at https://melpa.org/#/rand-theme")
    (license #f)))

(define-public emacs-rbenv
  (package
    (name "emacs-rbenv")
    (version "20141120.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/senny/rbenv.el.git")
               (commit
                 "2ea1a5bdc1266caef1dd77700f2c8f42429b03f1")))
        (sha256
          (base32
            "0yd0rs6fnc6lsfi7pivw5sivh698055r8ifj9vrxb82dcx2y6v2h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/senny/rbenv.el")
    (synopsis "Emacs integration for rbenv")
    (description
      "Documentation at https://melpa.org/#/rbenv")
    (license #f)))

(define-public emacs-rbs-mode
  (package
    (name "emacs-rbs-mode")
    (version "20210430.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ybiquitous/rbs-mode.git")
               (commit
                 "fd766a943d5f1f0624e10ffce096b9aaba14a5f4")))
        (sha256
          (base32
            "1gl5wqdyaqvdv0557idycfzgr5gvzvlv11jwccq43v6dmvydam15"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ybiquitous/rbs-mode")
    (synopsis "A major mode for RBS")
    (description
      "Documentation at https://melpa.org/#/rbs-mode")
    (license #f)))

(define-public emacs-rc-mode
  (package
    (name "emacs-rc-mode")
    (version "20160913.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrhmouse/rc-mode.el.git")
               (commit
                 "fe2e0570bf9c19a292e16b18fd4b0a256df5d93f")))
        (sha256
          (base32
            "0skjg3l3ss8nlrpnpjjflmf7wjib4jfarkmx4438nc6vm6553fmn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrhmouse/rc-mode.el")
    (synopsis "Major mode for the Plan9 rc shell")
    (description
      "Documentation at https://melpa.org/#/rc-mode")
    (license #f)))

(define-public emacs-rcirc-alert
  (package
    (name "emacs-rcirc-alert")
    (version "20141127.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csantosb/rcirc-alert.git")
               (commit
                 "0adf8ff9c47023fec578f678424be62b0f49057f")))
        (sha256
          (base32
            "0xdyrp0zs2v2glpfwlajmj97wygwi0y492zbp6rp3caa5bj3j4z2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.sh")))
    (home-page "unspecified")
    (synopsis
      "Configurable alert messages on top of RCIRC")
    (description
      "Documentation at https://melpa.org/#/rcirc-alert")
    (license #f)))

(define-public emacs-rcirc-styles
  (package
    (name "emacs-rcirc-styles")
    (version "20210414.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaron-em/rcirc-styles.el.git")
               (commit
                 "dd06ec5fa455131788bbc885fcfaaec16b08f13b")))
        (sha256
          (base32
            "116qvavvw72vkahknb7g7w7knaximw3m1pq6hic7h13xj8xqxz2w"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "support mIRC-style color and attribute codes")
    (description
      "Documentation at https://melpa.org/#/rcirc-styles")
    (license #f)))

(define-public emacs-readline-complete
  (package
    (name "emacs-readline-complete")
    (version "20150708.1437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/monsanto/readline-complete.el.git")
               (commit
                 "30c020c37b2741160cc37e656e13c85d826a0ebf")))
        (sha256
          (base32
            "1j5b5xapflwzh8a297gva0l12ralwa9vl5z3bb75c9ksjkhi4nm6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "offers completions in shell mode")
    (description
      "Documentation at https://melpa.org/#/readline-complete")
    (license #f)))

(define-public emacs-real-auto-save
  (package
    (name "emacs-real-auto-save")
    (version "20200505.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ChillarAnand/real-auto-save.git")
               (commit
                 "481a2d1460ab5a9b6df3721dda76ad515923bfd1")))
        (sha256
          (base32
            "1f1sqbqc0ckp7850ahvy0syky7lplwhb05r3cw4fdmz2xbywwg52"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("real-auto-save.el")))
    (home-page
      "https://github.com/ChillarAnand/real-auto-save")
    (synopsis
      "Automatically save your buffers/files at regular intervals")
    (description
      "Documentation at https://melpa.org/#/real-auto-save")
    (license #f)))

(define-public emacs-realgud
  (package
    (name "emacs-realgud")
    (version "20211107.2210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud.git")
               (commit
                 "978b455d7da4dc41995192bfabc32092622651dd")))
        (sha256
          (base32
            "00kjkc8fpvcjapnrk2fmnxspn9p3z9b3niyrqnyzif3kzmdsqz1i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative
            emacs-loc-changes
            emacs-test-simple))
    (arguments
      '(#:files
        ("realgud.el"
         "realgud/.nosearch"
         "realgud-recursive-autoloads.el"
         ("realgud/common" "realgud/common/*.el")
         ("realgud/common/buffer"
          "realgud/common/buffer/*.el")
         ("realgud/debugger/bashdb"
          "realgud/debugger/bashdb/*.el")
         ("realgud/debugger/gdb"
          "realgud/debugger/gdb/*.el")
         ("realgud/debugger/gub"
          "realgud/debugger/gub/*.el")
         ("realgud/debugger/ipdb"
          "realgud/debugger/ipdb/*.el")
         ("realgud/debugger/jdb"
          "realgud/debugger/jdb/*.el")
         ("realgud/debugger/kshdb"
          "realgud/debugger/kshdb/*.el")
         ("realgud/debugger/nodejs"
          "realgud/debugger/nodejs/*.el")
         ("realgud/debugger/pdb"
          "realgud/debugger/pdb/*.el")
         ("realgud/debugger/perldb"
          "realgud/debugger/perldb/*.el")
         ("realgud/debugger/rdebug"
          "realgud/debugger/rdebug/*.el")
         ("realgud/debugger/remake"
          "realgud/debugger/remake/*.el")
         ("realgud/debugger/trepan"
          "realgud/debugger/trepan/*.el")
         ("realgud/debugger/trepan.pl"
          "realgud/debugger/trepan.pl/*.el")
         ("realgud/debugger/trepan2"
          "realgud/debugger/trepan2/*.el")
         ("realgud/debugger/trepan3k"
          "realgud/debugger/trepan3k/*.el")
         ("realgud/debugger/trepanjs"
          "realgud/debugger/trepanjs/*.el")
         ("realgud/debugger/zshdb"
          "realgud/debugger/zshdb/*.el")
         ("realgud/lang" "realgud/lang/*.el"))))
    (home-page "https://github.com/realgud/realgud/")
    (synopsis
      "A modular front-end for interacting with external debuggers")
    (description
      "Documentation at https://melpa.org/#/realgud")
    (license #f)))

(define-public emacs-realgud-ipdb
  (package
    (name "emacs-realgud-ipdb")
    (version "20200722.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-ipdb.git")
               (commit
                 "f18f907aa4ddd3e59dc19ca296d4ee2dc5e436b0")))
        (sha256
          (base32
            "196zy8xmqkm6nc7074gsy4ymm6h4ikbd01f41karys7dwib3gg5i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files (:defaults ("ipdb" "ipdb/*.el"))))
    (home-page
      "https://github.com/realgud/realgud-ipdb")
    (synopsis "Realgud front-end to ipdb")
    (description
      "Documentation at https://melpa.org/#/realgud-ipdb")
    (license #f)))

(define-public emacs-realgud-lldb
  (package
    (name "emacs-realgud-lldb")
    (version "20210417.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-lldb.git")
               (commit
                 "abffd0d2d23f6c87be5dc5d36e948af92de5df86")))
        (sha256
          (base32
            "1zjrjgs9vjaqsf5h9sxw1pf2f9sfngx1gxp37lb8myan52qmhlz1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative emacs-realgud))
    (arguments
      '(#:files (:defaults ("lldb" "lldb/*.el"))))
    (home-page
      "http://github.com/realgud/realgud-lldb")
    (synopsis "Realgud front-end to lldb")
    (description
      "Documentation at https://melpa.org/#/realgud-lldb")
    (license #f)))

(define-public emacs-realgud-node-inspect
  (package
    (name "emacs-realgud-node-inspect")
    (version "20190523.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-node-inspect.git")
               (commit
                 "c3ed48cf3bc2b28f9fd23bcf60ea13a3cf019fc8")))
        (sha256
          (base32
            "00ywz4kp90wkfi1ncn9zj6vjw9igiv34gvx6fqfi8ha3q5xljzps"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        (:defaults
          ("realgud-node-inspect"
           "realgud-node-inspect/*.el"))))
    (home-page
      "http://github.com/realgud/realgud-node-inspect")
    (synopsis
      "Realgud front-end to newer \"node inspect\"")
    (description
      "Documentation at https://melpa.org/#/realgud-node-inspect")
    (license #f)))

(define-public emacs-realgud-trepan-ni
  (package
    (name "emacs-realgud-trepan-ni")
    (version "20210513.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-trepan-ni.git")
               (commit
                 "0ec088ea343835e24ae73da09bea96bfb02a3130")))
        (sha256
          (base32
            "109v1kc29qqgabzjq9118jyw800zhl9yxykmgfl1zrpiyq6disz4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative emacs-realgud))
    (arguments
      '(#:files
        (:defaults ("trepan-ni" "trepan-ni/*.el"))))
    (home-page
      "https://github.com/realgud/realgud-trepan-ni")
    (synopsis "Realgud front-end to trepan-ni")
    (description
      "Documentation at https://melpa.org/#/realgud-trepan-ni")
    (license #f)))

(define-public emacs-reazon
  (package
    (name "emacs-reazon")
    (version "20210831.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickdrozd/reazon.git")
               (commit
                 "d697c0dfe38ac7483e453e8ce8056acf95c89ba2")))
        (sha256
          (base32
            "12s2h4wd7cz9x078698wwjjpy874rk8cm2d17p6ksb10y3cmrqsn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nickdrozd/reazon")
    (synopsis "miniKanren for Emacs")
    (description
      "Documentation at https://melpa.org/#/reazon")
    (license #f)))

(define-public emacs-recur
  (package
    (name "emacs-recur")
    (version "20211108.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/recur.git")
               (commit
                 "627d88f2695336245527fcc77f5728575ecf742b")))
        (sha256
          (base32
            "1di685jq65g7f8s8j6lflqj6mkp05hpi10y1vfnqh1xln2pijapc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/recur")
    (synopsis "Tail call optimization")
    (description
      "Documentation at https://melpa.org/#/recur")
    (license #f)))

(define-public emacs-reddigg
  (package
    (name "emacs-reddigg")
    (version "20210603.2305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-reddigg.git")
               (commit
                 "1a6eaf3d1a5e44205399526c0f425281b8d9ccc3")))
        (sha256
          (base32
            "070zghnrh4ywndk6bz1vd750g2nxj4rd42gphymyz8x7kazqqh1j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-ht emacs-request))
    (home-page
      "https://github.com/thanhvg/emacs-reddigg")
    (synopsis "A reader for redditt")
    (description
      "Documentation at https://melpa.org/#/reddigg")
    (license #f)))

(define-public emacs-redis
  (package
    (name "emacs-redis")
    (version "20150531.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/redis.el.git")
               (commit
                 "2c33f3397bc14e7a8192867b55920492d4eead8c")))
        (sha256
          (base32
            "1rjpf23a8rggjmmxvm1997d3xz03kz84xams486b9ky0n2v02d57"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/redis.el")
    (synopsis "Redis integration")
    (description
      "Documentation at https://melpa.org/#/redis")
    (license #f)))

(define-public emacs-refine
  (package
    (name "emacs-refine")
    (version "20200507.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/refine.git")
               (commit
                 "d72fa50910b86217a35bb1b7e56adea206052021")))
        (sha256
          (base32
            "02cb30ycwyqhdw54s3abb4xsdyqlpi6i8xi7rkl85avvgy2gif8y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-list-utils
            emacs-loop))
    (home-page "unspecified")
    (synopsis "interactive value editing")
    (description
      "Documentation at https://melpa.org/#/refine")
    (license #f)))

(define-public emacs-register-channel
  (package
    (name "emacs-register-channel")
    (version "20210120.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/YangZhao11/register-channel.git")
               (commit
                 "ed7f563e92170b758dc878fcb5df88d46d5d44cc")))
        (sha256
          (base32
            "1ih1s274004faq78fgdxw3gy7i58nbanbp39ax2wi8zz6ivm9lqa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Jump around fast using registers")
    (description
      "Documentation at https://melpa.org/#/register-channel")
    (license #f)))

(define-public emacs-related
  (package
    (name "emacs-related")
    (version "20190327.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julien-montmartin/related.git")
               (commit
                 "546c7e811b290470288b617f2c27106bd83ccd33")))
        (sha256
          (base32
            "0kn07wgnz5bkkq66qfq16rvw9l7zgh0hzrsa705j1zbd6vc3wygs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/julien-montmartin/related")
    (synopsis
      "Switch back and forth between similarly named buffers.")
    (description
      "Documentation at https://melpa.org/#/related")
    (license #f)))

(define-public emacs-remind-bindings
  (package
    (name "emacs-remind-bindings")
    (version "20200820.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/remind-bindings.el.git")
               (commit
                 "c9a327bfd3c68a0c41b5b64df491bdee4c73ca39")))
        (sha256
          (base32
            "1rwlzf9mg66hgdqjgh2garp8qckajs4a1kiqg3xygaf7009kr4nk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-omni-quotes emacs-popwin))
    (home-page
      "https://github.com/mtekman/remind-bindings.el")
    (synopsis "Reminders for your init bindings")
    (description
      "Documentation at https://melpa.org/#/remind-bindings")
    (license #f)))

(define-public emacs-renpy
  (package
    (name "emacs-renpy")
    (version "20200607.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Reagankm/renpy-mode.git")
               (commit
                 "f2f95a72a8c842f229f80999132e8ea8ee73f6fc")))
        (sha256
          (base32
            "1jka61j6zrc0yzjcplnyg1kp1d45ikwnkmayjg41v9w0pfrzzim3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/billywade/renpy-mode")
    (synopsis "silly walks for Renpy")
    (description
      "Documentation at https://melpa.org/#/renpy")
    (license #f)))

(define-public emacs-repeater
  (package
    (name "emacs-repeater")
    (version "20180418.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/repeater.git")
               (commit
                 "854b874542b186b2408cbc58ad0591fe8eb70b6c")))
        (sha256
          (base32
            "0cx6b8l9ssf56fz8xjsmbyhy8mdcj8l0rvsdx37qk86xq4nlz74p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/repeater")
    (synopsis "Repeat recent repeated commands")
    (description
      "Documentation at https://melpa.org/#/repeater")
    (license #f)))

(define-public emacs-replace-from-region
  (package
    (name "emacs-replace-from-region")
    (version "20170227.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/replace-from-region.git")
               (commit
                 "dc9318b9b2822da7b00ecc34d1dc965c8f96c9bb")))
        (sha256
          (base32
            "05l0wn1gqw2sbl65s1m7afmg3b1ps2qgqqrjkl9r2i26p95kqlq3"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/replace-from-region.el")
    (synopsis
      "Replace commands whose query is from region")
    (description
      "Documentation at https://melpa.org/#/replace-from-region")
    (license #f)))

(define-public emacs-request
  (package
    (name "emacs-request")
    (version "20211107.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-request.git")
               (commit
                 "3336eaa97de923f74b90dda3e35985e122d40805")))
        (sha256
          (base32
            "0jckwy5zhz95d6l3lz8b9b34pppcjjzy97fg1wn8mqzhf3h460ac"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("request.el")))
    (home-page
      "https://github.com/tkf/emacs-request")
    (synopsis "Compatible layer for URL request")
    (description
      "Documentation at https://melpa.org/#/request")
    (license #f)))

(define-public emacs-requirejs
  (package
    (name "emacs-requirejs")
    (version "20151204.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joeheyming/requirejs-emacs.git")
               (commit
                 "4ea2a5fcbc76e4cbb6a7461e6f05f019b75865b1")))
        (sha256
          (base32
            "1bfj2zjn3x41jal6c136wnwkgmag27bmrwbfwdylafc7qqk6dflv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-popup
            emacs-s
            emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/joeheyming/requirejs-emacs")
    (synopsis
      "Requirejs import manipulation and source traversal.")
    (description
      "Documentation at https://melpa.org/#/requirejs")
    (license #f)))

(define-public emacs-requirejs-mode
  (package
    (name "emacs-requirejs-mode")
    (version "20130215.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/moricard/requirejs-mode.git")
               (commit
                 "bbb0c09f8eb2d6a33c17319be8137f68bb16bc92")))
        (sha256
          (base32
            "02wva5q8mvc0a5kms2wm1gyaag2x3zd6fkkpl4218nrbb0mbficv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Improved AMD module management")
    (description
      "Documentation at https://melpa.org/#/requirejs-mode")
    (license #f)))

(define-public emacs-restart-emacs
  (package
    (name "emacs-restart-emacs")
    (version "20201127.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iqbalansari/restart-emacs.git")
               (commit
                 "1607da2bc657fe05ae01f7fdf26f716eafead02c")))
        (sha256
          (base32
            "0afy3icvlj9j6dl3jj6i286mwdhjl7kgvykv1wnbjx2c6gbwfpxa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/iqbalansari/restart-emacs")
    (synopsis "Restart emacs from within emacs")
    (description
      "Documentation at https://melpa.org/#/restart-emacs")
    (license #f)))

(define-public emacs-restclient-test
  (package
    (name "emacs-restclient-test")
    (version "20210422.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/simenheg/restclient-test.el.git")
               (commit
                 "3c6661d087526510a04ea9de421c5869a1a1d061")))
        (sha256
          (base32
            "0bpvxv8bc671pa0sm4v8pqyla3i99y05mgpbgcjd8pdsfhiwjw7j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-restclient))
    (arguments '(#:files ("restclient-test.el")))
    (home-page
      "https://github.com/simenheg/restclient-test.el")
    (synopsis "Run tests with restclient.el")
    (description
      "Documentation at https://melpa.org/#/restclient-test")
    (license #f)))

(define-public emacs-reveal-in-osx-finder
  (package
    (name "emacs-reveal-in-osx-finder")
    (version "20150802.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaz-yos/reveal-in-osx-finder.git")
               (commit
                 "5710e5936e47139a610ec9a06899f72e77ddc7bc")))
        (sha256
          (base32
            "1q13cgpz4wzhnqv84ablawy3y2wgdwy46sp7454mmfx9m77jzb2v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kaz-yos/reveal-in-osx-finder")
    (synopsis
      "Reveal file associated with buffer in OS X Finder")
    (description
      "Documentation at https://melpa.org/#/reveal-in-osx-finder")
    (license #f)))

(define-public emacs-reverse-theme
  (package
    (name "emacs-reverse-theme")
    (version "20141205.145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/reverse-theme.git")
               (commit
                 "8319d0d5342890a3530ffa4daafdb7c35feda1ca")))
        (sha256
          (base32
            "002ywhjms8ybk7cma2p2i11z3fz6kb0w8mlafysm911rvcq2hg5f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-reverse-theme")
    (synopsis "Reverse theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/reverse-theme")
    (license #f)))

(define-public emacs-rg
  (package
    (name "emacs-rg")
    (version "20211113.1958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dajva/rg.el.git")
               (commit
                 "47bda7ee2f3c14082f9dd468063d45667a9d5256")))
        (sha256
          (base32
            "0m1ykfx2yfhqbzv1ppj2p2dbi7c3kck7p1k7s8z6c955wnday5xc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-transient emacs-wgrep))
    (home-page "https://github.com/dajva/rg.el")
    (synopsis "A search tool based on ripgrep")
    (description
      "Documentation at https://melpa.org/#/rg")
    (license #f)))

(define-public emacs-rhtml-mode
  (package
    (name "emacs-rhtml-mode")
    (version "20130422.1311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/rhtml.git")
               (commit
                 "a6d71b38a3db867ccf82999c99805db1a3a33c33")))
        (sha256
          (base32
            "1qlpv5lzj4yfyjgdykhm6q9izg6g0z5pf5nmynj42vsx7v8bhy1x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for editing RHTML files")
    (description
      "Documentation at https://melpa.org/#/rhtml-mode")
    (license #f)))

(define-public emacs-rigid-tabs
  (package
    (name "emacs-rigid-tabs")
    (version "20170903.1559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/rigid-tabs.el.git")
               (commit
                 "eba84ceaba2e57e76ad2dfbb7a7154238a25d956")))
        (sha256
          (base32
            "18rba101m9vmjl4mf3x0k7wvbgn6qmay9la745vzpr3lx1f4nn98"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wavexx/rigid-tabs.el")
    (synopsis "Fix TAB alignment in diff buffers")
    (description
      "Documentation at https://melpa.org/#/rigid-tabs")
    (license #f)))

(define-public emacs-rimero-theme
  (package
    (name "emacs-rimero-theme")
    (version "20180901.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yveszoundi/emacs-rimero-theme.git")
               (commit
                 "a2e706c2b34f749019979a133f08a2d94a1104b3")))
        (sha256
          (base32
            "1kcvvaizggzi7s3dlh611bkirdf6y89kzddc273drdks705s01wh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yveszoundi/emacs-rimero-theme")
    (synopsis
      "Theme with a dark background suitable for UI and terminal usage.")
    (description
      "Documentation at https://melpa.org/#/rimero-theme")
    (license #f)))

(define-public emacs-robe
  (package
    (name "emacs-robe")
    (version "20211208.205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/robe.git")
               (commit
                 "11207bd549a5a78e3a4d70265c3715990dcdab71")))
        (sha256
          (base32
            "0hcyvvv4y78fmwprlxgmpzb81lzip9y1hjskmv8x7l0q1a6a3dsz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inf-ruby))
    (arguments '(#:files ("*robe.el" "lib")))
    (home-page "https://github.com/dgutov/robe")
    (synopsis
      "Code navigation, documentation lookup and completion for Ruby")
    (description
      "Documentation at https://melpa.org/#/robe")
    (license #f)))

(define-public emacs-roguel-ike
  (package
    (name "emacs-roguel-ike")
    (version "20160120.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stevenremot/roguel-ike.git")
               (commit
                 "706dcb0687e8016d7d776f9d9e5ace9fdbbca43c")))
        (sha256
          (base32
            "0rgv4y9aa5cc2ddz3y5z8d22xmr8kf5c60h0r3g8h91jmcw3rb4z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (arguments
      '(#:files ("*.el" "roguel-ike" "roguel-ike-lib")))
    (home-page "unspecified")
    (synopsis "A coffee-break roguelike")
    (description
      "Documentation at https://melpa.org/#/roguel-ike")
    (license #f)))

(define-public emacs-roy-mode
  (package
    (name "emacs-roy-mode")
    (version "20121208.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/folone/roy-mode.git")
               (commit
                 "0416f561edbc6b4a29fced8be84d2527a9613d65")))
        (sha256
          (base32
            "04jbnm9is2cis75h40znqzjvyjq27ncr2vfank6zglzi4fhxsl0r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/folone/roy-mode")
    (synopsis "Roy major mode")
    (description
      "Documentation at https://melpa.org/#/roy-mode")
    (license #f)))

(define-public emacs-rpm-spec-mode
  (package
    (name "emacs-rpm-spec-mode")
    (version "20160710.1136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stigbjorlykke/rpm-spec-mode.git")
               (commit
                 "c1c38050c48ea330c7cea632b8785d66daeefb2b")))
        (sha256
          (base32
            "0427kcvf2ljhzwxskn3jzk0ncrl3f9zcz2sm83d9pmhh5jax2gch"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "RPM spec file editing commands for Emacs/XEmacs")
    (description
      "Documentation at https://melpa.org/#/rpm-spec-mode")
    (license #f)))

(define-public emacs-rpn-calc
  (package
    (name "emacs-rpn-calc")
    (version "20210306.426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/rpn-calc.git")
               (commit
                 "320123ede874a8fc6cde542baa0d106950318071")))
        (sha256
          (base32
            "0fq7ym2wyfb5pgm75llc8wzyzr3kb5s3i2mw3ry076yk5c4gjsi2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page "https://github.com/zk-phi/rpn-calc")
    (synopsis "quick RPN calculator for hackers")
    (description
      "Documentation at https://melpa.org/#/rpn-calc")
    (license #f)))

(define-public emacs-rtags-xref
  (package
    (name "emacs-rtags-xref")
    (version "20210721.2314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtags))
    (arguments '(#:files ("src/rtags-xref.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags backend for xref.el")
    (description
      "Documentation at https://melpa.org/#/rtags-xref")
    (license #f)))

(define-public emacs-rubik
  (package
    (name "emacs-rubik")
    (version "20180222.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kurvivor19/rubik-mode.git")
               (commit
                 "c8dab1726463dbc9042a0b00186e4a8df02eb868")))
        (sha256
          (base32
            "13razzmk70h5sd69ms0a3ljr285zcad0wnrqkfxbgi5rnppqlkh1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Kurvivor19/rubik-mode")
    (synopsis "Rubik's Cube")
    (description
      "Documentation at https://melpa.org/#/rubik")
    (license #f)))

(define-public emacs-ruby-electric
  (package
    (name "emacs-ruby-electric")
    (version "20200328.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruby/elisp-ruby-electric.git")
               (commit
                 "f2323cd9b5df3b34aa9810ba8109502824925d23")))
        (sha256
          (base32
            "1p0l0fsn0jcgb4raimyc4d1wpfksrfhn0rkwdazadvm6s8baydf7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ruby/elisp-ruby-electric")
    (synopsis
      "Minor mode for electrically editing ruby code")
    (description
      "Documentation at https://melpa.org/#/ruby-electric")
    (license #f)))

(define-public emacs-ruby-end
  (package
    (name "emacs-ruby-end")
    (version "20141215.1223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ruby-end.el.git")
               (commit
                 "a136f75abb6d5577ce40d61dfeb778c2e9bb09c0")))
        (sha256
          (base32
            "1f530gaiy010qln51g83m1llazhyfi8ws0lvsb982fhi4dh1xfk5"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/ruby-end")
    (synopsis
      "Automatic insertion of end blocks for Ruby")
    (description
      "Documentation at https://melpa.org/#/ruby-end")
    (license #f)))

(define-public emacs-ruby-hash-syntax
  (package
    (name "emacs-ruby-hash-syntax")
    (version "20210106.224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ruby-hash-syntax.git")
               (commit
                 "d458fb5891e0da85271b1cba3ee0ee69ea66a374")))
        (sha256
          (base32
            "02bjxsi8vbpadwjlhkdgpm4bi091ry9rdvzwnqsr4lh0z7f0ab76"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/ruby-hash-syntax")
    (synopsis
      "Toggle ruby hash syntax between => and 1.9+ styles")
    (description
      "Documentation at https://melpa.org/#/ruby-hash-syntax")
    (license #f)))

(define-public emacs-ruby-refactor
  (package
    (name "emacs-ruby-refactor")
    (version "20160214.1650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajvargo/ruby-refactor.git")
               (commit
                 "e6b7125878a08518bffec6942df0c606f748e9ee")))
        (sha256
          (base32
            "13008ih4hwa80bn2dbgj551knbvgpriz5sb241rkf7mifmlfzgsi"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ruby-refactor.el")))
    (home-page
      "https://github.com/ajvargo/ruby-refactor")
    (synopsis
      "A minor mode which presents various Ruby refactoring helpers.")
    (description
      "Documentation at https://melpa.org/#/ruby-refactor")
    (license #f)))

(define-public emacs-ruled-switch-buffer
  (package
    (name "emacs-ruled-switch-buffer")
    (version "20211205.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kzkn/ruled-switch-buffer.git")
               (commit
                 "4ae1a722750f7ecb4db93c062ffdbe353e706bf0")))
        (sha256
          (base32
            "0qb69avm7f32y6dlcdsrc2vbj2lki3n732zpfxyr97cgf8vka7xm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kzkn/ruled-switch-buffer")
    (synopsis "Rule based buffer switching")
    (description
      "Documentation at https://melpa.org/#/ruled-switch-buffer")
    (license #f)))

(define-public emacs-rum-mode
  (package
    (name "emacs-rum-mode")
    (version "20180127.22")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rumlang/rum-mode.git")
               (commit
                 "b69a3866e0299cae8c9c805d644e69b2c17b64de")))
        (sha256
          (base32
            "13sm2v7al9658n17dka6dclzsprccrm3zycx6nwsgl99i14cnn99"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rumlang/rum-mode")
    (synopsis
      "Major mode for Rum programming language")
    (description
      "Documentation at https://melpa.org/#/rum-mode")
    (license #f)))

(define-public emacs-run-command
  (package
    (name "emacs-run-command")
    (version "20210529.1505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bard/emacs-run-command.git")
               (commit
                 "ce2d69feeffb9ef9815ef5b5e32f236763197a10")))
        (sha256
          (base32
            "132gsmgqnfzx8q0f4gchjzhm3wqm5frjrsb8q9cmqsa5y2g7qjmf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bard/emacs-run-command")
    (synopsis
      "Run an external command from a context-dependent list")
    (description
      "Documentation at https://melpa.org/#/run-command")
    (license #f)))

(define-public emacs-rust-mode
  (package
    (name "emacs-rust-mode")
    (version "20211218.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rust-lang/rust-mode.git")
               (commit
                 "b017f746503df27ccdca8ee6d2627529d64d76e1")))
        (sha256
          (base32
            "11fdxbv51anrjfdqqpgrqz2md9qkcn5y3524lzjippqi9i31lnjn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rust-lang/rust-mode")
    (synopsis
      "A major-mode for editing Rust source code")
    (description
      "Documentation at https://melpa.org/#/rust-mode")
    (license #f)))

(define-public emacs-rust-playground
  (package
    (name "emacs-rust-playground")
    (version "20200116.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grafov/rust-playground.git")
               (commit
                 "5a117781dcb66065bea7830dd73618008fc34949")))
        (sha256
          (base32
            "1vmas5mg32lsyiki753a7hy597f54k1rx9sjiahw63jpgg785zys"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grafov/rust-playground")
    (synopsis
      "Local Rust playground for short code snippets.")
    (description
      "Documentation at https://melpa.org/#/rust-playground")
    (license #f)))

(define-public emacs-rutils
  (package
    (name "emacs-rutils")
    (version "20210805.608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/rutils.el.git")
               (commit
                 "e216db63a2ccd50fe5c80679fc5b929dd2c114e8")))
        (sha256
          (base32
            "0ldbrx7xchy4p26ggs0hmazwfw9cbv97mzl4f02whblq3zkx7h5j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-transient))
    (home-page
      "https://github.com/ShuguangSun/rutils.el")
    (synopsis "R utilities with transient")
    (description
      "Documentation at https://melpa.org/#/rutils")
    (license #f)))

(define-public emacs-s3ed
  (package
    (name "emacs-s3ed")
    (version "20200929.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattusifer/s3ed.git")
               (commit
                 "2234444ead6c4c6fc3fea548958b36d2c29a9938")))
        (sha256
          (base32
            "0amzpw75w3hb186y4m1k3j9c1j3cxbd2cy20gcma218bgg2xg5s0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/mattusifer/s3ed")
    (synopsis "Tramp-like access to s3")
    (description
      "Documentation at https://melpa.org/#/s3ed")
    (license #f)))

(define-public emacs-sane-term
  (package
    (name "emacs-sane-term")
    (version "20181130.101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adamrt/sane-term.git")
               (commit
                 "46352169bd6d2a86ca9c2052cd05ecd16fc7657b")))
        (sha256
          (base32
            "1k0b1w9a3b89ricji92nq4cqbh1l2fm7ly1bdl8pvf59drp7cpd4"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/adamrt/sane-term")
    (synopsis "Multi Term is crazy. This is not.")
    (description
      "Documentation at https://melpa.org/#/sane-term")
    (license #f)))

(define-public emacs-sass-mode
  (package
    (name "emacs-sass-mode")
    (version "20190502.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/sass-mode.git")
               (commit
                 "247a0d4b509f10b28e4687cd8763492bca03599b")))
        (sha256
          (base32
            "1nhk12lhvkwdk8s8fx33p6rssi0gcfx2zkanq23rz6k28v5zi5yp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haml-mode))
    (home-page
      "http://github.com/nex3/haml/tree/master")
    (synopsis "Major mode for editing Sass files")
    (description
      "Documentation at https://melpa.org/#/sass-mode")
    (license #f)))

(define-public emacs-sauron
  (package
    (name "emacs-sauron")
    (version "20201015.836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/djcb/sauron.git")
               (commit
                 "5daade4836da5b1b2ab26d84128d6c38328a5d52")))
        (sha256
          (base32
            "0fkq8knq023zm538ls4zxghlkn9zf4rfccpmmgfcpad6bdm00cpc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Track (erc/org/dbus/...) events and react to them.")
    (description
      "Documentation at https://melpa.org/#/sauron")
    (license #f)))

(define-public emacs-save-visited-files
  (package
    (name "emacs-save-visited-files")
    (version "20200212.414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/save-visited-files.git")
               (commit
                 "8203a05a322324ec17b14437c8dfb38efdb53241")))
        (sha256
          (base32
            "1zc7f5l7i60fpi8vw41xhpnhz5jpiqkk7fdkd2k6lnmv7jnnilfc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nflath/save-visited-files")
    (synopsis "save opened files across sessions")
    (description
      "Documentation at https://melpa.org/#/save-visited-files")
    (license #f)))

(define-public emacs-saveplace-pdf-view
  (package
    (name "emacs-saveplace-pdf-view")
    (version "20210217.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicolaisingh/saveplace-pdf-view.git")
               (commit
                 "54ed966b842501c3c092dbf57b372e37b033c578")))
        (sha256
          (base32
            "0i03qb6qc2agp9s5s7l08f1wl8anqndh6xshg1c3w357vd1whv7i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicolaisingh/saveplace-pdf-view")
    (synopsis "Save place in pdf-view buffers")
    (description
      "Documentation at https://melpa.org/#/saveplace-pdf-view")
    (license #f)))

(define-public emacs-schrute
  (package
    (name "emacs-schrute")
    (version "20170521.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/shackra/dwight-k.-schrute")
               (commit
                 "59faa6c4232ae183cea93237301acad8c0763997")))
        (sha256
          (base32
            "1w5l1vf4cn4psrxgnq5n6j3zw644s70inpa17vsvng3sk5r8crcb"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/shackra/dwight-k.-schrute")
    (synopsis
      "Help you remember there is a better way to do something.")
    (description
      "Documentation at https://melpa.org/#/schrute")
    (license #f)))

(define-public emacs-scihub
  (package
    (name "emacs-scihub")
    (version "20211020.420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/scihub.el.git")
               (commit
                 "d96c462e7f340f142ce3c5ffd31fa267223fd854")))
        (sha256
          (base32
            "0w8xlnpawkq580gc6cvxzln29x9v5g05ab7i8wwg1r5jhw9bjvgs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/scihub.el")
    (synopsis "Sci-Hub integration")
    (description
      "Documentation at https://melpa.org/#/scihub")
    (license #f)))

(define-public emacs-scratch-ext
  (package
    (name "emacs-scratch-ext")
    (version "20140104.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyanagi/scratch-ext-el.git")
               (commit
                 "388c53cddd0466b451264894667ed64a6947ad67")))
        (sha256
          (base32
            "0ng0by647r49mia7vmjqc97gwlwgs8kmaz0lw2y54jdz8m0bbngp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kyanagi/scratch-ext-el")
    (synopsis "Extensions for *scratch*")
    (description
      "Documentation at https://melpa.org/#/scratch-ext")
    (license #f)))

(define-public emacs-scratch-message
  (package
    (name "emacs-scratch-message")
    (version "20211221.1527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/scratch-message.git")
               (commit
                 "efb2db33e52e5d4a4f1bafbd8b459a3b91c3c87a")))
        (sha256
          (base32
            "117a3v3s94jra3dlsaafgg6594gw6gbdmh1ay5zar5yjy7q6pi2f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/scratch-message.git")
    (synopsis
      "Changing message in your scratch buffer")
    (description
      "Documentation at https://melpa.org/#/scratch-message")
    (license #f)))

(define-public emacs-scratch-pop
  (package
    (name "emacs-scratch-pop")
    (version "20200910.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/scratch-pop.git")
               (commit
                 "cbe842fd78e4b742ece9fc493ebf43e69d872866")))
        (sha256
          (base32
            "1rqmh5nv9qlc17bvqm7q000r0h0y1ymgy7gvxyhjwk6yhaynh0jw"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "Generate, popup (& optionally backup) scratch buffer(s).")
    (description
      "Documentation at https://melpa.org/#/scratch-pop")
    (license #f)))

(define-public emacs-scratches
  (package
    (name "emacs-scratches")
    (version "20151006.416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/scratches.git")
               (commit
                 "9441afe6396ca38f08029123fab5d87429cbf315")))
        (sha256
          (base32
            "10hmy0p4pkrzvvyisk4rjc6hqqyk2sir1rszqgmkhrdywl010vlc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (home-page "unspecified")
    (synopsis "Multiple scratches in any language")
    (description
      "Documentation at https://melpa.org/#/scratches")
    (license #f)))

(define-public emacs-scroll-on-jump
  (package
    (name "emacs-scroll-on-jump")
    (version "20211104.51")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-scroll-on-jump.git")
               (commit
                 "0cf26a15bb6278c4273ee53f6a8d7d790792fc29")))
        (sha256
          (base32
            "0ns1mxbfw5s7mimzqwxbi2sbbs6w60gi7z3l5hmxiv1qwdl0a8p7"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-scroll-on-jump")
    (synopsis "Scroll when jumping to a new point")
    (description
      "Documentation at https://melpa.org/#/scroll-on-jump")
    (license #f)))

(define-public emacs-scrollable-quick-peek
  (package
    (name "emacs-scrollable-quick-peek")
    (version "20201224.329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpablobr/scrollable-quick-peek.git")
               (commit
                 "3e3492145a61831661d6e97fdcb47b5b66c73287")))
        (sha256
          (base32
            "0gca860rhvcdjgm6k5pm6spznhg4787dqyjzfixvnffd5l93lcvc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-quick-peek))
    (home-page
      "https://github.com/jpablobr/scrollable-quick-peek")
    (synopsis "Display scrollable overlays")
    (description
      "Documentation at https://melpa.org/#/scrollable-quick-peek")
    (license #f)))

(define-public emacs-sculpture-themes
  (package
    (name "emacs-sculpture-themes")
    (version "20210828.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/t-e-r-m/sculpture-themes.git")
               (commit
                 "cce59d2bcc48d622f3978c583108cf853f21789c")))
        (sha256
          (base32
            "0f8aqq026j0wxkgs0p3yjq3r1jd30lk79199wrdk58x9120pp6z6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/t-e-r-m/sculpture-theme")
    (synopsis "Themes with vivid colors")
    (description
      "Documentation at https://melpa.org/#/sculpture-themes")
    (license #f)))

(define-public emacs-sdlang-mode
  (package
    (name "emacs-sdlang-mode")
    (version "20161201.711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CyberShadow/sdlang-mode.git")
               (commit
                 "d42a6eedefeb44919fbacf58d302b6df18f05bbc")))
        (sha256
          (base32
            "0r6sm7b15scmjcpdcqvm55hdsvyw5d2g7mrfhsx2hs8sqz64gkwc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/CyberShadow/sdlang-mode")
    (synopsis
      "Major mode for Simple Declarative Language files.")
    (description
      "Documentation at https://melpa.org/#/sdlang-mode")
    (license #f)))

(define-public emacs-searchq
  (package
    (name "emacs-searchq")
    (version "20150829.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tcw165/searchq.git")
               (commit
                 "dd510d55ad66a82c6ef022cfe7c4a73ad5365f82")))
        (sha256
          (base32
            "0zs08vxmjb3y4dnfq6djnrhmkgyhhwd5zylrjisrd4y7f089fyh4"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("images" "images/*.xpm" "images/*.png"))))
    (home-page "unspecified")
    (synopsis
      "Framework of queued search tasks using GREP, ACK, AG and more.")
    (description
      "Documentation at https://melpa.org/#/searchq")
    (license #f)))

(define-public emacs-secretaria
  (package
    (name "emacs-secretaria")
    (version "20191128.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/shackra/secretaria.git")
               (commit
                 "03986130a2ada1fa952d45e83536729f20230fcf")))
        (sha256
          (base32
            "10ikd6ksz5adpldyx9h8s3qnwc488rqixzwnd0rjjwqigmllj9lb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-s emacs-f))
    (home-page
      "https://gitlab.com/shackra/secretaria")
    (synopsis
      "A personal assistant based on org-mode")
    (description
      "Documentation at https://melpa.org/#/secretaria")
    (license #f)))

(define-public emacs-selected
  (package
    (name "emacs-selected")
    (version "20200528.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/selected.el.git")
               (commit
                 "3043fd2609f7e71d809763ae6e8dd4b6c904e63d")))
        (sha256
          (base32
            "11cr55g7rrr4gqb9r2znmff0bp112l7a96d26mznfdprzj7pdzvd"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/selected.el")
    (synopsis "Keymap for when region is active")
    (description
      "Documentation at https://melpa.org/#/selected")
    (license #f)))

(define-public emacs-selectric-mode
  (package
    (name "emacs-selectric-mode")
    (version "20200209.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rbanffy/selectric-mode.git")
               (commit
                 "1840de71f7414b7cd6ce425747c8e26a413233aa")))
        (sha256
          (base32
            "1aabqqqcafkqmyarf5kb1k0gglmlpn6kr3h3x0yph5gd6sk3l4ll"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.wav")))
    (home-page
      "https://github.com/rbanffy/selectric-mode")
    (synopsis "IBM Selectric mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/selectric-mode")
    (license #f)))

(define-public emacs-selectrum
  (package
    (name "emacs-selectrum")
    (version "20210707.1827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/selectrum.git")
               (commit
                 "97693d0aea2c548197e9d1de3bdedf8e703775a4")))
        (sha256
          (base32
            "0d03sw0w2yhhmnpdn7xc0sm2n3lk11ffhkbz59kzdkcqqi7ppv04"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/raxod502/selectrum")
    (synopsis "Easily select item from list")
    (description
      "Documentation at https://melpa.org/#/selectrum")
    (license #f)))

(define-public emacs-semi
  (package
    (name "emacs-semi")
    (version "20210613.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/semi.git")
               (commit
                 "509f6f0bc2f5d020c63e47d9ad89410dc20bcb6f")))
        (sha256
          (base32
            "0lnr5kyc59rs2p3lnhyr6cc126rh17szp68xpsx4brym3blb37yc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-apel emacs-flim))
    (home-page "unspecified")
    (synopsis "A library to provide MIME features.")
    (description
      "Documentation at https://melpa.org/#/semi")
    (license #f)))

(define-public emacs-sequed
  (package
    (name "emacs-sequed")
    (version "20210908.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brannala/sequed.git")
               (commit
                 "c78ef34da948576290978d876b776c21f8832136")))
        (sha256
          (base32
            "1g11hkh3n74f7asgxjpq8isbvghwd82n6rjpjzcvrrwmkrgkhxam"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/brannala/sequed")
    (synopsis
      "Major mode for FASTA format DNA alignments")
    (description
      "Documentation at https://melpa.org/#/sequed")
    (license #f)))

(define-public emacs-sequences
  (package
    (name "emacs-sequences")
    (version "20170818.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/timvisher/sequences.el.git")
               (commit
                 "564ebbd93b0beea4e75acfbf824350e90b5d5738")))
        (sha256
          (base32
            "0ym2bl9dpsglz35is0iwxfw5w7zs9398bkln8lgv28nr6kw0ym4s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("sequences.el")))
    (home-page "unspecified")
    (synopsis
      "Ports of some Clojure sequence functions.")
    (description
      "Documentation at https://melpa.org/#/sequences")
    (license #f)))

(define-public emacs-sequential-command
  (package
    (name "emacs-sequential-command")
    (version "20170926.40")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/sequential-command.git")
               (commit
                 "a48cbcbe273b33edd3ae56e68f44b4100fa3a48a")))
        (sha256
          (base32
            "1f05amz22klvs2yqyw7n5bmivgdn5zc7vkv5x6bgc9b5k977lggj"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el")
    (synopsis "Many commands into one command")
    (description
      "Documentation at https://melpa.org/#/sequential-command")
    (license #f)))

(define-public emacs-serverspec
  (package
    (name "emacs-serverspec")
    (version "20150623.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/emacs-serverspec.git")
               (commit
                 "b6dfe82af9869438de5e5d860ced196641f372c0")))
        (sha256
          (base32
            "1h58q41wixjlapia1ggf83jxcllq7492k55mc0fq7hbx3hw1q1y2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-f emacs-helm))
    (arguments '(#:files ("*.el" "snippets" "dict")))
    (home-page "http://101000lab.org")
    (synopsis "Serverspec minor mode")
    (description
      "Documentation at https://melpa.org/#/serverspec")
    (license #f)))

(define-public emacs-sesman
  (package
    (name "emacs-sesman")
    (version "20210901.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/sesman.git")
               (commit
                 "e0f555f963c9f02f8e4a50e06fc353eb4c15ee77")))
        (sha256
          (base32
            "1xczx6yavpqjx6sjhfnaw7ls5rh54zq8m7y4jidgx4rdz8y28b0a"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vspinu/sesman")
    (synopsis "Generic Session Manager")
    (description
      "Documentation at https://melpa.org/#/sesman")
    (license #f)))

(define-public emacs-sexp-move
  (package
    (name "emacs-sexp-move")
    (version "20150915.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/elzair/sexp-move.git")
               (commit
                 "117f7a91ab7c25e438413753e916570122011ce7")))
        (sha256
          (base32
            "11h5z2gmwq07c4gqzj2c9apksvqk3k8kpbb9kg78bbif2xfajr3m"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/elzair/sexp-move")
    (synopsis "Improved S-Expression Movement")
    (description
      "Documentation at https://melpa.org/#/sexp-move")
    (license #f)))

(define-public emacs-shackle
  (package
    (name "emacs-shackle")
    (version "20211118.1129")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/shackle-"
               version
               ".el"))
        (sha256
          (base32
            "1iscjpkhdkz9s48xj610l1sinqnc3vmf4ams8lv61yw9is8kxqdg"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/shackle")
    (synopsis "Enforce rules for popups")
    (description
      "Documentation at https://melpa.org/#/shackle")
    (license #f)))

(define-public emacs-shampoo
  (package
    (name "emacs-shampoo")
    (version "20131230.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dmatveev/shampoo-emacs.git")
               (commit
                 "bc193c39636c30182159c5c91c37a9a4cb50fedf")))
        (sha256
          (base32
            "15a8gs4lrqxn0jyfw16rc6vm7z1i10pzzlnp30x6nly9a7xra47x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A remote Smalltalk development mode")
    (description
      "Documentation at https://melpa.org/#/shampoo")
    (license #f)))

(define-public emacs-share2computer
  (package
    (name "emacs-share2computer")
    (version "20200316.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/share2computer.git")
               (commit
                 "15da47625a800e3310b8dc714bd4e41e32966d6a")))
        (sha256
          (base32
            "04h8vhg0fxabjlqgfqsvxkgsmkcp5qmcinxg46xib386r7rzrx4g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/share2computer")
    (synopsis
      "Elisp helper of android ShareToComputer")
    (description
      "Documentation at https://melpa.org/#/share2computer")
    (license #f)))

(define-public emacs-shell-current-directory
  (package
    (name "emacs-shell-current-directory")
    (version "20140101.2354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/metaperl/shell-current-directory.git")
               (commit
                 "bf843771bf9a4aa05e054ade799eb8862f3be89a")))
        (sha256
          (base32
            "1w42j5cdddr0riz1xjq3wiz5i9f71i9jdzd1l92ir0mlj05wjyic"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "create new shell based on buffer directory")
    (description
      "Documentation at https://melpa.org/#/shell-current-directory")
    (license #f)))

(define-public emacs-shell-toggle
  (package
    (name "emacs-shell-toggle")
    (version "20150226.1411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/shell-toggle.el.git")
               (commit
                 "0d01bd9a780fdb7fe6609c552523f4498649a3b9")))
        (sha256
          (base32
            "0ssaccdacabpja9nqzhr8x8ggfwmlian7y4p0fa6gvr7qsvjpgr9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/shell-toggle.el")
    (synopsis "Toggle to and from the shell buffer")
    (description
      "Documentation at https://melpa.org/#/shell-toggle")
    (license #f)))

(define-public emacs-shellcop
  (package
    (name "emacs-shellcop")
    (version "20211118.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/shellcop.git")
               (commit
                 "8213452241244b797f84e936e6ccd18b6dec3de5")))
        (sha256
          (base32
            "01kvxvwq1v87125arv7lpmlcbjf84pqcyyxm3lfhvzka25d5ibga"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/redguardtoo/shellcop")
    (synopsis "Analyze info&error in shell-mode")
    (description
      "Documentation at https://melpa.org/#/shellcop")
    (license #f)))

(define-public emacs-shelltest-mode
  (package
    (name "emacs-shelltest-mode")
    (version "20180501.141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rtrn/shelltest-mode.git")
               (commit
                 "5fea8c9394380e822971a171905b6b5ab9be812d")))
        (sha256
          (base32
            "1np65a92n4y9i0nr8wymzn6md9xqmi9qyggya7sz0q4nzsh45wqg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rtrn/shelltest-mode")
    (synopsis "Major mode for shelltestrunner")
    (description
      "Documentation at https://melpa.org/#/shelltest-mode")
    (license #f)))

(define-public emacs-shenshou
  (package
    (name "emacs-shenshou")
    (version "20211103.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/shenshou.git")
               (commit
                 "5b9a400cafbf4778cdb4ab26f7718f8cb0c84705")))
        (sha256
          (base32
            "143b5np4d8vmpdyw1pzxl6xgh6pzfp0phhli0j4wsly83ivcf7w2"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/shenshou")
    (synopsis
      "Download subtitles from opensubtitles.org")
    (description
      "Documentation at https://melpa.org/#/shenshou")
    (license #f)))

(define-public emacs-shift-number
  (package
    (name "emacs-shift-number")
    (version "20170301.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/shift-number.el.git")
               (commit
                 "cd099a5582fc996b800ac7607f6c38a004ce9740")))
        (sha256
          (base32
            "131by7z6303m81kjhy8rnfvwyzfbxglc19xb90jdks4vgczqkcah"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/shift-number.el")
    (synopsis
      "Increase/decrease the number at point")
    (description
      "Documentation at https://melpa.org/#/shift-number")
    (license #f)))

(define-public emacs-shift-text
  (package
    (name "emacs-shift-text")
    (version "20130831.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/shift-text.git")
               (commit
                 "1be9cbf994000022172ceb746fe1d597f57ea8ba")))
        (sha256
          (base32
            "13zsws8gq9a8nfk4yzlvfsvqjh9zbnanmw68rcna93yc5nc634nr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-es-lib))
    (home-page "https://github.com/sabof/shift-text")
    (synopsis
      "Move the region in 4 directions, in a way similar to Eclipse's")
    (description
      "Documentation at https://melpa.org/#/shift-text")
    (license #f)))

(define-public emacs-show-font-mode
  (package
    (name "emacs-show-font-mode")
    (version "20201225.2217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/melissaboiko/show-font-mode.git")
               (commit
                 "8503be7966d3bd8316039b5f49d3c37c7b97d10c")))
        (sha256
          (base32
            "188d6fpi8cws0dhlcpgvvixbmf6045vb1r7psbd3sqciv29xm1yh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/melissaboiko/show-font-mode")
    (synopsis "Show font at point on mode line")
    (description
      "Documentation at https://melpa.org/#/show-font-mode")
    (license #f)))

(define-public emacs-shpec-mode
  (package
    (name "emacs-shpec-mode")
    (version "20150530.922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shpec/shpec-mode.git")
               (commit
                 "146adc8281d0f115df39a3a3f982ac59ab61b754")))
        (sha256
          (base32
            "1mizhbwvnsxxjz6m94qziibvhghhp8v8db3wxrq3z9gsaqqkcndn"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/shpec/shpec-mode")
    (synopsis "Minor mode for shpec specification")
    (description
      "Documentation at https://melpa.org/#/shpec-mode")
    (license #f)))

(define-public emacs-shrface
  (package
    (name "emacs-shrface")
    (version "20210829.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chenyanming/shrface.git")
               (commit
                 "b8a23e097b25d6c7754f9aaf4de89259f8a0b17d")))
        (sha256
          (base32
            "0krd112xglcvkgjl0dj6z4h9gwzh99avh10hlp4idcsm8b7hgdc9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-language-detection))
    (home-page
      "https://github.com/chenyanming/shrface")
    (synopsis
      "Extend shr/eww with org features and analysis capability")
    (description
      "Documentation at https://melpa.org/#/shrface")
    (license #f)))

(define-public emacs-shrink-whitespace
  (package
    (name "emacs-shrink-whitespace")
    (version "20181003.321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jcpetkovich/shrink-whitespace.el.git")
               (commit
                 "0407b89c142bd17e65edb666f35e2c6755bd0867")))
        (sha256
          (base32
            "1qxdi2jm3zl5f55c6irsbnxrmqw039pcm99jafn7hg5z5zc3xhbx"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jcpetkovich/shrink-whitespace.el")
    (synopsis "Whitespace removal DWIM key")
    (description
      "Documentation at https://melpa.org/#/shrink-whitespace")
    (license #f)))

(define-public emacs-sibilant-mode
  (package
    (name "emacs-sibilant-mode")
    (version "20151119.2145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jbr/sibilant-mode.git")
               (commit
                 "bc1b5d8cd597918bafc9b2880ee49024740e54ab")))
        (sha256
          (base32
            "0cjqh6qbbmgxd6zgqnikw6bh8wpjydydkkqs5wcmblpi5awqmnb6"))))
    (build-system melpa-build-system)
    (home-page "http://sibilantjs.info")
    (synopsis
      "Support for the Sibilant programming language")
    (description
      "Documentation at https://melpa.org/#/sibilant-mode")
    (license #f)))

(define-public emacs-sicp
  (package
    (name "emacs-sicp")
    (version "20200512.1137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/webframp/sicp-info.git")
               (commit
                 "4002d83083d520c6b5ede2df36cc2cee885d450a")))
        (sha256
          (base32
            "0c9lknrhwhi4v3qnnzmy0k24d8pr3d3mpxi9xzcxq97f5w1x4fsk"))))
    (build-system melpa-build-system)
    (home-page "https://mitpress.mit.edu/sicp")
    (synopsis
      "Structure and Interpretation of Computer Programs in info format")
    (description
      "Documentation at https://melpa.org/#/sicp")
    (license #f)))

(define-public emacs-side-hustle
  (package
    (name "emacs-side-hustle")
    (version "20210627.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/side-hustle.git")
               (commit
                 "1f4cd5e7cfbabb00c6d87e913770f21e3d16c957")))
        (sha256
          (base32
            "0qcaqfsnw90prch3x1flccanys4bh72x2pdmf27nh5b3i9jbrbv2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/side-hustle")
    (synopsis
      "Hustle through Imenu in a side window")
    (description
      "Documentation at https://melpa.org/#/side-hustle")
    (license #f)))

(define-public emacs-side-notes
  (package
    (name "emacs-side-notes")
    (version "20210709.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/side-notes.git")
               (commit
                 "41fe8544661a772f764a0924e04080f258053955")))
        (sha256
          (base32
            "14xm2a465mgdbp47hwb1dpxw4w5vl0rdlc4m5bxd5z1l4s06nc32"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/side-notes")
    (synopsis
      "Easy access to a directory notes file")
    (description
      "Documentation at https://melpa.org/#/side-notes")
    (license #f)))

(define-public emacs-simple-call-tree
  (package
    (name "emacs-simple-call-tree")
    (version "20210625.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/simple-call-tree.git")
               (commit
                 "26de24bcde0eae911a0185bb5a6b74b9864fcfc3")))
        (sha256
          (base32
            "0589ns2v6jxyd7adjkj34zlcnnxbfs6c7hm56yskbs2s4qkkf369"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-anaphora))
    (home-page
      "http://www.emacswiki.org/emacs/download/simple-call-tree.el")
    (synopsis
      "analyze source code based on font-lock text-properties")
    (description
      "Documentation at https://melpa.org/#/simple-call-tree")
    (license #f)))

(define-public emacs-simple-httpd
  (package
    (name "emacs-simple-httpd")
    (version "20191103.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacs-web-server.git")
               (commit
                 "22ce66ea43e0eadb9ec1d691a35d9695fc29cee6")))
        (sha256
          (base32
            "1ghwfrnml8qmfm981xrrqga2ayw36pqv9s2zqaqzl6szzpwnkz8i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/emacs-http-server")
    (synopsis "pure elisp HTTP server")
    (description
      "Documentation at https://melpa.org/#/simple-httpd")
    (license #f)))

(define-public emacs-simple-modeline
  (package
    (name "emacs-simple-modeline")
    (version "20210312.1048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gexplorer/simple-modeline.git")
               (commit
                 "119d8224a8ae0ee17b09ac1fed6cdb9cb1d048fd")))
        (sha256
          (base32
            "1rnzrx7gcaw056cqvnb1wai4hala0r0gpk3a4kyyghyp9hmrxbb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gexplorer/simple-modeline")
    (synopsis
      "A simple mode-line configuration for Emacs")
    (description
      "Documentation at https://melpa.org/#/simple-modeline")
    (license #f)))

(define-public emacs-simple-rtm
  (package
    (name "emacs-simple-rtm")
    (version "20160222.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mbunkus/simple-rtm.git")
               (commit
                 "8c7cd96cf66ef112be5c363e3378e304f8f83999")))
        (sha256
          (base32
            "1kkhnsxr8zrb21k4ckyg69nsndwy4zdkvfw2drk4v1vnbgx8144f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtm emacs-dash))
    (arguments '(#:files ("lisp/*.el")))
    (home-page "unspecified")
    (synopsis
      "Interactive Emacs mode for Remember The Milk")
    (description
      "Documentation at https://melpa.org/#/simple-rtm")
    (license #f)))

(define-public emacs-simple-screen
  (package
    (name "emacs-simple-screen")
    (version "20200926.109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wachikun/simple-screen.git")
               (commit
                 "3ce535755986f7c25890d11e42fa621a3a069a4f")))
        (sha256
          (base32
            "1cfgmpffqdxg536whik4ph2knxnmbgr4njq744glx82sfy9qp6wx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wachikun/simple-screen")
    (synopsis "Simple screen configuration manager")
    (description
      "Documentation at https://melpa.org/#/simple-screen")
    (license #f)))

(define-public emacs-simplenote
  (package
    (name "emacs-simplenote")
    (version "20141118.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dotemacs/simplenote.el.git")
               (commit
                 "e836fcdb5a6497a9ffd6bceddd19b4bc52189078")))
        (sha256
          (base32
            "0xq4vy3ggdjiycd3aa62k94kd43zcpm8bfdgi8grwkb1lpvwq9i9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Interact with simple-note.appspot.com")
    (description
      "Documentation at https://melpa.org/#/simplenote")
    (license #f)))

(define-public emacs-simplenote2
  (package
    (name "emacs-simplenote2")
    (version "20190321.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha22jp/simplenote2.el.git")
               (commit
                 "760ffecda63bd218876b623f46d332e3ef079be6")))
        (sha256
          (base32
            "1swb6xvdw6dql6wdj8y5kaaicwrafiz5jwnfl5h1viw08b98q8dv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred
            emacs-uuidgen
            emacs-unicode-escape))
    (home-page "unspecified")
    (synopsis "Interact with app.simplenote.com")
    (description
      "Documentation at https://melpa.org/#/simplenote2")
    (license #f)))

(define-public emacs-simplezen
  (package
    (name "emacs-simplezen")
    (version "20130421.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/simplezen.el.git")
               (commit
                 "119fdf2c6890a0c56045ae72cf4fce0071a81481")))
        (sha256
          (base32
            "0108q2b5h73rjxg9k2kmc8z6la9kgqdnz9z1x7rn61v3vbxlzqvn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis
      "A simple subset of zencoding-mode for Emacs.")
    (description
      "Documentation at https://melpa.org/#/simplezen")
    (license #f)))

(define-public emacs-skeletor
  (package
    (name "emacs-skeletor")
    (version "20210129.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/skeletor.el.git")
               (commit
                 "f6e560a0bfe459e0b8a268047920ce1148f2ebf6")))
        (sha256
          (base32
            "0xal5m59z8whrsr6id52gb6f22jy6dp349xvs6xxjdfamj1083r7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash))
    (arguments
      '(#:files
        ("*.el"
         "doc/*.texi"
         "licenses"
         "project-skeletons")))
    (home-page "unspecified")
    (synopsis "Provides project skeletons for Emacs")
    (description
      "Documentation at https://melpa.org/#/skeletor")
    (license #f)))

(define-public emacs-slideview
  (package
    (name "emacs-slideview")
    (version "20150324.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-slideview.git")
               (commit
                 "b6d170bda139aedf81b47dc55cbd1a3af512fb4c")))
        (sha256
          (base32
            "11p1pghx55a4gcn45cadw7c594134b21cdim723k2h99z14f89az"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-slideview")
    (synopsis "File slideshow")
    (description
      "Documentation at https://melpa.org/#/slideview")
    (license #f)))

(define-public emacs-slime-docker
  (package
    (name "emacs-slime-docker")
    (version "20210426.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cl-docker-images/slime-docker.git")
               (commit
                 "c7d073720f2bd8e9f72a20309fff2afa4c4e798d")))
        (sha256
          (base32
            "03jm0964qqggqia2fkvqgrx8r4knj1qgqr8vimr0x4q2j73lj12a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-slime emacs-docker-tramp))
    (arguments
      '(#:files (:defaults "bin" "resources")))
    (home-page
      "https://gitlab.common-lisp.net/cl-docker-images/slime-docker")
    (synopsis
      "Integration of SLIME with Docker containers")
    (description
      "Documentation at https://melpa.org/#/slime-docker")
    (license #f)))

(define-public emacs-slime-volleyball
  (package
    (name "emacs-slime-volleyball")
    (version "20190701.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fitzsim/slime-volleyball.git")
               (commit
                 "f36a84f3c503c46ba0d011874d387a34b01c6bf6")))
        (sha256
          (base32
            "12r1agaz2d0i6ig4ry83bnxcj9bkmfhd6my3fjna2d45j4isybxn"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "*.gz" "*.svg" "*.b64")))
    (home-page "unspecified")
    (synopsis "An SVG Slime Volleyball Game")
    (description
      "Documentation at https://melpa.org/#/slime-volleyball")
    (license #f)))

(define-public emacs-slirm
  (package
    (name "emacs-slirm")
    (version "20160201.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fbie/slirm.git")
               (commit
                 "9adfbe1fc67580e7d0d90f7e927a25d63a797464")))
        (sha256
          (base32
            "0srj0zcvzr0sjcs37zz11xz8w0yv94m69av9ny7mx8ssf4qp0pxa"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/fbie/slirm")
    (synopsis
      "Systematic Literature Review Mode for Emacs.")
    (description
      "Documentation at https://melpa.org/#/slirm")
    (license #f)))

(define-public emacs-slurm-mode
  (package
    (name "emacs-slurm-mode")
    (version "20210519.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/slurm.el.git")
               (commit
                 "589826fbb07f625b23c322df1cc16377c4fe6f66")))
        (sha256
          (base32
            "12plxmslrpx4b2aqh66zdhrmf41a6n6iaqbvsx42dk04caxfjp7m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ffevotte/slurm.el")
    (synopsis
      "Interaction with the SLURM job scheduling system")
    (description
      "Documentation at https://melpa.org/#/slurm-mode")
    (license #f)))

(define-public emacs-sly-asdf
  (package
    (name "emacs-sly-asdf")
    (version "20210407.600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmgeorge/sly-asdf.git")
               (commit
                 "95ca71ddeb6132c413e1e4352b136f41ed9254f1")))
        (sha256
          (base32
            "1dvjwdan3qd3x716zgziy5vbq2972rz8pdqi7b40haqg01f33qf4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly emacs-popup))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/mmgeorge/sly-asdf")
    (synopsis "ASDF system support for SLY")
    (description
      "Documentation at https://melpa.org/#/sly-asdf")
    (license #f)))

(define-public emacs-smart-backspace
  (package
    (name "emacs-smart-backspace")
    (version "20171014.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/itome/smart-backspace.git")
               (commit
                 "a10ec44ff325ec8c4c98b1a6e44e89e60a9aa4ac")))
        (sha256
          (base32
            "0p19qikalmvs9y1lws08mxvh2k8s219mpm3nyi9aqq62ryyfwf1n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/itome/smart-backspace")
    (synopsis "intellj like backspace")
    (description
      "Documentation at https://melpa.org/#/smart-backspace")
    (license #f)))

(define-public emacs-smart-comment
  (package
    (name "emacs-smart-comment")
    (version "20160322.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paldepind/smart-comment.git")
               (commit
                 "17ddbd83205818763e6d68aa7a1aa9aaf414cbd4")))
        (sha256
          (base32
            "0r181rdnymr96kj74c73212n6157cfiq1d6hk2lfc54yl6h76zf4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "smarter commenting")
    (description
      "Documentation at https://melpa.org/#/smart-comment")
    (license #f)))

(define-public emacs-smart-forward
  (package
    (name "emacs-smart-forward")
    (version "20140430.713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/smart-forward.el.git")
               (commit
                 "7b6dbfdbd4b646376a567c70e1a161545431b72b")))
        (sha256
          (base32
            "19l47xqzjhhm9j3izik0imssip5ygg3lnflb9ixsz1js571aaxha"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis "Semantic navigation")
    (description
      "Documentation at https://melpa.org/#/smart-forward")
    (license #f)))

(define-public emacs-smart-newline
  (package
    (name "emacs-smart-newline")
    (version "20131208.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ainame/smart-newline.el.git")
               (commit
                 "0553a9e4be7188352de1a28f2eddfd28e7436f94")))
        (sha256
          (base32
            "0w0v3gzfg3cphz701g30sf7l92v3npsd7028pjp5g7rgv3pwkgsd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provide smart newline for one keybind.")
    (description
      "Documentation at https://melpa.org/#/smart-newline")
    (license #f)))

(define-public emacs-smart-shift
  (package
    (name "emacs-smart-shift")
    (version "20150203.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hbin/smart-shift.git")
               (commit
                 "a26ab2b240137e62ec4bce1698ed9c5f7b6d13ae")))
        (sha256
          (base32
            "0azhfffm1bkgjx4i3p9f6x2gmw8kc3fafzqj4vxxdibhn0nizqk8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/hbin/smart-shift")
    (synopsis "Smart shift text left/right.")
    (description
      "Documentation at https://melpa.org/#/smart-shift")
    (license #f)))

(define-public emacs-smart-window
  (package
    (name "emacs-smart-window")
    (version "20160717.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dryman/smart-window.el.git")
               (commit
                 "5996461b7cbc5ab4509ac48537916eb29a8e4c16")))
        (sha256
          (base32
            "0p1cqpdsp2vdx85i22shyzfhz22zwf1k1dxkqcmlgh3y7f4qq8ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dryman/smart-window.el")
    (synopsis "vim-like window controlling plugin")
    (description
      "Documentation at https://melpa.org/#/smart-window")
    (license #f)))

(define-public emacs-smartrep
  (package
    (name "emacs-smartrep")
    (version "20150509.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/smartrep.el.git")
               (commit
                 "f0ff5a6d7b8603603598ae3045c98b011e58d86e")))
        (sha256
          (base32
            "1sjwqi8w83qxihqmcm7z0vwmrz1az0y266qgj2nwfv39bri6y4i6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myuhe/smartrep.el")
    (synopsis
      "Support sequential operation which omitted prefix keys.")
    (description
      "Documentation at https://melpa.org/#/smartrep")
    (license #f)))

(define-public emacs-smbc
  (package
    (name "emacs-smbc")
    (version "20171229.1808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sakshamsharma/emacs-smbc.git")
               (commit
                 "10538e3d575ba6ef3c94d555af2744b42dfd36c7")))
        (sha256
          (base32
            "0b2fndvp9kzlr65b0gr0z5hmapa4y96a6zvc2nrlijffkgyk05nn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sakshamsharma/emacs-smbc")
    (synopsis "View SMBC from Emacs")
    (description
      "Documentation at https://melpa.org/#/smbc")
    (license #f)))

(define-public emacs-smooth-scroll
  (package
    (name "emacs-smooth-scroll")
    (version "20130322.414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k-talo/smooth-scroll.el.git")
               (commit
                 "02320f28abb5cae28b3a18f6b9ce93129bdbfc45")))
        (sha256
          (base32
            "1kkg7qhb2lmwr4siiazqny9w2z9nk799lzl5i159lfivlxcgixmk"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/smooth-scroll.el")
    (synopsis
      "Minor mode for smooth scrolling and in-place scrolling.")
    (description
      "Documentation at https://melpa.org/#/smooth-scroll")
    (license #f)))

(define-public emacs-smooth-scrolling
  (package
    (name "emacs-smooth-scrolling")
    (version "20161002.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aspiers/smooth-scrolling.git")
               (commit
                 "2462c13640aa4c75ab3ddad443fedc29acf68f84")))
        (sha256
          (base32
            "1h15gjq781i6fsz32qlh51knawdr8hcqvshsz6cszp752cibdcdg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aspiers/smooth-scrolling/")
    (synopsis "Make emacs scroll smoothly")
    (description
      "Documentation at https://melpa.org/#/smooth-scrolling")
    (license #f)))

(define-public emacs-smotitah
  (package
    (name "emacs-smotitah")
    (version "20150218.1030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/smotitah.git")
               (commit
                 "f9ab562128a5460549d016913533778e8c94bcf3")))
        (sha256
          (base32
            "1a097f1x9l0m4dizvnb742svlqsm6hlif73rk7qjar081sk1gjxx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "templates")))
    (home-page "unspecified")
    (synopsis
      "Modular emacs configuration framework")
    (description
      "Documentation at https://melpa.org/#/smotitah")
    (license #f)))

(define-public emacs-snitch
  (package
    (name "emacs-snitch")
    (version "20210202.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrmekon/snitch-el.git")
               (commit
                 "3b3e7f1bf612c4624764d1ec4b1a96e4d2850b05")))
        (sha256
          (base32
            "00r36xjglp7d1gkxkqlymqjkd8pmr5g0bg468xq9s5hp7g5md4ig"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrmekon/snitch-el")
    (synopsis "An Emacs firewall")
    (description
      "Documentation at https://melpa.org/#/snitch")
    (license #f)))

(define-public emacs-soar-mode
  (package
    (name "emacs-soar-mode")
    (version "20190503.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adeschamps/soar-mode.git")
               (commit
                 "13b6fca62ea6574d230516fddf359a61f6558ecd")))
        (sha256
          (base32
            "1y1z4lyv1b56sfimfpxzix5zww97hbci8a9q4cphx65hwkgbfa0d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/adeschamps/soar-mode")
    (synopsis "A major mode for the Soar language")
    (description
      "Documentation at https://melpa.org/#/soar-mode")
    (license #f)))

(define-public emacs-soft-morning-theme
  (package
    (name "emacs-soft-morning-theme")
    (version "20150918.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/soft-morning-theme.git")
               (commit
                 "c0f9c70c97ef2be2a093cf839c4bfe27740a111c")))
        (sha256
          (base32
            "06q82v1hndvznsqg0r6jrxvgxhycg9m65kay4db4yy0gmc66v2xf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/soft-morning-theme")
    (synopsis
      "Emacs24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/soft-morning-theme")
    (license #f)))

(define-public emacs-solaire-mode
  (package
    (name "emacs-solaire-mode")
    (version "20211213.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-solaire-mode.git")
               (commit
                 "8af65fbdc50b25ed3214da949b8a484527c7cc14")))
        (sha256
          (base32
            "1lkm09wznal0grpz61ikc77mjrri1x1bi79qwyf1cah9s0wv3isq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hlissner/emacs-solaire-mode")
    (synopsis
      "make certain buffers grossly incandescent")
    (description
      "Documentation at https://melpa.org/#/solaire-mode")
    (license #f)))

(define-public emacs-sound-wav
  (package
    (name "emacs-sound-wav")
    (version "20200323.728")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sound-wav.git")
               (commit
                 "8a18f8a62f4fdde80dfa069986aa959091a42472")))
        (sha256
          (base32
            "18iahla8m9b6bdn63x2yrvr3rzyw5ybipf44q9avyy6s1pqsby2a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page
      "https://github.com/syohex/emacs-sound-wav")
    (synopsis "Play wav file")
    (description
      "Documentation at https://melpa.org/#/sound-wav")
    (license #f)))

(define-public emacs-soundcloud
  (package
    (name "emacs-soundcloud")
    (version "20150502.326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thieman/soundcloud.el.git")
               (commit
                 "f998d4276ea90258909c698f6a5a51fccb667c08")))
        (sha256
          (base32
            "1m8wcm6y80gq5rrm4brd3f20kmk54s6ph26j4lz4cmilxk6gj56v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emms
            emacs-deferred
            emacs-string-utils
            emacs-request
            emacs-request-deferred))
    (home-page "unspecified")
    (synopsis "a SoundCloud client for Emacs")
    (description
      "Documentation at https://melpa.org/#/soundcloud")
    (license #f)))

(define-public emacs-sourcemap
  (package
    (name "emacs-sourcemap")
    (version "20200315.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sourcemap.git")
               (commit
                 "bb2a56b2feb62b0c77d7f03ef2acd94f91be6b3f")))
        (sha256
          (base32
            "1qr5syl2wm7z1gkgafdhch6n7fg3qc09k8dhv983kq4vg5kp36ml"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-sourcemap")
    (synopsis "Sourcemap parser")
    (description
      "Documentation at https://melpa.org/#/sourcemap")
    (license #f)))

(define-public emacs-spaceline-all-the-icons
  (package
    (name "emacs-spaceline-all-the-icons")
    (version "20190325.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/spaceline-all-the-icons.el.git")
               (commit
                 "5afd48c10f1bd42d9b9648c5e64596b72f3e9042")))
        (sha256
          (base32
            "1chv6lv216qa88fm2wil45x19dzahcclr9p5vizcziq180dnmass"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons
            emacs-spaceline
            emacs-memoize))
    (home-page
      "https://github.com/domtronn/spaceline-all-the-icons.el")
    (synopsis
      "A Spaceline theme using All The Icons")
    (description
      "Documentation at https://melpa.org/#/spaceline-all-the-icons")
    (license #f)))

(define-public emacs-spacemacs-theme
  (package
    (name "emacs-spacemacs-theme")
    (version "20210924.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nashamri/spacemacs-theme.git")
               (commit
                 "e5ed346b9c31f0b43eb359614efd9aa439e1d18d")))
        (sha256
          (base32
            "1d9554sbyg7y2a07dn2v4y8wms60kr1lpdgy4mq7wgm5kxzi8v85"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Color theme with a dark and light versions")
    (description
      "Documentation at https://melpa.org/#/spacemacs-theme")
    (license #f)))

(define-public emacs-sparkline
  (package
    (name "emacs-sparkline")
    (version "20150101.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/woudshoo/sparkline.git")
               (commit
                 "a2b5d817d272d6363b67ed8f8cc75499a19fa8d2")))
        (sha256
          (base32
            "1fqd3ycywxxmln2kzqwflc69xmqlvi9gwvmf7frn0rfv73w09cvp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Make sparkline images from a list of numbers")
    (description
      "Documentation at https://melpa.org/#/sparkline")
    (license #f)))

(define-public emacs-spell-fu
  (package
    (name "emacs-spell-fu")
    (version "20211121.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-spell-fu.git")
               (commit
                 "b2da2874f3227c0a969be80946e0c4ea455e8458")))
        (sha256
          (base32
            "1rbczz0i2jddh96ln65kf1gji7rg28lr1kh03p4py46vn6bm9xpd"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-spell-fu")
    (synopsis "Fast & light spelling highlighter")
    (description
      "Documentation at https://melpa.org/#/spell-fu")
    (license #f)))

(define-public emacs-sphinx-doc
  (package
    (name "emacs-sphinx-doc")
    (version "20210213.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/naiquevin/sphinx-doc.el.git")
               (commit
                 "1eda612a44ef027e5229895daa77db99a21b8801")))
        (sha256
          (base32
            "0q72i95yx3xa57jlgr7dik6prf20hi8bp8xf3f5c6ificv7i5378"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/naiquevin/sphinx-doc.el")
    (synopsis
      "Sphinx friendly docstrings for Python functions")
    (description
      "Documentation at https://melpa.org/#/sphinx-doc")
    (license #f)))

(define-public emacs-spice-mode
  (package
    (name "emacs-spice-mode")
    (version "20190608.1033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/spice-mode.git")
               (commit
                 "e5e0644f03f9696f56dd69e2b6979da7f30ed600")))
        (sha256
          (base32
            "01905cdplj9icbxzr7sqb62x5qchzgvs8qjf5s4qga4x3vjh1dc4"))))
    (build-system melpa-build-system)
    (home-page "http://spice-mode.4t.com/")
    (synopsis "Major mode for SPICE")
    (description
      "Documentation at https://melpa.org/#/spice-mode")
    (license #f)))

(define-public emacs-spiral
  (package
    (name "emacs-spiral")
    (version "20180223.1140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/volrath/spiral.git")
               (commit
                 "907b9792467139a942ba7b07ca0276b90770baf9")))
        (sha256
          (base32
            "1rggzzvya26abbzd8bc2kpv59kzgm75wqv1vwqnj9c8im1jvs1na"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-a
            emacs-avy
            emacs-clojure-mode
            emacs-highlight
            emacs-treepy))
    (arguments
      '(#:files
        (:defaults
          "blob.clj"
          "tools"
          "parseclj/parseclj.el"
          "parseclj/parseedn.el"
          "parseclj/parseclj-parser.el"
          "parseclj/parseclj-lex.el"
          "parseclj/parseclj-ast.el")))
    (home-page "https://github.com/Unrepl/spiral")
    (synopsis "Clojure IDE based on UNREPL")
    (description
      "Documentation at https://melpa.org/#/spiral")
    (license #f)))

(define-public emacs-splitter
  (package
    (name "emacs-splitter")
    (version "20170809.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/chumpy-windows.git")
               (commit
                 "6bdb51e9a346907d60a9625f6180bddd06be6674")))
        (sha256
          (base32
            "1wkyvfqmf24c8kb162pwi6wcm88bzf0x9mxljzkx0s8bq9aliny6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("splitter.el")))
    (home-page
      "https://github.com/chumpage/chumpy-windows")
    (synopsis "Manage window splits")
    (description
      "Documentation at https://melpa.org/#/splitter")
    (license #f)))

(define-public emacs-spotify
  (package
    (name "emacs-spotify")
    (version "20200615.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/spotify-el.git")
               (commit
                 "7e28ef0b4519c6a46fce6a89c0ff1ed775eda71a")))
        (sha256
          (base32
            "0mi8g6ryjg7czrr6fchwq9459ijd5c9wsvj3s9j0l0w4jcyxrvrd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/spotify-el")
    (synopsis
      "Control the spotify application from emacs")
    (description
      "Documentation at https://melpa.org/#/spotify")
    (license #f)))

(define-public emacs-spotlight
  (package
    (name "emacs-spotlight")
    (version "20200109.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benmaughan/spotlight.el.git")
               (commit
                 "ea71f4fd380c51e50c47bb25855af4f40e4d8da0")))
        (sha256
          (base32
            "1dda4gwxyhnr73ckjr70yjah9dmddvyfcwlrbb6d6bidb70ib0dj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper emacs-counsel))
    (home-page "http://www.pragmaticemacs.com")
    (synopsis "search files with Mac OS X spotlight")
    (description
      "Documentation at https://melpa.org/#/spotlight")
    (license #f)))

(define-public emacs-spray
  (package
    (name "emacs-spray")
    (version "20160304.2220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~iank/spray")
               (commit
                 "74d9dcfa2e8b38f96a43de9ab0eb13364300cb46")))
        (sha256
          (base32
            "1avbfr32dvff26kgvd5vgan99nb5c6al9kv5xbmy2rcls17py7r2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ian-kelling/spray")
    (synopsis "a speed reading mode")
    (description
      "Documentation at https://melpa.org/#/spray")
    (license #f)))

(define-public emacs-sproto-mode
  (package
    (name "emacs-sproto-mode")
    (version "20151115.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m2q1n9/sproto-mode.git")
               (commit
                 "0583a88273204dccd884b7edaa3590cefd31e7f7")))
        (sha256
          (base32
            "11igl9n2zwwar1xg651g5v0r0w6xl0grm8xns9wg80351ijrci7x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for editing sproto.")
    (description
      "Documentation at https://melpa.org/#/sproto-mode")
    (license #f)))

(define-public emacs-sprunge
  (package
    (name "emacs-sprunge")
    (version "20160301.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomjakubowski/sprunge.el.git")
               (commit
                 "0fd386b8b29c4175022a04ad70ea5643185b6726")))
        (sha256
          (base32
            "03wjzk1ljclfjgqzkg6m7v8saaajgavyd0xskd8fg8rdkx13ki0l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis "Upload pastes to sprunge.us")
    (description
      "Documentation at https://melpa.org/#/sprunge")
    (license #f)))

(define-public emacs-sql-clickhouse
  (package
    (name "emacs-sql-clickhouse")
    (version "20191209.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rschwarz/sql-clickhouse.git")
               (commit
                 "8403a4a5d332dbb6459b7fbce6ea95c36d390a5b")))
        (sha256
          (base32
            "0c039m67jc2xq9pmn0xmqr07nzdssc4vbk51ng0272kcs9mbslrf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leethargo/sql-clickhouse")
    (synopsis
      "support ClickHouse as SQL interpreter")
    (description
      "Documentation at https://melpa.org/#/sql-clickhouse")
    (license #f)))

(define-public emacs-sql-impala
  (package
    (name "emacs-sql-impala")
    (version "20181218.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jterk/sql-impala.git")
               (commit
                 "466e7c0c789ec3e5e8a276c8f6754f91bb584c3e")))
        (sha256
          (base32
            "02psgbm06wivdm2cmjnj2vy05lnljxn44hj2arw2fr7x2qwn9r35"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jterk/sql-impala")
    (synopsis "comint support for Cloudera Impala")
    (description
      "Documentation at https://melpa.org/#/sql-impala")
    (license #f)))

(define-public emacs-sql-sqlline
  (package
    (name "emacs-sql-sqlline")
    (version "20201102.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matteoredaelli/sql-sqlline.git")
               (commit
                 "38baf140cae26f9d93fc45d5eaff7d5c7f050bff")))
        (sha256
          (base32
            "1parczkwng2bfqmnj19dc4rmm69srvv1wysf0258xkdcb3kvppzx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("artifacts/*.el")))
    (home-page
      "https://gitlab.com/matteoredaelli/sql-sqlline")
    (synopsis "Adds SQLLine support to SQLi mode")
    (description
      "Documentation at https://melpa.org/#/sql-sqlline")
    (license #f)))

(define-public emacs-sqlup-mode
  (package
    (name "emacs-sqlup-mode")
    (version "20170610.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Trevoke/sqlup-mode.el.git")
               (commit
                 "3f9df9c88d6a7f9b1ae907e401cad8d3d7d63bbf")))
        (sha256
          (base32
            "1crah9h86m5sdc7panj98ws9cv2as6kh9syal8m1p7rhimgvdx1v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/trevoke/sqlup-mode.el")
    (synopsis "Upcase SQL words for you")
    (description
      "Documentation at https://melpa.org/#/sqlup-mode")
    (license #f)))

(define-public emacs-srcery-theme
  (package
    (name "emacs-srcery-theme")
    (version "20210601.1247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/srcery-colors/srcery-emacs.git")
               (commit
                 "58dd21cd63e4a2eed15e0082c2547069363f107b")))
        (sha256
          (base32
            "128ri2g7jjgpacvaxhwwv4f2h3kdzf5vv3p01yqbs23m8mri8d9w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/srcery-colors/srcery-emacs")
    (synopsis "Dark color theme")
    (description
      "Documentation at https://melpa.org/#/srcery-theme")
    (license #f)))

(define-public emacs-srefactor
  (package
    (name "emacs-srefactor")
    (version "20180703.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/semantic-refactor.git")
               (commit
                 "6f2c97d17fb70f4ca2112f5a2b99a8ec162004f5")))
        (sha256
          (base32
            "1lyz3zjkx2csh0xdy1zpx8s32qp1p3sig57mwi9xhgpqjyf0axmb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tuhdo/semantic-refactor")
    (synopsis
      "A refactoring tool based on Semantic parser framework")
    (description
      "Documentation at https://melpa.org/#/srefactor")
    (license #f)))

(define-public emacs-ssh-tunnels
  (package
    (name "emacs-ssh-tunnels")
    (version "20190622.931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/death/ssh-tunnels.git")
               (commit
                 "d32e2072f50bcbde787196abb5862735837dc8be")))
        (sha256
          (base32
            "1i0wmdv0pglsz1pbhfjrpr1q6sxh1q74s41vnjxk5r2q8p1fh69n"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/death/ssh-tunnels")
    (synopsis "Manage SSH tunnels")
    (description
      "Documentation at https://melpa.org/#/ssh-tunnels")
    (license #f)))

(define-public emacs-standard-dirs
  (package
    (name "emacs-standard-dirs")
    (version "20200621.1603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lafrenierejm/standard-dirs.el.git")
               (commit
                 "92460e21f964cb7495d974c42acd0b726af3fbcb")))
        (sha256
          (base32
            "1vxgg1gs2ma2c121dgqg9vnzcacb7dxdkxlwdxg0dkivnqicxiyg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "https://github.com/lafrenierejm/standard-dirs.el")
    (synopsis
      "Platform-specific paths for config, cache, and other data")
    (description
      "Documentation at https://melpa.org/#/standard-dirs")
    (license #f)))

(define-public emacs-standoff-mode
  (package
    (name "emacs-standoff-mode")
    (version "20210810.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lueck/standoff-mode.git")
               (commit
                 "aa5bac257ebefd91f4b5dd787a835407bddd6fb2")))
        (sha256
          (base32
            "1zpvbsrmcz9zhlchfsbsfbi3g9z1wxhkhbpg2zp2dpk4czqy76lk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lueck/standoff-mode")
    (synopsis
      "Create stand-off markup, also called external markup.")
    (description
      "Documentation at https://melpa.org/#/standoff-mode")
    (license #f)))

(define-public emacs-start-menu
  (package
    (name "emacs-start-menu")
    (version "20160426.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-start-menu.git")
               (commit
                 "f7d33fed7ad2dc61156f1c1cff9e1805366fbd69")))
        (sha256
          (base32
            "1w3l8ahal9hjisny382bcw9w1nh2swpb1jzf2djww5h0i4r2h36c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-config-parser))
    (home-page
      "https://github.com/lujun9972/el-start-menu")
    (synopsis
      "start-menu for executing external program like in windows")
    (description
      "Documentation at https://melpa.org/#/start-menu")
    (license #f)))

(define-public emacs-stash
  (package
    (name "emacs-stash")
    (version "20151117.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/stash.el.git")
               (commit
                 "c2e494d20c752b80ebbdffbf66687b3cdfc425ad")))
        (sha256
          (base32
            "0cl2y72iagmv87kg72a46a3kap2xigwnrbk2hjgvsbxv2ng5f9cr"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/vermiculus/stash.el/")
    (synopsis "lightweight persistent caching")
    (description
      "Documentation at https://melpa.org/#/stash")
    (license #f)))

(define-public emacs-state
  (package
    (name "emacs-state")
    (version "20200727.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/state.git")
               (commit
                 "8cd9210f17c1b134274a7352b996839aed9a7d8c")))
        (sha256
          (base32
            "04h8n2wy9qr4bskq9znhadcf02wk4ydhyaaq44yvh55hzmn6gm25"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/state.git")
    (synopsis "Quick navigation between workspaces")
    (description
      "Documentation at https://melpa.org/#/state")
    (license #f)))

(define-public emacs-stem
  (package
    (name "emacs-stem")
    (version "20131102.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/stem.git")
               (commit
                 "d74e6611d6ba5025e0276a2cc7c8a90f46bfa9ac")))
        (sha256
          (base32
            "1xc4v8a35c2vpfhza15j4f89x7vyg9bbgm7xnprij7814k8iy7p0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/yuutayamada/stem")
    (synopsis "Routines for stemming")
    (description
      "Documentation at https://melpa.org/#/stem")
    (license #f)))

(define-public emacs-stem-english
  (package
    (name "emacs-stem-english")
    (version "20180109.358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/stem-english.git")
               (commit
                 "c9fc4c6ed6bf82382e479dae80912f4ae17d31f4")))
        (sha256
          (base32
            "1bkmgjfp7xir6d0yf782xkjvf595blrqhr3hack26jg5zl8qsrya"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kawabata/stem-english")
    (synopsis "- routines for stemming English word")
    (description
      "Documentation at https://melpa.org/#/stem-english")
    (license #f)))

(define-public emacs-stickyfunc-enhance
  (package
    (name "emacs-stickyfunc-enhance")
    (version "20150429.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/semantic-stickyfunc-enhance.git")
               (commit
                 "13bdba51fcd83ccbc3267959d23afc94d458dcb0")))
        (sha256
          (base32
            "16dxjsr5nj20blww4xpd4jzgjprzzh1nwvb810ggdmp9paf4iy0g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tuhdo/semantic-stickyfunc-enhance")
    (synopsis
      "An enhancement to stock `semantic-stickyfunc-mode'")
    (description
      "Documentation at https://melpa.org/#/stickyfunc-enhance")
    (license #f)))

(define-public emacs-stimmung-themes
  (package
    (name "emacs-stimmung-themes")
    (version "20210920.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motform/stimmung-themes.git")
               (commit
                 "caf1c099ee5da59c6686af99c36eb846ebb7a610")))
        (sha256
          (base32
            "112l5g5s71r8krbcx03xgm18v5lm3r4dz10a3qss27s2m6a1y8i5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/motform/stimmung-themes")
    (synopsis "Themes tuned to inner harmonies")
    (description
      "Documentation at https://melpa.org/#/stimmung-themes")
    (license #f)))

(define-public emacs-streamlink
  (package
    (name "emacs-streamlink")
    (version "20210811.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BenediktBroich/streamlink.git")
               (commit
                 "c265dc61c02ad29ec01dfd8b5cbe3bac60fbf097")))
        (sha256
          (base32
            "1v6xr9x82m7f43zd228158pr6cwy90lfg8i68w67n6svj2gx19vp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/BenediktBroich/streamlink")
    (synopsis "A major mode for streamlink output")
    (description
      "Documentation at https://melpa.org/#/streamlink")
    (license #f)))

(define-public emacs-string-edit
  (package
    (name "emacs-string-edit")
    (version "20210405.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/string-edit.el.git")
               (commit
                 "0e225df6f8740467231c787a50025e4552b3eddb")))
        (sha256
          (base32
            "1x5b3iq1c25c74jb77qw3zijblp6zx9kp9hzsb0wfx66lp4wn2wi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("string-edit.el")))
    (home-page "unspecified")
    (synopsis
      "Avoid escape nightmares by editing string in separate buffer")
    (description
      "Documentation at https://melpa.org/#/string-edit")
    (license #f)))

(define-public emacs-string-utils
  (package
    (name "emacs-string-utils")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/string-utils.git")
               (commit
                 "c2232d691617973ecf12a970c6008a161c21da14")))
        (sha256
          (base32
            "1frdspm1qgksa8cpx5gkj50xk9mgz8202pgp11lqir6l3yjcj3wq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-list-utils))
    (home-page
      "http://github.com/rolandwalker/string-utils")
    (synopsis "String-manipulation utilities")
    (description
      "Documentation at https://melpa.org/#/string-utils")
    (license #f)))

(define-public emacs-stripe-buffer
  (package
    (name "emacs-stripe-buffer")
    (version "20141208.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/stripe-buffer.git")
               (commit
                 "c252080f55cb78c951b19ebab9687f6d00237baf")))
        (sha256
          (base32
            "0dxajh72wdcwdb9ydbcm19fmp0p1drmh1niq4r69jnbn8sah0zax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sabof/stripe-buffer")
    (synopsis
      "Use a different background for even and odd lines")
    (description
      "Documentation at https://melpa.org/#/stripe-buffer")
    (license #f)))

(define-public emacs-stumpwm-mode
  (package
    (name "emacs-stumpwm-mode")
    (version "20140131.216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.savannah.nongnu.org/git/stumpwm.git")
               (commit
                 "61a7cf27e49e0779a53c018b2342f5f1c5cc70b4")))
        (sha256
          (base32
            "03is0690p7aw77c30j4r2b5gi5rv5f70wvpixy5qhcchlaxhaw82"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("contrib/stumpwm-mode.el")))
    (home-page "unspecified")
    (synopsis
      "special lisp mode for evaluating code into running stumpwm")
    (description
      "Documentation at https://melpa.org/#/stumpwm-mode")
    (license #f)))

(define-public emacs-stylefmt
  (package
    (name "emacs-stylefmt")
    (version "20161025.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KeenS/stylefmt.el.git")
               (commit
                 "7a38f26bf8ff947215f34f0a064c7ca80575ccbc")))
        (sha256
          (base32
            "0cx9llbmfjhaxb60mj483ihl78xb30ldvhd1hdldmc9d473xbvmz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/KeenS/stylefmt.el")
    (synopsis "Stylefmt interface")
    (description
      "Documentation at https://melpa.org/#/stylefmt")
    (license #f)))

(define-public emacs-su
  (package
    (name "emacs-su")
    (version "20210721.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/su.el.git")
               (commit
                 "1ecf7a7bbf9d88708eb2215e940753f8d6bccc92")))
        (sha256
          (base32
            "1994ypxz5zgrpdd5v61znf41c0dn4favab560wkgfnhhzrc1jgkf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/PythonNut/su.el")
    (synopsis
      "Automatically read and write files using su or sudo")
    (description
      "Documentation at https://melpa.org/#/su")
    (license #f)))

(define-public emacs-subatomic-theme
  (package
    (name "emacs-subatomic-theme")
    (version "20190607.1022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cryon/subatomic-theme.git")
               (commit
                 "a13cdac97a6d0488b13bc36d4c2f4d4102ff6a31")))
        (sha256
          (base32
            "1l7yvplvjfcv1d1ij0inijm47nx42d3r00w43xjqnyhk9rrvazh1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cryon/subatomic")
    (synopsis "Low contrast bluish color theme")
    (description
      "Documentation at https://melpa.org/#/subatomic-theme")
    (license #f)))

(define-public emacs-sublimity
  (package
    (name "emacs-sublimity")
    (version "20200905.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/sublimity.git")
               (commit
                 "8e2ffc4d62194106130014531e7b54fc9b4b9e6c")))
        (sha256
          (base32
            "0lx0kyzsjn9dhahyi3smcg6hykralrn09mnnn8x74mbpdv4alwrv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zk-phi/sublimity")
    (synopsis
      "smooth-scrolling, minimap and distraction-free mode")
    (description
      "Documentation at https://melpa.org/#/sublimity")
    (license #f)))

(define-public emacs-subsonic
  (package
    (name "emacs-subsonic")
    (version "20211201.939")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~amk/subsonic.el")
               (commit
                 "ee2b1f20521e647472be7553242eb2253809e1d1")))
        (sha256
          (base32
            "1j8q47vvvsdfb9hg2r72dgmg2a886aa15yrvi6ahp7g5z4jmp19k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient))
    (home-page "https://git.sr.ht/~amk/subsonic.el")
    (synopsis
      "Browse and play music from subsonic servers with mpv")
    (description
      "Documentation at https://melpa.org/#/subsonic")
    (license #f)))

(define-public emacs-sudo-ext
  (package
    (name "emacs-sudo-ext")
    (version "20170126.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/sudo-ext.git")
               (commit
                 "9d4580f304121ce7b8104bd4bd3b64e4dfa3c9b3")))
        (sha256
          (base32
            "1m9srlxavqg6yxmz6rz61saz1lj5hh029314dic8kh6g3bqdnh2w"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el")
    (synopsis "sudo support")
    (description
      "Documentation at https://melpa.org/#/sudo-ext")
    (license #f)))

(define-public emacs-sudo-utils
  (package
    (name "emacs-sudo-utils")
    (version "20210119.1930")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha-catharsis/sudo-utils.git")
               (commit
                 "089f7833fa256f293284a6286bf9cb2b78eff40d")))
        (sha256
          (base32
            "03kks8sqw1j8ywzk3bvcb8i6v3px5zr05c4pnrwmls724m79sagd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alpha-catharsis/sudo-utils")
    (synopsis "Sudo utilities")
    (description
      "Documentation at https://melpa.org/#/sudo-utils")
    (license #f)))

(define-public emacs-sudoku
  (package
    (name "emacs-sudoku")
    (version "20191015.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zevlg/sudoku.el.git")
               (commit
                 "b1924fd244a5fa284de9d67b66fbd69164b37318")))
        (sha256
          (base32
            "19i3rrz4qnc9i845j0bbmps69372rry7gadcyj06gvq2hf9dy3nh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Simple sudoku game, can download puzzles")
    (description
      "Documentation at https://melpa.org/#/sudoku")
    (license #f)))

(define-public emacs-suggestion-box
  (package
    (name "emacs-suggestion-box")
    (version "20170830.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/suggestion-box-el.git")
               (commit
                 "50af0776c8caf3c79c4d37fd51cbf304ea34b68e")))
        (sha256
          (base32
            "01lx20kzay5504xcq6m6yhvayyd7wpzaa1r6i67xqjnr25lqyajw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page "unspecified")
    (synopsis "show tooltip on the cursor")
    (description
      "Documentation at https://melpa.org/#/suggestion-box")
    (license #f)))

(define-public emacs-supergenpass
  (package
    (name "emacs-supergenpass")
    (version "20130329.548")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ober/sgpass.git")
               (commit
                 "549072ef7b5b82913cadd4758e8a0a9926f0a04a")))
        (sha256
          (base32
            "0m02snzka243adhwwgriml133n4312lhdia3wdqjcq8y2mlp3331"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "SuperGenPass for Emacs")
    (description
      "Documentation at https://melpa.org/#/supergenpass")
    (license #f)))

(define-public emacs-suscolors-theme
  (package
    (name "emacs-suscolors-theme")
    (version "20190713.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheSuspiciousWombat/SusColors-emacs.git")
               (commit
                 "b4a979ee23e26e255b9a63525b0a28e810fab9ae")))
        (sha256
          (base32
            "0ddbksza42kywn7j78kidg6f1la9qajk3g6baf4758dibclkr5qd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TheSuspiciousWombat/SusColors-emacs")
    (synopsis "Colorful theme, inspired by Gruvbox.")
    (description
      "Documentation at https://melpa.org/#/suscolors-theme")
    (license #f)))

(define-public emacs-svelte-mode
  (package
    (name "emacs-svelte-mode")
    (version "20211016.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leafOfTree/svelte-mode.git")
               (commit
                 "6a1d4274af7f4c0f271f77bd96678c3dd1fa68e1")))
        (sha256
          (base32
            "058mxzcrxqzsax21bs50vysr4ia3jcig83xbns0vhziqpj220yl1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leafOfTree/svelte-mode")
    (synopsis "Emacs major mode for Svelte")
    (description
      "Documentation at https://melpa.org/#/svelte-mode")
    (license #f)))

(define-public emacs-svnwrapper
  (package
    (name "emacs-svnwrapper")
    (version "20180414.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/svnwrapper.git")
               (commit
                 "de5069f5784e5d9e87a0af0159ba5f28a3716583")))
        (sha256
          (base32
            "08sg55cmjbk06622mzhv74f5b5dvbay7gb729zsckczxwrp1cayp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2ansi))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/Lindydancer/svnwrapper")
    (synopsis
      "Highlighting and paging for shell command `svn'")
    (description
      "Documentation at https://melpa.org/#/svnwrapper")
    (license #f)))

(define-public emacs-swift-helpful
  (package
    (name "emacs-swift-helpful")
    (version "20210801.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielmartin/swift-helpful.git")
               (commit
                 "75f2fc6bd4530a230946ae7cc9eaf67a36fa3ee4")))
        (sha256
          (base32
            "0z6prh1xrc8ddq57kas6kvp6n4pia25aps5pg3aq78cwfchzzrk0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-swift-mode))
    (arguments
      '(#:files
        ("*.el"
         "swift-info/*.info"
         ("images" "swift-info/images/*.png"))))
    (home-page
      "https://github.com/danielmartin/swift-helpful")
    (synopsis
      "Show documentation for Swift programs.")
    (description
      "Documentation at https://melpa.org/#/swift-helpful")
    (license #f)))

(define-public emacs-swift-mode
  (package
    (name "emacs-swift-mode")
    (version "20211031.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/swift-emacs/swift-mode.git")
               (commit
                 "4777c409ba0cd0d02b9a8397ba810e449b5ac213")))
        (sha256
          (base32
            "0dmrshlkhavzlfxhm2fi37x7rf1h203iiamdqvqb7dqq0axah5r7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/swift-emacs/swift-mode")
    (synopsis
      "Major-mode for Apple's Swift programming language")
    (description
      "Documentation at https://melpa.org/#/swift-mode")
    (license #f)))

(define-public emacs-swift3-mode
  (package
    (name "emacs-swift3-mode")
    (version "20160918.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taku0/swift3-mode.git")
               (commit
                 "4e51265c6905e17d8910e35b0b37cf51e20ecdfe")))
        (sha256
          (base32
            "0wqwjzr3z9gzsjiyyr0ds4c5zvgifb9hbjadb7vkbbpzdy6qd9s1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taku0/swift3-mode")
    (synopsis
      "Major-mode for Apple's Swift programming language.")
    (description
      "Documentation at https://melpa.org/#/swift3-mode")
    (license #f)))

(define-public emacs-switch-buffer-functions
  (package
    (name "emacs-switch-buffer-functions")
    (version "20200127.409")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/switch-buffer-functions-el.git")
               (commit
                 "95a846baa93bac4c3b3c028b9d53507f1042b23a")))
        (sha256
          (base32
            "0ykdggzgdlb3dcg1qm388290h612kf5l224kwiv5jvvp8wqzb47l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/switch-buffer-functions-el")
    (synopsis "Hook run when current buffer changed")
    (description
      "Documentation at https://melpa.org/#/switch-buffer-functions")
    (license #f)))

(define-public emacs-symbol-navigation-hydra
  (package
    (name "emacs-symbol-navigation-hydra")
    (version "20211010.2353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bgwines/symbol-navigation-hydra.git")
               (commit
                 "5675976cad4cbeee30f43e6c4b28c2e5904575a5")))
        (sha256
          (base32
            "06cl7njizn68vml21lsl3p66wpcdcw6ah49jqjvwzjkzivrds3m5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-highlight-symbol
            emacs-hydra
            emacs-multiple-cursors))
    (home-page
      "https://github.com/bgwines/symbol-navigation-hydra")
    (synopsis "A symbol-aware, range-aware hydra")
    (description
      "Documentation at https://melpa.org/#/symbol-navigation-hydra")
    (license #f)))

(define-public emacs-sync-recentf
  (package
    (name "emacs-sync-recentf")
    (version "20160326.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/sync-recentf.git")
               (commit
                 "0052561d5c5b5c2684faedc3eead776aec06c3ed")))
        (sha256
          (base32
            "006siydqxqds0qqds0zxn821dk4pw14wyymyp03n594wgqzw7m8q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ffevotte/sync-recentf")
    (synopsis
      "Synchronize the recent files list between Emacs instances")
    (description
      "Documentation at https://melpa.org/#/sync-recentf")
    (license #f)))

(define-public emacs-synquid
  (package
    (name "emacs-synquid")
    (version "20160930.1550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/synquid-emacs.git")
               (commit
                 "28701ce1a15437202f53ab93a14bcba1de83fd2c")))
        (sha256
          (base32
            "0c0pi5w8xvir9gnbjp80g1c4i3rhid65zwh4i4vkyivkh2s29f6i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/cpitclaudel/synquid-mode")
    (synopsis "Major mode for editing Synquid files")
    (description
      "Documentation at https://melpa.org/#/synquid")
    (license #f)))

(define-public emacs-syntactic-close
  (package
    (name "emacs-syntactic-close")
    (version "20210105.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-berlin/syntactic-close.git")
               (commit
                 "ffe8b28907973fda775254432f88b55c92b5ae1f")))
        (sha256
          (base32
            "03qgrchvzw489594s6ghd0wmq53qzlxqsjlcwcnvlj185hg5fiwp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-berlin/syntactic-close")
    (synopsis "Insert closing delimiter")
    (description
      "Documentation at https://melpa.org/#/syntactic-close")
    (license #f)))

(define-public emacs-tab-bar-groups
  (package
    (name "emacs-tab-bar-groups")
    (version "20211013.2012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/tab-bar-groups.git")
               (commit
                 "a0389d87d2e793055dd74ae85b4593aa1d2720fd")))
        (sha256
          (base32
            "040nl3yn0vfhk5nbll2jpxz7qcjf8kdlkzqa44lz0gvc6d9414yv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/fritzgrabo/tab-bar-groups")
    (synopsis "Tab groups for the tab bar")
    (description
      "Documentation at https://melpa.org/#/tab-bar-groups")
    (license #f)))

(define-public emacs-tab-bar-lost-commands
  (package
    (name "emacs-tab-bar-lost-commands")
    (version "20211013.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/tab-bar-lost-commands.git")
               (commit
                 "989e03dc3d1057264b21b9a5d241fcba86cd297a")))
        (sha256
          (base32
            "047261v8nvi67h9yils2f1jilmbxc55n31v98qlqxmf56jkzz158"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/tab-bar-lost-commands")
    (synopsis "The \"lost commands\" of the tab bar")
    (description
      "Documentation at https://melpa.org/#/tab-bar-lost-commands")
    (license #f)))

(define-public emacs-tabbar-ruler
  (package
    (name "emacs-tabbar-ruler")
    (version "20160802.307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/tabbar-ruler.el.git")
               (commit
                 "535568189aa12a3eff7f977d2783e57b6a65ab6a")))
        (sha256
          (base32
            "1csj6qhwihdf4kfahcqhm163isiwac08w4nqid1hnca184bfk6xm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tabbar
            emacs-powerline
            emacs-mode-icons))
    (home-page
      "http://github.com/mlf176f2/tabbar-ruler.el")
    (synopsis
      "Pretty tabbar, autohide, use both tabbar/ruler")
    (description
      "Documentation at https://melpa.org/#/tabbar-ruler")
    (license #f)))

(define-public emacs-tablist
  (package
    (name "emacs-tablist")
    (version "20200427.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/politza/tablist.git")
               (commit
                 "faab7a035ef2258cc4ea2182f67e3aedab7e2af9")))
        (sha256
          (base32
            "1nqp7v5jd6zibpnx0w720xj2if71z1sgly9mmlnbcryg15p7c4gz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Extended tabulated-list-mode")
    (description
      "Documentation at https://melpa.org/#/tablist")
    (license #f)))

(define-public emacs-take-off
  (package
    (name "emacs-take-off")
    (version "20140531.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tburette/take-off.git")
               (commit
                 "aa9ea45566fc74febbb6ee9c409ecc4b59246215")))
        (sha256
          (base32
            "13zwlb5805cpv0pbr7fj5b4crlg7lb0ibslvcpszm0cz6rlifcvf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-server))
    (arguments '(#:files ("*.el" "front")))
    (home-page
      "https://github.com/tburette/take-off")
    (synopsis "Emacs remote web access")
    (description
      "Documentation at https://melpa.org/#/take-off")
    (license #f)))

(define-public emacs-tango-2-theme
  (package
    (name "emacs-tango-2-theme")
    (version "20120312.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gist.github.com/2024464.git")
               (commit
                 "64e44c98e41ebbe3b827d54280e3b9615787daaa")))
        (sha256
          (base32
            "1lqkazis9pfcfdsb2lar4l1n4pd085v60xmnlkdrdllwamqachkk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Tango 2 color theme for GNU Emacs 24")
    (description
      "Documentation at https://melpa.org/#/tango-2-theme")
    (license #f)))

(define-public emacs-taskpaper-mode
  (package
    (name "emacs-taskpaper-mode")
    (version "20210415.1322")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/saf-dmitry/taskpaper-mode.git")
               (commit
                 "d13f93a8e11aa9f3b8544e51028b012c33d5c97d")))
        (sha256
          (base32
            "1c3cqvsq96vx8f5aa0iyv6kr5309xp0f1b1w579s6p30nhirw4my"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/saf-dmitry/taskpaper-mode")
    (synopsis
      "Major mode for working with TaskPaper files")
    (description
      "Documentation at https://melpa.org/#/taskpaper-mode")
    (license #f)))

(define-public emacs-taskrunner
  (package
    (name "emacs-taskrunner")
    (version "20190916.1608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-taskrunner/emacs-taskrunner.git")
               (commit
                 "716323aff410b4d864d137c9ebe4bbb5b8587f5e")))
        (sha256
          (base32
            "03llmj09jg5cba927qbzkhld83k24yd1i95nfiq7q754a4y4iksn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-async))
    (home-page
      "https://github.com/emacs-taskrunner/emacs-taskrunner")
    (synopsis
      "Retrieve build system/taskrunner tasks")
    (description
      "Documentation at https://melpa.org/#/taskrunner")
    (license #f)))

(define-public emacs-tblui
  (package
    (name "emacs-tblui")
    (version "20161007.1912")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/tblui.el.git")
               (commit
                 "bb29323bb3e27093d50cb42db3a9329a096b6e4d")))
        (sha256
          (base32
            "1pja9v4h3abqc2iydm7wwjxrg7ni1pn94yb4azrgjq5qc0fsgn7a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-magit-popup emacs-tablist))
    (home-page
      "https://github.com/Yuki-Inoue/tblui.el")
    (synopsis "Define tabulated list UI easily")
    (description
      "Documentation at https://melpa.org/#/tblui")
    (license #f)))

(define-public emacs-teco
  (package
    (name "emacs-teco")
    (version "20200707.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtk/teco.git")
               (commit
                 "61caf8f419659a0567a269f290c90427a215d77b")))
        (sha256
          (base32
            "0jfrlpmcr8msj39fhm0sc11sxw46w0dk24zidsdp12lwgcnli44m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mtk/teco.git")
    (synopsis "Teco interpreter")
    (description
      "Documentation at https://melpa.org/#/teco")
    (license #f)))

(define-public emacs-telepathy
  (package
    (name "emacs-telepathy")
    (version "20131209.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/telepathy.el.git")
               (commit
                 "211d785b02a29ddc254422fdcc3db45262582f8c")))
        (sha256
          (base32
            "16kr1p4lzi1ysd5r2dh0mxk60zsm5fvwa9345nfyrgdic340yscc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Access Telepathy from Emacs")
    (description
      "Documentation at https://melpa.org/#/telepathy")
    (license #f)))

(define-public emacs-teletext
  (package
    (name "emacs-teletext")
    (version "20211203.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-teletext.git")
               (commit
                 "6b003e9dab9bd0c27d188a81f5fff740d66a2282")))
        (sha256
          (base32
            "0ilallavqhqjsxh37gga5k2pgz8jiwxssfhj1jlf7nj89gn2ana6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-teletext")
    (synopsis "Teletext broadcast viewer")
    (description
      "Documentation at https://melpa.org/#/teletext")
    (license #f)))

(define-public emacs-teletext-yle
  (package
    (name "emacs-teletext-yle")
    (version "20210927.825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-teletext-yle.git")
               (commit
                 "9c8f4b503923c4ec688e2dcc9dff62d71bc55933")))
        (sha256
          (base32
            "0j0qd75nz0b97pg7x58cf6cxanmwkbyam6raq6zwdlvllwmsq6qd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-teletext))
    (home-page
      "https://github.com/lassik/emacs-teletext-yle")
    (synopsis
      "Teletext provider for Finnish national network YLE")
    (description
      "Documentation at https://melpa.org/#/teletext-yle")
    (license #f)))

(define-public emacs-template-overlays
  (package
    (name "emacs-template-overlays")
    (version "20180706.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmontone/template-overlays.git")
               (commit
                 "d32db58c044b2aca3720879003f55b1d57208b07")))
        (sha256
          (base32
            "1hfm0miqzym4fbj33hzh5iszp0i51imr1z54396vd81zjch9sxss"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ov))
    (home-page
      "http://www.github.com/mmontone/template-overlays")
    (synopsis
      "Display template regions using overlays")
    (description
      "Documentation at https://melpa.org/#/template-overlays")
    (license #f)))

(define-public emacs-templatel
  (package
    (name "emacs-templatel")
    (version "20210902.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clarete/templatel.git")
               (commit
                 "b52349948b6927f7a5da4e54a89e01c794f2095a")))
        (sha256
          (base32
            "1z5bcd3654zkm89mkx29bcybs97zmwi14xdmbh356di9jbwzk93s"))))
    (build-system melpa-build-system)
    (home-page "https://clarete.li/templatel")
    (synopsis "Templating language;")
    (description
      "Documentation at https://melpa.org/#/templatel")
    (license #f)))

(define-public emacs-ten-hundred-mode
  (package
    (name "emacs-ten-hundred-mode")
    (version "20161028.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaron-em/ten-hundred-mode.el.git")
               (commit
                 "bdcfda49b1819e82d61fe90947e50bb948cf7933")))
        (sha256
          (base32
            "11nsh6dkd3i489lrqpd9xhr4c0ai51364rlrd6slm54720by9jql"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "lib")))
    (home-page "unspecified")
    (synopsis
      "use only the ten hundred most usual words")
    (description
      "Documentation at https://melpa.org/#/ten-hundred-mode")
    (license #f)))

(define-public emacs-term-manager
  (package
    (name "emacs-term-manager")
    (version "20190610.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/term-manager.git")
               (commit
                 "eea7894350a4f31e1df0c666d3fb0bac822d34d2")))
        (sha256
          (base32
            "1rkivl5dy25haip62ybb10fd0gda9aacg9nafj6rkpa7n6mwkkqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("term-manager*.el")))
    (home-page
      "https://www.github.com/IvanMalison/term-manager")
    (synopsis "Contextual terminal management")
    (description
      "Documentation at https://melpa.org/#/term-manager")
    (license #f)))

(define-public emacs-terminal-focus-reporting
  (package
    (name "emacs-terminal-focus-reporting")
    (version "20180830.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/terminal-focus-reporting.el.git")
               (commit
                 "6b1dbb2e96b3ff680dbe88153c4c569adbbd64ce")))
        (sha256
          (base32
            "05h62b06k2nfslh822mq3a7q0xvnm8whnj5xbnv3291i4a4v5x2b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/veelenga/terminal-focus-reporting.el")
    (synopsis
      "Minor mode for terminal focus reporting.")
    (description
      "Documentation at https://melpa.org/#/terminal-focus-reporting")
    (license #f)))

(define-public emacs-terminal-here
  (package
    (name "emacs-terminal-here")
    (version "20210605.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/terminal-here.git")
               (commit
                 "e0e89344624fadf080f6770132ebdd7991355fdd")))
        (sha256
          (base32
            "11hvyvnbr6skw6czwk8gjw9v08azf8s2kafqh5jb1nlznfghcr11"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidshepherd7/terminal-here")
    (synopsis
      "Run an external terminal in current directory")
    (description
      "Documentation at https://melpa.org/#/terminal-here")
    (license #f)))

(define-public emacs-terminal-toggle
  (package
    (name "emacs-terminal-toggle")
    (version "20190226.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/terminal-toggle.el.git")
               (commit
                 "f824d634aef3600cb7a8e2ddf9e8444c6607c160")))
        (sha256
          (base32
            "150xvmr5vsydg0197m1k62mwy2810mzh1iwqj9yl9fg47fbzbg0i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popwin))
    (home-page
      "https://github.com/mtekman/terminal-toggle.el")
    (synopsis "simple pop-up terminal")
    (description
      "Documentation at https://melpa.org/#/terminal-toggle")
    (license #f)))

(define-public emacs-terraform-mode
  (package
    (name "emacs-terraform-mode")
    (version "20210621.1953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/terraform-mode.git")
               (commit
                 "e560caaa9d9a11b0868adf6d9dcae5ebb5055730")))
        (sha256
          (base32
            "0r4zw6jwn5v1xzzbc1195jblhcg3ikbmz3wiwy462qzib56bj8d3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hcl-mode emacs-dash))
    (home-page
      "https://github.com/syohex/emacs-terraform-mode")
    (synopsis
      "Major mode for terraform configuration file")
    (description
      "Documentation at https://melpa.org/#/terraform-mode")
    (license #f)))

(define-public emacs-textile-mode
  (package
    (name "emacs-textile-mode")
    (version "20210912.906")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juba/textile-mode.git")
               (commit
                 "a49d9bf42166584cca395a92311e9d0a199efc46")))
        (sha256
          (base32
            "0b7vbqy2ryp5c0jz7gb5ddpa3mlqmkd7jlf94hdb0d0ffapspqsv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juba/textile-mode")
    (synopsis "Textile markup editing major mode")
    (description
      "Documentation at https://melpa.org/#/textile-mode")
    (license #f)))

(define-public emacs-textmate-to-yas
  (package
    (name "emacs-textmate-to-yas")
    (version "20160409.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/textmate-to-yas.el.git")
               (commit
                 "be3a768b7ac4c2e24b9d4aa6e9ac1d916cdc5a73")))
        (sha256
          (base32
            "1bz5ys36wd00clq9w3ahqpras368aj2b9d4bl32qc6dyp8jfknmz"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.pl")))
    (home-page
      "https://github.com/mlf176f2/textmate-to-yas.el/")
    (synopsis
      "Import Textmate macros into yasnippet syntax")
    (description
      "Documentation at https://melpa.org/#/textmate-to-yas")
    (license #f)))

(define-public emacs-tf2-conf-mode
  (package
    (name "emacs-tf2-conf-mode")
    (version "20161209.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wynro/emacs-tf2-conf-mode.git")
               (commit
                 "536950f64c071ffd8495fb2c7ac7c63a11e25f93")))
        (sha256
          (base32
            "0vga7kgzp9wiiji1w47llbb3gp9qgwk8v0f6s8b6jng2gmdg25bk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wynro/emacs-tf2-conf-mode")
    (synopsis
      "TF2 Configuration files syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/tf2-conf-mode")
    (license #f)))

(define-public emacs-theme-looper
  (package
    (name "emacs-theme-looper")
    (version "20210827.424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myTerminal/theme-looper.git")
               (commit
                 "e6e8efd740df0b68db89805ba72492818dba61ab")))
        (sha256
          (base32
            "1cy1s9iyv2c4c2kld42aricar4s5d0irdhsqb8rsbbriif50vpvd"))))
    (build-system melpa-build-system)
    (home-page "http://ismail.teamfluxion.com")
    (synopsis
      "A package for switching themes in Emacs interactively")
    (description
      "Documentation at https://melpa.org/#/theme-looper")
    (license #f)))

(define-public emacs-thingopt
  (package
    (name "emacs-thingopt")
    (version "20160520.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/thingopt.git")
               (commit
                 "5679815852652479f3b3c9f3a98affc927384b2c")))
        (sha256
          (base32
            "12zpn0sy2yg37jjjx12h3kln56241b3z09bn5zavmjfdwnr9jd0a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Thing at Point optional utilities")
    (description
      "Documentation at https://melpa.org/#/thingopt")
    (license #f)))

(define-public emacs-tide
  (package
    (name "emacs-tide")
    (version "20210930.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/tide.git")
               (commit
                 "28137ed904deb143dba8f8f67660966e11921c6d")))
        (sha256
          (base32
            "1ikvdxjr9kbs0l5hlann34q79r6gr3796rvi2ci2ki50kp69kfbw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-flycheck
            emacs-typescript-mode))
    (arguments '(#:files (:defaults "tsserver")))
    (home-page
      "http://github.com/ananthakumaran/tide")
    (synopsis
      "Typescript Interactive Development Environment")
    (description
      "Documentation at https://melpa.org/#/tide")
    (license #f)))

(define-public emacs-tiny
  (package
    (name "emacs-tiny")
    (version "20190722.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/tiny.git")
               (commit
                 "fd8a6b0b0c564d8242259e20e557ee6041f40908")))
        (sha256
          (base32
            "1498j392ap2mk4zmsm2id16pfgvj78r428da9vw7hdrzzibai2cx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/tiny")
    (synopsis
      "Quickly generate linear ranges in Emacs")
    (description
      "Documentation at https://melpa.org/#/tiny")
    (license #f)))

(define-public emacs-tiny-menu
  (package
    (name "emacs-tiny-menu")
    (version "20161213.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronbieber/tiny-menu.el.git")
               (commit
                 "05563b94537b6eb22aeddedef2a6e59e3f88d073")))
        (sha256
          (base32
            "0k0djq60mwhjiwy9dpy9m9bs507b9p19pdl3g2s8sd9i2fk53rfy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronbieber/tiny-menu.el")
    (synopsis "Display tiny menus.")
    (description
      "Documentation at https://melpa.org/#/tiny-menu")
    (license #f)))

(define-public emacs-tj3-mode
  (package
    (name "emacs-tj3-mode")
    (version "20180519.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csrhodes/tj3-mode.git")
               (commit
                 "1d98eb23f1606392f34ef1b80517cfc940fb9950")))
        (sha256
          (base32
            "1gzi8pvdgj4s9c54m2a8hicvg8dzac6253kyd2h71bljm4ilwl0f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/csrhodes/tj3-mode")
    (synopsis
      "major mode for editing TaskJuggler 3 files")
    (description
      "Documentation at https://melpa.org/#/tj3-mode")
    (license #f)))

(define-public emacs-tmmofl
  (package
    (name "emacs-tmmofl")
    (version "20121025.1101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/tmmofl.git")
               (commit
                 "532aa6978e994e2b069ffe37aaf9a0011a07dadc")))
        (sha256
          (base32
            "1ypbv9jbdnwv3xjsfzq8i3nmqdvziynv2rqsd6fm2r1xw0q06xd6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Calls functions dependant on font lock highlighting at point")
    (description
      "Documentation at https://melpa.org/#/tmmofl")
    (license #f)))

(define-public emacs-todotxt-mode
  (package
    (name "emacs-todotxt-mode")
    (version "20200228.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/avillafiorita/todotxt-mode.git")
               (commit
                 "8b616ce1cf3e18a60757450a0acf22996abb9b79")))
        (sha256
          (base32
            "1frvksra8s004xknlizs5gz5rhy9xbis5r353pzsybmn1bxa40wk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing todo.txt files")
    (description
      "Documentation at https://melpa.org/#/todotxt-mode")
    (license #f)))

(define-public emacs-tomatinho
  (package
    (name "emacs-tomatinho")
    (version "20180621.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/konr/tomatinho.git")
               (commit
                 "b53354b9b9f496c0388d6a573b06b7d6fc53d0bd")))
        (sha256
          (base32
            "0vf2b1c9raa723iy2gfdmxjv4q0ivixy1vbs1x5q09cibca8kp4x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("tomatinho.el" "tick.wav" "tack.wav")))
    (home-page "unspecified")
    (synopsis "Simple and beautiful pomodoro timer")
    (description
      "Documentation at https://melpa.org/#/tomatinho")
    (license #f)))

(define-public emacs-tommyh-theme
  (package
    (name "emacs-tommyh-theme")
    (version "20131004.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wglass/tommyh-theme.git")
               (commit
                 "46d1c69ee0a1ca7c67b569b891a2f28fed89e7d5")))
        (sha256
          (base32
            "0pwbd5gzmpr6js20438870w605671930291070nhmhswvxfcdvay"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A bright, bold-colored theme for emacs")
    (description
      "Documentation at https://melpa.org/#/tommyh-theme")
    (license #f)))

(define-public emacs-tongbu
  (package
    (name "emacs-tongbu")
    (version "20200414.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/tongbu.el.git")
               (commit
                 "6f6e5c5446f0c5735357ab520b249ab97295653e")))
        (sha256
          (base32
            "05pg1qddsl0m4r73smrxpcvyiwa18d9jl6i8nfanlydwmmjqblb9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-server))
    (home-page
      "https://github.com/xuchunyang/tongbu.el")
    (synopsis
      "A web server to share text or files between two devices")
    (description
      "Documentation at https://melpa.org/#/tongbu")
    (license #f)))

(define-public emacs-torus
  (package
    (name "emacs-torus")
    (version "20190325.753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chimay/torus.git")
               (commit
                 "b309da8c2eaee573a2e2572f25a08ce5da9e9990")))
        (sha256
          (base32
            "0d6y2m4lh244542svzm856n014l7hjkffp5m0arwsvywqspq9vb9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/chimay/torus")
    (synopsis "A buffer groups manager")
    (description
      "Documentation at https://melpa.org/#/torus")
    (license #f)))

(define-public emacs-totp
  (package
    (name "emacs-totp")
    (version "20211018.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-totp.git")
               (commit
                 "680b2c969823b91e0b35afbe2a35a610cb2fa26a")))
        (sha256
          (base32
            "17ylcrz7gw1hyq9ls5anz7ycd5y6f3j06jxr6i80hj5ccylzy82c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/emacs-totp")
    (synopsis "Time-based One-time Password (TOTP)")
    (description
      "Documentation at https://melpa.org/#/totp")
    (license #f)))

(define-public emacs-tr-ime
  (package
    (name "emacs-tr-ime")
    (version "20211120.718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/trueroad/tr-emacs-ime-module.git")
               (commit
                 "e6313639afb51d91efcc417bd0c81afd13bb079c")))
        (sha256
          (base32
            "0hcqpvvjndddwcg81c2xz3msjghilym5lvbayc6wj0hk47xs9ylc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-w32-ime))
    (arguments '(#:files ("lisp/*.el")))
    (home-page
      "https://github.com/trueroad/tr-emacs-ime-module")
    (synopsis "Emulator of IME patch for Windows")
    (description
      "Documentation at https://melpa.org/#/tr-ime")
    (license #f)))

(define-public emacs-tramp-auto-auth
  (package
    (name "emacs-tramp-auto-auth")
    (version "20191027.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/tramp-auto-auth.git")
               (commit
                 "f15a12dfab651aff60f4a9d70f868030a12344ac")))
        (sha256
          (base32
            "09nkjgwppjfgv04q0gv468qihgx4y3p39lpwbd6vbh3wgbccas9k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oitofelix/tramp-auto-auth")
    (synopsis
      "TRAMP automatic authentication library")
    (description
      "Documentation at https://melpa.org/#/tramp-auto-auth")
    (license #f)))

(define-public emacs-tramp-term
  (package
    (name "emacs-tramp-term")
    (version "20190628.1207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/randymorris/tramp-term.el.git")
               (commit
                 "fdc3d5a29ca9549db462cd66d8f5d97026a1200f")))
        (sha256
          (base32
            "1xznm3q2d4xffynqb1bkpcif8jr6mpkrir4hc7gmi4q987j2lpdr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/randymorris/tramp-term.el")
    (synopsis
      "Automatic setup of directory tracking in ssh sessions.")
    (description
      "Documentation at https://melpa.org/#/tramp-term")
    (license #f)))

(define-public emacs-transpose-mark
  (package
    (name "emacs-transpose-mark")
    (version "20150405.716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/transpose-mark.git")
               (commit
                 "667327602004794de97214cf336ac61650ef75b7")))
        (sha256
          (base32
            "03wc50vn1kmrgnzzhs06pwpap2p2rx84wwzxw0hawsg1f1l35m2x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Transpose data using the Emacs mark")
    (description
      "Documentation at https://melpa.org/#/transpose-mark")
    (license #f)))

(define-public emacs-tree-edit
  (package
    (name "emacs-tree-edit")
    (version "20211224.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethan-leba/tree-edit.git")
               (commit
                 "d74266cbf0dbf4fa18b0ad7cd7f44b14130d1ec3")))
        (sha256
          (base32
            "07yii5vk3y9h034fidgi8lccycrhc3ndjfn8ywyn8yqb0kqdh990"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-sitter
            emacs-tsc
            emacs-tree-sitter-langs
            emacs-dash
            emacs-reazon
            emacs-s))
    (arguments
      '(#:files
        (:defaults (:exclude "evil-tree-edit.el"))))
    (home-page
      "https://github.com/ethan-leba/tree-edit")
    (synopsis
      "A library for structural refactoring and editing")
    (description
      "Documentation at https://melpa.org/#/tree-edit")
    (license #f)))

(define-public emacs-tree-sitter-langs
  (package
    (name "emacs-tree-sitter-langs")
    (version "20211213.159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-tree-sitter/tree-sitter-langs.git")
               (commit
                 "e537b90bbca6b4deb62042240ed12461251b3f0c")))
        (sha256
          (base32
            "16i3j7iv77l9cqqc2f8ynywhpapgm5sdbvq506h0swk8rg81hsnz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tree-sitter))
    (arguments '(#:files (:defaults "queries")))
    (home-page
      "https://github.com/emacs-tree-sitter/tree-sitter-langs")
    (synopsis "Grammar bundle for tree-sitter")
    (description
      "Documentation at https://melpa.org/#/tree-sitter-langs")
    (license #f)))

(define-public emacs-treefactor
  (package
    (name "emacs-treefactor")
    (version "20200516.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyberthal/treefactor.git")
               (commit
                 "75357757022a4399ab772ff0d92065bd114dabe9")))
        (sha256
          (base32
            "0ks7ilc01j1jli1p1lqmqwcr3bfzn5p6vhxybc9wn2sk2sqn2kv8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-avy))
    (home-page
      "https://github.com/cyberthal/treefactor")
    (synopsis "Restructure your messy Org documents")
    (description
      "Documentation at https://melpa.org/#/treefactor")
    (license #f)))

(define-public emacs-treemacs-persp
  (package
    (name "emacs-treemacs-persp")
    (version "20210114.2135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "babf69971ed4c3469b0cdf6a3bf7b637bed1ab18")))
        (sha256
          (base32
            "1s8csgnbcyjkbycx8hwsmzd37fhs7m7qr5mn4k91j5v3vm8ndjb8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-treemacs emacs-persp-mode emacs-dash))
    (arguments
      '(#:files ("src/extra/treemacs-persp.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Persp-mode integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-persp")
    (license #f)))

(define-public emacs-treemacs-projectile
  (package
    (name "emacs-treemacs-projectile")
    (version "20211223.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "200861dedd5e6270903a8c3ff5e7abf91e452a3e")))
        (sha256
          (base32
            "13kjnzfpjadvn63vcaqakz3wf90812vasml5vdpkyaw77xwdhwwm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-treemacs))
    (arguments
      '(#:files ("src/extra/treemacs-projectile.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Projectile integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-projectile")
    (license #f)))

(define-public emacs-treeview
  (package
    (name "emacs-treeview")
    (version "20210723.2256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tilmanrassy/emacs-treeview.git")
               (commit
                 "09c8c1d045c7c8eace61b10b6df9d2f9079de78e")))
        (sha256
          (base32
            "008m6ckrcc0ddnrc5p9b5agbvsma31bq0094yygv5dwg49lh7ly4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tilmanrassy/emacs-treeview")
    (synopsis "A generic tree navigation library")
    (description
      "Documentation at https://melpa.org/#/treeview")
    (license #f)))

(define-public emacs-trinary
  (package
    (name "emacs-trinary")
    (version "20180904.2313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-elsa/trinary-logic.git")
               (commit
                 "886232c6d7e92a8e9fe573eef46754ebe321f90d")))
        (sha256
          (base32
            "10h6p2dwl2k2p35pi3n8y85qh5y0zrr9nhfr4sviwzj1nbqdrvdr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fuco1/trinary-logic")
    (synopsis "Trinary logic.")
    (description
      "Documentation at https://melpa.org/#/trinary")
    (license #f)))

(define-public emacs-try
  (package
    (name "emacs-try")
    (version "20181204.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larstvei/Try.git")
               (commit
                 "8831ded1784df43a2bd56c25ad3d0650cdb9df1d")))
        (sha256
          (base32
            "0y26ybdsljph49w2834wssxgdx8ij7b6v4gp8jpgnbx118gr4jsz"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/larstvei/try")
    (synopsis "Try out Emacs packages.")
    (description
      "Documentation at https://melpa.org/#/try")
    (license #f)))

(define-public emacs-ts-comint
  (package
    (name "emacs-ts-comint")
    (version "20181219.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-typescript/ts-comint.git")
               (commit
                 "786b88fffc553e122868a1c4883f14136a040df6")))
        (sha256
          (base32
            "1103gb66db91rnqvs1adqzdsgjh14apb171zghd1dzswhjgiff8q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/josteink/ts-comint")
    (synopsis
      "Run a Typescript interpreter in an inferior process window.")
    (description
      "Documentation at https://melpa.org/#/ts-comint")
    (license #f)))

(define-public emacs-tubestatus
  (package
    (name "emacs-tubestatus")
    (version "20210801.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smallwat3r/tubestatus.el.git")
               (commit
                 "eeda4c2647cfdb910de776398037183f48e3fa72")))
        (sha256
          (base32
            "1fn405rmwcy8y5sa8lh5grq87n5zxbln2b9agxyilfx4jm6rcnpl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/smallwat3r/tubestatus.el")
    (synopsis "Get the London Tube service status")
    (description
      "Documentation at https://melpa.org/#/tubestatus")
    (license #f)))

(define-public emacs-tumble
  (package
    (name "emacs-tumble")
    (version "20160112.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/febuiles/tumble.git")
               (commit
                 "e8fd7643cccf2b6ea4170f0c5f1f87d007e7fa00")))
        (sha256
          (base32
            "1xdkgvr1pnlg3nrjmma4ra80ysr8xbslvczg7cq1x1mqw6gn9xq5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-http-post-simple))
    (home-page "unspecified")
    (synopsis "an Tumblr mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/tumble")
    (license #f)))

(define-public emacs-turing-machine
  (package
    (name "emacs-turing-machine")
    (version "20180222.438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/turing-machine.git")
               (commit
                 "fa60b76a5bac1f54b7a1b3dc55aae7602c7e385b")))
        (sha256
          (base32
            "0k1r0zkcr44kiki8cvdqwx09xpvpz7nkbq9w6i4gqy5h78zy5k79"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/therockmandolinist/turing-machine")
    (synopsis "Single-tape Turing machine simulator")
    (description
      "Documentation at https://melpa.org/#/turing-machine")
    (license #f)))

(define-public emacs-twig-mode
  (package
    (name "emacs-twig-mode")
    (version "20130220.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/moljac024/twig-mode.git")
               (commit
                 "2849f273a4855d3314a9c0cc84134f5b28ad5ea6")))
        (sha256
          (base32
            "0wvmih2y3hy7casxx2y1w8csmzfnfgbb5ivpggr94sc86p6bg8sa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A major mode for twig")
    (description
      "Documentation at https://melpa.org/#/twig-mode")
    (license #f)))

(define-public emacs-twilight-anti-bright-theme
  (package
    (name "emacs-twilight-anti-bright-theme")
    (version "20160622.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimeh/twilight-anti-bright-theme.git")
               (commit
                 "523b95fcdbf4a6a6483af314ad05354a3d80f23f")))
        (sha256
          (base32
            "0g6qqfgbg507r8lgq99zj2b5n3r9m23hpx19m36c3i55mh94dl2h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimeh/twilight-anti-bright-theme.el")
    (synopsis
      "A soothing Emacs 24 light-on-dark theme")
    (description
      "Documentation at https://melpa.org/#/twilight-anti-bright-theme")
    (license #f)))

(define-public emacs-typit
  (package
    (name "emacs-typit")
    (version "20210318.1747")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/typit.git")
               (commit
                 "d08ed004bfc13f8d0bdfc13fc54e8f7402876903")))
        (sha256
          (base32
            "02fnq52a1i0dgdyhxgqjf89zif23038n8cm9idv9c515835c10m2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-mmt))
    (arguments '(#:files (:defaults "dict")))
    (home-page "https://github.com/mrkkrp/typit")
    (synopsis
      "Typing game similar to tests on 10 fast fingers")
    (description
      "Documentation at https://melpa.org/#/typit")
    (license #f)))

(define-public emacs-typo
  (package
    (name "emacs-typo")
    (version "20200706.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/typoel.git")
               (commit
                 "173ebe4fc7ac38f344b16e6eaf41f79e38f20d57")))
        (sha256
          (base32
            "09835zlfzxby5lpz9njl705nqc2n2h2f7a4vpcyx89f5rb9qhy68"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jorgenschaefer/typoel")
    (synopsis "Minor mode for typographic editing")
    (description
      "Documentation at https://melpa.org/#/typo")
    (license #f)))

(define-public emacs-typo-suggest
  (package
    (name "emacs-typo-suggest")
    (version "20200830.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kadircancetin/typo-suggest.git")
               (commit
                 "3014d18ae2f0b6b857bb613f373e034c743f4d2e")))
        (sha256
          (base32
            "0pbmmwk5qh1ld9yzy4vxxp9ix4kzw9m71qjwqz0fqw3md9xlr6z6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm
            emacs-company
            emacs-s
            emacs-dash))
    (home-page
      "https://github.com/kadircancetin/typo-suggest")
    (synopsis
      "Don't make typos with the help of helm and company")
    (description
      "Documentation at https://melpa.org/#/typo-suggest")
    (license #f)))

(define-public emacs-ukrainian-holidays
  (package
    (name "emacs-ukrainian-holidays")
    (version "20130720.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ukrainian-holidays.git")
               (commit
                 "e52b0c92843e9f4d0415a7ba3b8559785497d23d")))
        (sha256
          (base32
            "033v4ck979lhkpwblci5clacfc1xnkq03p5d1m566wff8dp5flwz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/ukrainian-holidays")
    (synopsis
      "Ukrainian holidays for Emacs calendar.")
    (description
      "Documentation at https://melpa.org/#/ukrainian-holidays")
    (license #f)))

(define-public emacs-uncrustify-mode
  (package
    (name "emacs-uncrustify-mode")
    (version "20130707.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/koko1000ban/emacs-uncrustify-mode.git")
               (commit
                 "73893d000361e95784911e5ec268ad0ab2a1473c")))
        (sha256
          (base32
            "0366h4jfi0c7yda9wcrz4zxgf2qqdd08b8z2dr8c1rkvkdd67iam"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Minor mode to automatically uncrustify.")
    (description
      "Documentation at https://melpa.org/#/uncrustify-mode")
    (license #f)))

(define-public emacs-undersea-theme
  (package
    (name "emacs-undersea-theme")
    (version "20200719.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/undersea-theme.git")
               (commit
                 "fa821425572cc75fbc7b990c800d4659dd893a4e")))
        (sha256
          (base32
            "0k9b5lv9nkfjk8r1kmcal7b4jsgiglpgfwzhfczc61lj4q9i9zq7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/undersea-theme")
    (synopsis "Theme styled after undersea imagery")
    (description
      "Documentation at https://melpa.org/#/undersea-theme")
    (license #f)))

(define-public emacs-underwater-theme
  (package
    (name "emacs-underwater-theme")
    (version "20131118.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmdeldin/underwater-theme.el.git")
               (commit
                 "4eb9ef014f580adc135d91d1cd68d37a310640b6")))
        (sha256
          (base32
            "1ypxpv5vw2ls757iwrq3zld6k0s29q3kg3spcsl5ks4aqpnkxpva"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A gentle, deep blue color theme")
    (description
      "Documentation at https://melpa.org/#/underwater-theme")
    (license #f)))

(define-public emacs-undo-fu
  (package
    (name "emacs-undo-fu")
    (version "20211030.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-undo-fu.git")
               (commit
                 "ab8bc10e424bccc847800c31ab41888db789d55d")))
        (sha256
          (base32
            "1vdaysc328gwqi57fp4cfbl96g76m8wc2qr53wgb3l89m9kx5sgg"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-undo-fu")
    (synopsis "Undo helper with redo")
    (description
      "Documentation at https://melpa.org/#/undo-fu")
    (license #f)))

(define-public emacs-undo-fu-session
  (package
    (name "emacs-undo-fu-session")
    (version "20211217.351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ideasman42/emacs-undo-fu-session.git")
               (commit
                 "cbe37c664389e2ef8c580dd800ca76b0139f09c5")))
        (sha256
          (base32
            "01nsc9b5yiwy5r5zdkwidk22lvxhwahxq741r1rj0f2q7zf44yb9"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ideasman42/emacs-undo-fu-session")
    (synopsis
      "Persistent undo, available between sessions")
    (description
      "Documentation at https://melpa.org/#/undo-fu-session")
    (license #f)))

(define-public emacs-undohist
  (package
    (name "emacs-undohist")
    (version "20210517.411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/undohist.git")
               (commit
                 "56c6f58873f8ebb743e4dc5aff143744720375bd")))
        (sha256
          (base32
            "1ayf2rgw0y0qa65s585408nxdqpq6vgyz8l015crk72l6hv35l8n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Persistent undo history for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/undohist")
    (license #f)))

(define-public emacs-unfill
  (package
    (name "emacs-unfill")
    (version "20210106.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/unfill.git")
               (commit
                 "3bd4c8d3df15fb54a79f97e26177819fc0ebf877")))
        (sha256
          (base32
            "1dwy1pcvsqdxi7zrfgh3k9g2h9dnc3yyaqabmin5h3abs6mivb7v"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/purcell/unfill")
    (synopsis
      "Do the opposite of fill-paragraph or fill-region")
    (description
      "Documentation at https://melpa.org/#/unfill")
    (license #f)))

(define-public emacs-unicad
  (package
    (name "emacs-unicad")
    (version "20200914.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ukari/unicad.git")
               (commit
                 "a5fd4e326a0607acc3776c11f41826e60b6486c6")))
        (sha256
          (base32
            "035k8fkvrcglqn15fqcd962jyr154b3y8iczddjjc6wfxp16i21x"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ukari/unicad")
    (synopsis
      "An elisp port of Mozilla Universal Charset Auto Detector")
    (description
      "Documentation at https://melpa.org/#/unicad")
    (license #f)))

(define-public emacs-unicode-emoticons
  (package
    (name "emacs-unicode-emoticons")
    (version "20150204.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hagleitn/unicode-emoticons.git")
               (commit
                 "fb18631f342b0243cf77cf59ed2067c47aae5233")))
        (sha256
          (base32
            "015gjf8chd6h9azhyarmskk41cm0cmg981jif7q81hakl9av6rhh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hagleitn/unicode-emoticons")
    (synopsis
      "Shortcuts for common unicode emoticons")
    (description
      "Documentation at https://melpa.org/#/unicode-emoticons")
    (license #f)))

(define-public emacs-unicode-fonts
  (package
    (name "emacs-unicode-fonts")
    (version "20200803.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-fonts.git")
               (commit
                 "47f2397ade28eba621baa865fd69e4efb71407a5")))
        (sha256
          (base32
            "1c9byhlkzjvijhl7izwxfp4z6dwism4np4m8705i23ccrpf039jw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-font-utils
            emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-fonts")
    (synopsis "Configure Unicode fonts")
    (description
      "Documentation at https://melpa.org/#/unicode-fonts")
    (license #f)))

(define-public emacs-unicode-progress-reporter
  (package
    (name "emacs-unicode-progress-reporter")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-progress-reporter.git")
               (commit
                 "5e66724fd7d15743213b082474d798117b194494")))
        (sha256
          (base32
            "16jgm70ldsngxldiagjkw3ragypalpiidnf82g5hss9ciybkd3j4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-progress-reporter")
    (synopsis
      "Progress-reporter with fancy characters")
    (description
      "Documentation at https://melpa.org/#/unicode-progress-reporter")
    (license #f)))

(define-public emacs-unicode-whitespace
  (package
    (name "emacs-unicode-whitespace")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-whitespace.git")
               (commit
                 "a18c6b38d78b94f2eb1dcc4cb4fa91b6a17efabe")))
        (sha256
          (base32
            "1ayb15nd5vqr0xaghrnp55kqw7bblrjipmfrag6bqpn7jk9bvbdz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-whitespace")
    (synopsis
      "teach whitespace-mode about fancy characters")
    (description
      "Documentation at https://melpa.org/#/unicode-whitespace")
    (license #f)))

(define-public emacs-unidecode
  (package
    (name "emacs-unidecode")
    (version "20201213.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sindikat/unidecode.git")
               (commit
                 "525b51b38f5b0435642005957740fe22ecb2a53c")))
        (sha256
          (base32
            "1jfaxz6z5lb24hygd7nx2a55blfbcf03225lc8ni2fbmkxx4dkir"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "data")))
    (home-page "unspecified")
    (synopsis "Transliterate Unicode to ASCII")
    (description
      "Documentation at https://melpa.org/#/unidecode")
    (license #f)))

(define-public emacs-unify-opening
  (package
    (name "emacs-unify-opening")
    (version "20171122.2012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/unify-opening.git")
               (commit
                 "502469ddba6d8d52159f53976265f7d956b6b17c")))
        (sha256
          (base32
            "0mni9vnbs50wvgnwfjwgzlwfff38h3wbrpr20nv84dmfh8ac0v61"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/unify-opening")
    (synopsis "Unify the mechanism to open files")
    (description
      "Documentation at https://melpa.org/#/unify-opening")
    (license #f)))

(define-public emacs-unison
  (package
    (name "emacs-unison")
    (version "20160704.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/unison.el.git")
               (commit
                 "a78a04c0d1398d00f75a1bd4799622a65bcb0f28")))
        (sha256
          (base32
            "1jn23wlhpka5pv0caipxi8bg3cc6wj1fg09abibhydy4p3mb3bi5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/unhammer/unison.el")
    (synopsis "sync with Unison")
    (description
      "Documentation at https://melpa.org/#/unison")
    (license #f)))

(define-public emacs-urlenc
  (package
    (name "emacs-urlenc")
    (version "20140116.1456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/urlenc-el.git")
               (commit
                 "835a6dcb783bbe84714bae87a3464aa0b128bfac")))
        (sha256
          (base32
            "0xwr0v4f64d7hi5ldig4r5yjn8h3f8by49g5820187lsp7ng2nw4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/buzztaiki/urlenc-el")
    (synopsis
      "URL encoding/decoding utility for Emacs.")
    (description
      "Documentation at https://melpa.org/#/urlenc")
    (license #f)))

(define-public emacs-use-package
  (package
    (name "emacs-use-package")
    (version "20210207.1926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "a7422fb8ab1baee19adb2717b5b47b9c3812a84c")))
        (sha256
          (base32
            "1zz2gg475254hbbxw4y82b2m2iy8cvx0phh030daax315hdbsaqb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bind-key))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "bind-key.el"
            "bind-chord.el"
            "use-package-chords.el"
            "use-package-ensure-system-package.el"))))
    (home-page
      "https://github.com/jwiegley/use-package")
    (synopsis
      "A configuration macro for simplifying your .emacs")
    (description
      "Documentation at https://melpa.org/#/use-package")
    (license #f)))

(define-public emacs-use-package-el-get
  (package
    (name "emacs-use-package-el-get")
    (version "20180131.505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edvorg/use-package-el-get.git")
               (commit
                 "cba87c4e9a3a66b7c10962e3aefdf11c83d737bc")))
        (sha256
          (base32
            "1k1dwydqfgx2yvbipahwzk8kyj7v5ih6hkra8ladbn67x013f9rq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-use-package))
    (home-page
      "https://github.com/edvorg/use-package-el-get")
    (synopsis "el-get support for use package")
    (description
      "Documentation at https://melpa.org/#/use-package-el-get")
    (license #f)))

(define-public emacs-utop
  (package
    (name "emacs-utop")
    (version "20210607.1941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diml/utop.git")
               (commit
                 "676e2cd6545fd327e02330d1ccb20c02d6b26eab")))
        (sha256
          (base32
            "1mdpqc1b67p5rm2jsbwy0gjjgdlfqcakjyh1cwdj959ykz4zy9ld"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tuareg))
    (arguments '(#:files ("src/top/utop.el")))
    (home-page "https://github.com/diml/utop")
    (synopsis "Universal toplevel for OCaml")
    (description
      "Documentation at https://melpa.org/#/utop")
    (license #f)))

(define-public emacs-uuidgen
  (package
    (name "emacs-uuidgen")
    (version "20200816.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kanru/uuidgen-el.git")
               (commit
                 "b50e6fef2de4199a8f207b46588c2cb3890ddd85")))
        (sha256
          (base32
            "08m74kj7h70kna3pifk3sgsy7mck11p32vi48h9wzqnafyq3n55d"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provides various UUID generating functions")
    (description
      "Documentation at https://melpa.org/#/uuidgen")
    (license #f)))

(define-public emacs-v-mode
  (package
    (name "emacs-v-mode")
    (version "20211015.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/v-mode.git")
               (commit
                 "a5f39031a3391d0044c716425eb28645af51c79c")))
        (sha256
          (base32
            "1cxnwhwlrngba2wdll6vnr6ca08dkhsjrswj3bwilgb0m5bih7qi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/v-mode")
    (synopsis
      "A major mode for the V programming language")
    (description
      "Documentation at https://melpa.org/#/v-mode")
    (license #f)))

(define-public emacs-v2ex-mode
  (package
    (name "emacs-v2ex-mode")
    (version "20160720.345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aborn/v2ex-mode.git")
               (commit
                 "b7d19bb594b43ea3824a6f215dd1e5d1d4c0e8ad")))
        (sha256
          (base32
            "0hhj5xfm7mp3ajrbj9ai5p2d9akaqkj89rmqmg1vpyfp3x2f4h2k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/aborn/v2ex-mode")
    (synopsis
      "Major mode for visit http://v2ex.com/ site.")
    (description
      "Documentation at https://melpa.org/#/v2ex-mode")
    (license #f)))

(define-public emacs-vagrant-tramp
  (package
    (name "emacs-vagrant-tramp")
    (version "20210217.704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dougm/vagrant-tramp.git")
               (commit
                 "5f00b42a0c023c461cef7af4de7652d90c788b4d")))
        (sha256
          (base32
            "1mshxcbwdjs2fs7lzqhs3pqbmdmy2fyzkf9b6r8rsxqlisa4x6sn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("*.el" "bin")))
    (home-page
      "https://github.com/dougm/vagrant-tramp")
    (synopsis "Vagrant method for TRAMP")
    (description
      "Documentation at https://melpa.org/#/vagrant-tramp")
    (license #f)))

(define-public emacs-vala-mode
  (package
    (name "emacs-vala-mode")
    (version "20201218.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rrthomas/vala-mode.git")
               (commit
                 "d696a8177e94c81ea557ad364a3b3dcc3abbc50f")))
        (sha256
          (base32
            "0g5pdq757z9d8rk489n5ilhqipdc4i4sfkjwwrxyvgjlapjc04c0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Vala mode derived mode")
    (description
      "Documentation at https://melpa.org/#/vala-mode")
    (license #f)))

(define-public emacs-vc-auto-commit
  (package
    (name "emacs-vc-auto-commit")
    (version "20210216.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/vc-auto-commit.git")
               (commit
                 "56f478016a541b395092a9d3cdc0da84a37b30a1")))
        (sha256
          (base32
            "1aw5j6akrkzr4pgf10scbfqr9axny3pf3k7yslg7g5ss1fd71afl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/thisirs/vc-auto-commit.git")
    (synopsis
      "Auto-committing feature for your repository")
    (description
      "Documentation at https://melpa.org/#/vc-auto-commit")
    (license #f)))

(define-public emacs-vc-check-status
  (package
    (name "emacs-vc-check-status")
    (version "20210216.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/vc-check-status.git")
               (commit
                 "d95ef8f0799cd3dd83726ffa9b01b076f378ce34")))
        (sha256
          (base32
            "10sr9qxfx64f7a2kj93vi7lmm1pdj6qf81ci0ykkmrffmjdlf846"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/vc-check-status")
    (synopsis
      "Warn you when quitting emacs and leaving repo dirty.")
    (description
      "Documentation at https://melpa.org/#/vc-check-status")
    (license #f)))

(define-public emacs-vdiff
  (package
    (name "emacs-vdiff")
    (version "20210426.155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-vdiff.git")
               (commit
                 "84b8243d9f5d8082b05794dbc998d43dbdd7676a")))
        (sha256
          (base32
            "0lv9d9g8lnc3rzqi4v9iqr1ck5df8d52yh81cxzy7x2375b2mfgm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page
      "https://github.com/justbur/emacs-vdiff")
    (synopsis "A diff tool similar to  vimdiff")
    (description
      "Documentation at https://melpa.org/#/vdiff")
    (license #f)))

(define-public emacs-vdm-comint
  (package
    (name "emacs-vdm-comint")
    (version "20181127.2023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vdm-mode))
    (arguments '(#:files ("vdm-comint.el")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis "REPL support for vdm-mode")
    (description
      "Documentation at https://melpa.org/#/vdm-comint")
    (license #f)))

(define-public emacs-vdm-snippets
  (package
    (name "emacs-vdm-snippets")
    (version "20190313.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("vdm-snippets.el" "snippets")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis "YASnippets for VDM mode")
    (description
      "Documentation at https://melpa.org/#/vdm-snippets")
    (license #f)))

(define-public emacs-verify-url
  (package
    (name "emacs-verify-url")
    (version "20160426.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/verify-url.git")
               (commit
                 "d6f3623cda8cd526a2d198619b137059cb1ba1ab")))
        (sha256
          (base32
            "1y6vjw5qzaxr37spg5d4nxffmhiipzsrd7mvh8bs3jcfrsg3080n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/verify-url")
    (synopsis
      "find out invalid urls in the buffer or region")
    (description
      "Documentation at https://melpa.org/#/verify-url")
    (license #f)))

(define-public emacs-viking-mode
  (package
    (name "emacs-viking-mode")
    (version "20160705.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TLINDEN/viking-mode.git")
               (commit
                 "c76aa265d13ad91d6890d242e142d05e31f0340b")))
        (sha256
          (base32
            "1944p3kbskzj4d9w9prbi7z59lrn087v3gphbhwjplz6mvwbl8g6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tlinden/viking-mode")
    (synopsis "kill first, ask later")
    (description
      "Documentation at https://melpa.org/#/viking-mode")
    (license #f)))

(define-public emacs-vimrc-mode
  (package
    (name "emacs-vimrc-mode")
    (version "20181116.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mcandre/vimrc-mode.git")
               (commit
                 "13bc150a870d5d4a95f1111e4740e2b22813c30e")))
        (sha256
          (base32
            "0026dqs3hwygk2k2xfra90w5sfnxrfj7l69jz7sq5glavbf340pk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mcandre/vimrc-mode")
    (synopsis "Major mode for vimrc files")
    (description
      "Documentation at https://melpa.org/#/vimrc-mode")
    (license #f)))

(define-public emacs-visual-regexp
  (package
    (name "emacs-visual-regexp")
    (version "20210502.2019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/visual-regexp.el.git")
               (commit
                 "48457d42a5e0fe10fa3a9c15854f1f127ade09b5")))
        (sha256
          (base32
            "1z2cz6f8ymzrb7fdmw6824y7n5y7rmac5ljl03a6csdhp1yz5c2z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/benma/visual-regexp.el/")
    (synopsis
      "A regexp/replace command for Emacs with interactive visual feedback")
    (description
      "Documentation at https://melpa.org/#/visual-regexp")
    (license #f)))

(define-public emacs-visual-regexp-steroids
  (package
    (name "emacs-visual-regexp-steroids")
    (version "20170222.253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/visual-regexp-steroids.el.git")
               (commit
                 "a6420b25ec0fbba43bf57875827092e1196d8a9e")))
        (sha256
          (base32
            "1isqa4ck6pm4ykcrkr0g1qj8664jkpcsrq0f8dlb0sksns2dqkwj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-visual-regexp))
    (arguments
      '(#:files
        ("visual-regexp-steroids.el" "regexp.py")))
    (home-page
      "https://github.com/benma/visual-regexp-steroids.el/")
    (synopsis
      "Extends visual-regexp to support other regexp engines")
    (description
      "Documentation at https://melpa.org/#/visual-regexp-steroids")
    (license #f)))

(define-public emacs-vmd-mode
  (package
    (name "emacs-vmd-mode")
    (version "20210524.27")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blak3mill3r/vmd-mode.git")
               (commit
                 "b2bdf2ab54f8fc37780e6b473e4ad69c0e9ff4a6")))
        (sha256
          (base32
            "0wraiy5v0h1j4i31fr1b83k613c01pajq2436f93r485c2529pzp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/blak3mill3r/vmd-mode")
    (synopsis
      "Fast Github-flavored Markdown preview using a vmd subprocess.")
    (description
      "Documentation at https://melpa.org/#/vmd-mode")
    (license #f)))

(define-public emacs-vs-light-theme
  (package
    (name "emacs-vs-light-theme")
    (version "20210627.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/vs-light-theme.git")
               (commit
                 "1211f09ec83f3f375b2e38e4d704bd102bf3f6e3")))
        (sha256
          (base32
            "18ciz8rvx5n4hqqbr4y7vjkjzyq8dc2393yxfi6rhp3hkdld043p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-vs/vs-light-theme")
    (synopsis "Visual Studio IDE light theme")
    (description
      "Documentation at https://melpa.org/#/vs-light-theme")
    (license #f)))

(define-public emacs-vscdark-theme
  (package
    (name "emacs-vscdark-theme")
    (version "20191212.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abelikoff/vscdark-theme.git")
               (commit
                 "8eba74059e8a9db974e4056ee024e52fe54da485")))
        (sha256
          (base32
            "01p5ys23m4zk5hniri55bcn8j7v6pd6ryi41qx20w29mramwzxl9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abelikoff/vscdark-theme")
    (synopsis "VS Code Dark+ like theme")
    (description
      "Documentation at https://melpa.org/#/vscdark-theme")
    (license #f)))

(define-public emacs-vterm
  (package
    (name "emacs-vterm")
    (version "20211209.58")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akermu/emacs-libvterm.git")
               (commit
                 "ed6e867cfab77c5a311a516d20af44f57526cfdc")))
        (sha256
          (base32
            "0mq2q7yj09812iklj49n8p3kfpk1l6az33hr2dyxyl5i2nqps0vs"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*"
         (:exclude
           ".dir-locals.el"
           ".gitignore"
           ".clang-format"
           ".travis.yml"))))
    (home-page
      "https://github.com/akermu/emacs-libvterm")
    (synopsis "Fully-featured terminal emulator")
    (description
      "Documentation at https://melpa.org/#/vterm")
    (license #f)))

(define-public emacs-vterm-toggle
  (package
    (name "emacs-vterm-toggle")
    (version "20210902.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/vterm-toggle.git")
               (commit
                 "ea0bfeaa200d9ed02b51bbbd83222657b02637e7")))
        (sha256
          (base32
            "0bwgzpf2wyzdj9smwys06zx4yha72pw50wzdh4zld45ph40pb6qw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vterm))
    (home-page
      "https://github.com/jixiuf/vterm-toggle")
    (synopsis
      "Toggles between the vterm buffer and other buffers.")
    (description
      "Documentation at https://melpa.org/#/vterm-toggle")
    (license #f)))

(define-public emacs-vtm
  (package
    (name "emacs-vtm")
    (version "20200921.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/emacs-vterm-manager.git")
               (commit
                 "d770fd8cff7c24688199392ad93c01485c6a9569")))
        (sha256
          (base32
            "1xyhwlmh7mqdhr45y63qh5k71jsgh9sj08bvwsk7znh2zgzqy954"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/laishulu/emacs-vterm-manager")
    (synopsis
      "Manages vterm buffers with configuration files")
    (description
      "Documentation at https://melpa.org/#/vtm")
    (license #f)))

(define-public emacs-vue-mode
  (package
    (name "emacs-vue-mode")
    (version "20190415.231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/vue-mode.git")
               (commit
                 "031edd1f97db6e7d8d6c295c0e6d58dd128b9e71")))
        (sha256
          (base32
            "047l5nxw86dvls8an65mmqcy673n37pyli7s0d52yi07jk0lw1yx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-mmm-mode
            emacs-vue-html-mode
            emacs-ssass-mode
            emacs-edit-indirect))
    (home-page "unspecified")
    (synopsis
      "Major mode for vue component based on mmm-mode")
    (description
      "Documentation at https://melpa.org/#/vue-mode")
    (license #f)))

(define-public emacs-vulpea
  (package
    (name "emacs-vulpea")
    (version "20211118.734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/vulpea.git")
               (commit
                 "398ca17f83ea59f54f61898fefdb55332cd3ba46")))
        (sha256
          (base32
            "0qa49s0nhqbh9bmxi1zglnx3yajqcdx8j7yiy23lxbya2fpl557i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-roam emacs-s))
    (home-page
      "https://github.com/d12frosted/vulpea")
    (synopsis
      "A collection of org-roam note-taking functions")
    (description
      "Documentation at https://melpa.org/#/vulpea")
    (license #f)))

(define-public emacs-vunit-mode
  (package
    (name "emacs-vunit-mode")
    (version "20211219.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/embed-me/vunit-mode.git")
               (commit
                 "fc62e1eeb4f6453de10ff6796c513dee85a83e9e")))
        (sha256
          (base32
            "07786gf8c10yb3dji312bzrfy3719sqzhbgk918kywq2a7blhv7d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page "https://github.com/embed-me")
    (synopsis "VUnit Runner Interface")
    (description
      "Documentation at https://melpa.org/#/vunit-mode")
    (license #f)))

(define-public emacs-wakib-keys
  (package
    (name "emacs-wakib-keys")
    (version "20211217.1406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/darkstego/wakib-keys.git")
               (commit
                 "cb65d5e32fae0da77118db492cd40b58585d5cf2")))
        (sha256
          (base32
            "0ai5kw8v3778h5ry9191xb7bcmqp3j92h800223aiclh3hrfdc3b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/darkstego/wakib-keys/")
    (synopsis "Minor Mode for Modern Keybindings")
    (description
      "Documentation at https://melpa.org/#/wakib-keys")
    (license #f)))

(define-public emacs-wand
  (package
    (name "emacs-wand")
    (version "20210511.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmpitg/wand.git")
               (commit
                 "08c3d9156517a31dd98ea64bfc269fae730b643c")))
        (sha256
          (base32
            "18xgi1anficjl6cnhhv197zbrnb0p63pnj8gshvixb6fr4ybw8k0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/cmpitg/wand")
    (synopsis
      "Magic wand for Emacs - Select and execute")
    (description
      "Documentation at https://melpa.org/#/wand")
    (license #f)))

(define-public emacs-warm-night-theme
  (package
    (name "emacs-warm-night-theme")
    (version "20161101.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/warm-night-theme.git")
               (commit
                 "020f084d23409b5035150508ba6e57c2509edd64")))
        (sha256
          (base32
            "1jmjyx06p0cvqi1vlg5px2g965q9pgi3j61msxjf5skzw53vlc88"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with a dark background.")
    (description
      "Documentation at https://melpa.org/#/warm-night-theme")
    (license #f)))

(define-public emacs-wc-goal-mode
  (package
    (name "emacs-wc-goal-mode")
    (version "20140829.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bnbeckwith/wc-goal-mode.git")
               (commit
                 "bf21ab9c5a449bcc20dd207a4915dcec218d2699")))
        (sha256
          (base32
            "0p7j4hvcxfyjf0na9s3xv29dvmwq82s56lincfasd0ydcpz4fbwc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bnbeckwith/wc-goal-mode")
    (synopsis
      "Running word count with goals (minor mode)")
    (description
      "Documentation at https://melpa.org/#/wc-goal-mode")
    (license #f)))

(define-public emacs-webkit-color-picker
  (package
    (name "emacs-webkit-color-picker")
    (version "20180325.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/emacs-webkit-color-picker.git")
               (commit
                 "765cac80144cad4bc0bf59025ea0199f0486f737")))
        (sha256
          (base32
            "0a6nirdn1l7cymjycbns38ja9an1z4l5lwjk5h428aly3pmkvdqj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (arguments
      '(#:files (:defaults "color-picker.html")))
    (home-page
      "https://github.com/osener/emacs-webkit-color-picker")
    (synopsis
      "Insert and adjust colors using Webkit Widgets")
    (description
      "Documentation at https://melpa.org/#/webkit-color-picker")
    (license #f)))

(define-public emacs-weblogger
  (package
    (name "emacs-weblogger")
    (version "20110926.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/weblogger-el.git")
               (commit
                 "b3dd4aead9d3a87e6d85e7fef4f4f3bd40d87b53")))
        (sha256
          (base32
            "03dkabszk6ya3vaps1ap16psk5bbar8zd5ipn1lmyzsbd3hwm8mj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xml-rpc))
    (home-page "http://launchpad.net/weblogger-el")
    (synopsis "Weblog maintenance via XML-RPC APIs")
    (description
      "Documentation at https://melpa.org/#/weblogger")
    (license #f)))

(define-public emacs-weibo
  (package
    (name "emacs-weibo")
    (version "20150307.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/austin-----/weibo.emacs.git")
               (commit
                 "a8abb50b7602fe15fe2bc6400ac29780e956b390")))
        (sha256
          (base32
            "0hc5iyjpcik996ns84akrl28scndmn0gd1zfdf1nnqq6n2m5zvgh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/austin-----/weibo.emacs")
    (synopsis "Weibo client for Emacs")
    (description
      "Documentation at https://melpa.org/#/weibo")
    (license #f)))

(define-public emacs-wgrep-helm
  (package
    (name "emacs-wgrep-helm")
    (version "20210322.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "f9687c28bbc2e84f87a479b6ce04407bb97cfb23")))
        (sha256
          (base32
            "090k2kznhdmzzd4hrs834mbr8kwady2ks1684kgzqjzvwhv36v6i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-helm.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el")
    (synopsis
      "Writable helm-grep-mode buffer and apply the changes to files")
    (description
      "Documentation at https://melpa.org/#/wgrep-helm")
    (license #f)))

(define-public emacs-which-key
  (package
    (name "emacs-which-key")
    (version "20211214.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-which-key.git")
               (commit
                 "5f19ec67f58585ab0b8fa713905243ea0de190e0")))
        (sha256
          (base32
            "1vixx1iph0vykkh9av5hwhr90jj59rl2y14acf5ivwnwx8m173qd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justbur/emacs-which-key")
    (synopsis
      "Display available keybindings in popup")
    (description
      "Documentation at https://melpa.org/#/which-key")
    (license #f)))

(define-public emacs-white-sand-theme
  (package
    (name "emacs-white-sand-theme")
    (version "20210131.813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/white-sand-theme.git")
               (commit
                 "729dd52cc1936250183d6761eed406c4be514a71")))
        (sha256
          (base32
            "0vlq6wywhc08z4ivyahpagcxbxfww6ipbmvgw4sgc8c6h3vb8v9s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/white-sand-theme")
    (license #f)))

(define-public emacs-whitespace-cleanup-mode
  (package
    (name "emacs-whitespace-cleanup-mode")
    (version "20210510.533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/whitespace-cleanup-mode.git")
               (commit
                 "b108b73ddf8f7e747d5a20a681560171e02ad037")))
        (sha256
          (base32
            "13il7yi6j0cd995xzadbilhg50zcvzbpcqvivh9r1qbqq3q5aw1y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/whitespace-cleanup-mode")
    (synopsis
      "Intelligently call whitespace-cleanup on save")
    (description
      "Documentation at https://melpa.org/#/whitespace-cleanup-mode")
    (license #f)))

(define-public emacs-whizzml-mode
  (package
    (name "emacs-whizzml-mode")
    (version "20201013.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whizzml/whizzml-mode.git")
               (commit
                 "3dce3be0c32b9b2d259e462b4b27c530af47466a")))
        (sha256
          (base32
            "00fv8s66iwahjcdi6a45jpr9fhwjfpzv9qnfr6m8pwlkzv0caxkr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Programming mode for editing WhizzML files")
    (description
      "Documentation at https://melpa.org/#/whizzml-mode")
    (license #f)))

(define-public emacs-whole-line-or-region
  (package
    (name "emacs-whole-line-or-region")
    (version "20201214.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/whole-line-or-region.git")
               (commit
                 "3c1a55103e52c7a3010ee0043af22484d23a441e")))
        (sha256
          (base32
            "0bkfx18jpy8b91yq917va5x2mkrzqlyi6a38bi90zfqhxz5h69g4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/whole-line-or-region")
    (synopsis
      "Operate on current line if region undefined")
    (description
      "Documentation at https://melpa.org/#/whole-line-or-region")
    (license #f)))

(define-public emacs-widget-mvc
  (package
    (name "emacs-widget-mvc")
    (version "20150102.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-widget-mvc.git")
               (commit
                 "ff5a85880df7b87f9f480fe3c28438a0712b7b87")))
        (sha256
          (base32
            "1s0srhklmkmj3lfs8vr1dqi3s48z7fwx9mxqxckk5njld317hqg7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "MVC framework for the emacs widgets")
    (description
      "Documentation at https://melpa.org/#/widget-mvc")
    (license #f)))

(define-public emacs-wikinforg
  (package
    (name "emacs-wikinforg")
    (version "20211210.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/progfolio/wikinforg.git")
               (commit
                 "62842806fee863eb43c3015c3d86f5a7f0bf858f")))
        (sha256
          (base32
            "1rzxswfzg8lpwn1r7lq08rz7mrbrs5vr587phh60l26qpz6960c2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wikinfo))
    (home-page
      "https://github.com/progfolio/wikinforg")
    (synopsis "Org-mode wikinfo integration")
    (description
      "Documentation at https://melpa.org/#/wikinforg")
    (license #f)))

(define-public emacs-window-layout
  (package
    (name "emacs-window-layout")
    (version "20170215.33")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-window-layout.git")
               (commit
                 "cd2e4f967b610c2bbef53182829e47250d027056")))
        (sha256
          (base32
            "0wgqi8r844lbx52fn6az8c1n8m681rp6dkfzd54wmdk1ka7zmvv6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("window-layout.el")))
    (home-page "unspecified")
    (synopsis "window layout manager")
    (description
      "Documentation at https://melpa.org/#/window-layout")
    (license #f)))

(define-public emacs-wispjs-mode
  (package
    (name "emacs-wispjs-mode")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/wispjs-mode.git")
               (commit
                 "60f9f5fd9d1556e2d008939f67eb1b1d0f325fa8")))
        (sha256
          (base32
            "1hhd8ixb2wr06vrd1kw0cd5jh08zm86h2clbvzv9wmqpawwxfm5f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "https://github.com/krisajenkins/wispjs-mode")
    (synopsis "Major mode for Wisp code.")
    (description
      "Documentation at https://melpa.org/#/wispjs-mode")
    (license #f)))

(define-public emacs-with-editor
  (package
    (name "emacs-with-editor")
    (version "20211218.2011")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/with-editor.git")
               (commit
                 "53a6b8ad8a6aabea3749366fb11f12a7dabcb11f")))
        (sha256
          (base32
            "1xb9zdlqswkd5qijlmzmhs8n5f92s84c5ihyfa81x3y5pi1c3k9a"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("lisp/with-editor.el" "docs/with-editor.texi")))
    (home-page
      "https://github.com/magit/with-editor")
    (synopsis "Use the Emacsclient as $EDITOR")
    (description
      "Documentation at https://melpa.org/#/with-editor")
    (license #f)))

(define-public emacs-with-emacs
  (package
    (name "emacs-with-emacs")
    (version "20200210.1543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/with-emacs.el.git")
               (commit
                 "9f99bec56f87e53deb9f33b364eda77677a17eb9")))
        (sha256
          (base32
            "0ay860skpnbv6a8xid0hhz9vx33ks2vkdicvpm3a4qngp932jvnp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/twlz0ne/with-emacs.el")
    (synopsis
      "Evaluate Emacs Lisp expressions in a separate Emacs process")
    (description
      "Documentation at https://melpa.org/#/with-emacs")
    (license #f)))

(define-public emacs-with-shell-interpreter
  (package
    (name "emacs-with-shell-interpreter")
    (version "20200828.1217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/with-shell-interpreter.git")
               (commit
                 "3fd1ea892e44f7fe6f86df2b5c0a0a1e0f3913fa")))
        (sha256
          (base32
            "1ifl8dww1pzqpbr18b1vq5yc5y4hwgrna6g1z9p6p9rgl7r0p5xz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/p3r7/with-shell-interpreter")
    (synopsis "Helper for shell command APIs")
    (description
      "Documentation at https://melpa.org/#/with-shell-interpreter")
    (license #f)))

(define-public emacs-with-venv
  (package
    (name "emacs-with-venv")
    (version "20210925.2336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/with-venv-el.git")
               (commit
                 "773192d892ec0341e023d8b5e80639f8eb79f2a5")))
        (sha256
          (base32
            "0dh412qj2v4mz6mcjgkiacdcl8pbh2lgyinm70j3dr7qdsbadw97"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/with-venv-el")
    (synopsis
      "Execute with Python virtual environment activated")
    (description
      "Documentation at https://melpa.org/#/with-venv")
    (license #f)))

(define-public emacs-wn-mode
  (package
    (name "emacs-wn-mode")
    (version "20151110.552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/luismbo/wn-mode.git")
               (commit
                 "f05c3151523e529af5a0a3fa8c948b61fb369f6e")))
        (sha256
          (base32
            "12rfpkyjkhikjh0mihhp5h5pzbm4br68nwf8k1ja9djl77vfzv36"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/luismbo/wn-mode")
    (synopsis "numeric window switching shortcuts")
    (description
      "Documentation at https://melpa.org/#/wn-mode")
    (license #f)))

(define-public emacs-wonderland
  (package
    (name "emacs-wonderland")
    (version "20130913.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kurisuwhyte/emacs-wonderland.git")
               (commit
                 "89d274ad694b0e748efdac23ccd60b7d8b73d7c6")))
        (sha256
          (base32
            "0hacc8ha5w44cgwkipa3nwh1q5gdrcxhjkmw2gnvb1l01crgnack"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-dash-functional
            emacs-multi))
    (arguments '(#:files ("source/*.el")))
    (home-page
      "http://github.com/kurisuwhyte/emacs-wonderland")
    (synopsis
      "declarative configuration for Emacsen")
    (description
      "Documentation at https://melpa.org/#/wonderland")
    (license #f)))

(define-public emacs-wordgen
  (package
    (name "emacs-wordgen")
    (version "20170803.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/wordgen.el.git")
               (commit
                 "aacad928ae99a953e034a831dfd0ebdf7d52ac1d")))
        (sha256
          (base32
            "06vbc9ycz1nbjwjkg99y3lj6jwb6lnwnmkqf09yr00jjrrfhfash"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/wordgen.el")
    (synopsis "Random word generator")
    (description
      "Documentation at https://melpa.org/#/wordgen")
    (license #f)))

(define-public emacs-wordnut
  (package
    (name "emacs-wordnut")
    (version "20180313.443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gromnitsky/wordnut.git")
               (commit
                 "feac531404041855312c1a046bde7ea18c674915")))
        (sha256
          (base32
            "1jl0b6g64a9w0q7bfvwha67vgws5xd15b7mkfyb5gkz3pymqhfxn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode interface to WordNet")
    (description
      "Documentation at https://melpa.org/#/wordnut")
    (license #f)))

(define-public emacs-wordsmith-mode
  (package
    (name "emacs-wordsmith-mode")
    (version "20210715.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/wordsmith-mode.git")
               (commit
                 "5d40ceaa2b8d41ab3634ca377ceb6a74deeb2287")))
        (sha256
          (base32
            "132l0i94nwrm676bpxw0wnr1drqwmapwv92mf4iyb209fr4hc2w2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Syntax analysis and NLP text-processing in Emacs (OSX-only)")
    (description
      "Documentation at https://melpa.org/#/wordsmith-mode")
    (license #f)))

(define-public emacs-workgroups
  (package
    (name "emacs-workgroups")
    (version "20110726.1641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tlh/workgroups.el.git")
               (commit
                 "9572b3492ee09054dc329f64ed846c962b395e39")))
        (sha256
          (base32
            "0q32z54qafj8ap3ybx82i3fm1msmzwvpxgmkaglzhi8nccgzbn2n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "workgroups for windows (for Emacs)")
    (description
      "Documentation at https://melpa.org/#/workgroups")
    (license #f)))

(define-public emacs-workgroups2
  (package
    (name "emacs-workgroups2")
    (version "20211222.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashinin/workgroups2.git")
               (commit
                 "925f8b90d6b0b1b3e45686e0bbfc7096d8485b44")))
        (sha256
          (base32
            "0if19dxn8c9q8c05x1qzjillv55zsc8rbm7n4qrb0q11zpvyaaam"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*.el")))
    (home-page
      "https://github.com/pashinin/workgroups2")
    (synopsis "New workspaces for Emacs")
    (description
      "Documentation at https://melpa.org/#/workgroups2")
    (license #f)))

(define-public emacs-world-time-mode
  (package
    (name "emacs-world-time-mode")
    (version "20140627.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-world-time-mode.git")
               (commit
                 "ce7a3b45c87eb24cfe61eee453175d64f741d7cc")))
        (sha256
          (base32
            "0i00xm4rynbp2v3gm6h46ajgj8h8nxnsjh6db1659b0hbpnah0ji"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "show whole days of world-time diffs")
    (description
      "Documentation at https://melpa.org/#/world-time-mode")
    (license #f)))

(define-public emacs-writegood-mode
  (package
    (name "emacs-writegood-mode")
    (version "20210418.110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bnbeckwith/writegood-mode.git")
               (commit
                 "ed42d918d98826ad88928b7af9f2597502afc6b0")))
        (sha256
          (base32
            "1nwngnddlkcvix7qx39fadab7hqzg8snb0k63kwpr8v57lyrm48z"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bnbeckwith/writegood-mode")
    (synopsis "Polish up poor writing on the fly")
    (description
      "Documentation at https://melpa.org/#/writegood-mode")
    (license #f)))

(define-public emacs-writeroom-mode
  (package
    (name "emacs-writeroom-mode")
    (version "20210927.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/writeroom-mode.git")
               (commit
                 "eac1da790f316f357ed76ed67fbb790d6a4d126a")))
        (sha256
          (base32
            "01yrz25aymzwkcj5yzs8pmswsg0jgzbynbp9hmjnf3sqlgmang62"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-visual-fill-column))
    (home-page
      "https://github.com/joostkremers/writeroom-mode")
    (synopsis
      "Minor mode for distraction-free writing")
    (description
      "Documentation at https://melpa.org/#/writeroom-mode")
    (license #f)))

(define-public emacs-wsd-mode
  (package
    (name "emacs-wsd-mode")
    (version "20191031.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/josteink/wsd-mode.git")
               (commit
                 "53330a2a43c4875f8682457df1a869a4c9028660")))
        (sha256
          (base32
            "1swwaphlbvpalk7mgdgkaal8ffivhxil5fhfkxzazqnkl4i5zbmy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/josteink/wsd-mode")
    (synopsis
      "Emacs major-mode for www.websequencediagrams.com")
    (description
      "Documentation at https://melpa.org/#/wsd-mode")
    (license #f)))

(define-public emacs-wucuo
  (package
    (name "emacs-wucuo")
    (version "20211201.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/wucuo.git")
               (commit
                 "09fc58a02621b6c9615f8289c457e30ca6f63bcb")))
        (sha256
          (base32
            "15jva7qp723fpwv6f24300h8knmxrlsjb2icg9rzr0994g9f36qs"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/redguardtoo/wucuo")
    (synopsis
      "Fastest solution to spell check camel case code or plain text")
    (description
      "Documentation at https://melpa.org/#/wucuo")
    (license #f)))

(define-public emacs-www-synonyms
  (package
    (name "emacs-www-synonyms")
    (version "20170128.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spebern/www-synonyms.git")
               (commit
                 "7e37ea35064ff31c9945f0198a653647d408c936")))
        (sha256
          (base32
            "0l4fvq5zdzqvlwxqgqbfx9x0aimvk4x3la9yz9gw3vvj1rwf340i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis "insert synonym for a word")
    (description
      "Documentation at https://melpa.org/#/www-synonyms")
    (license #f)))

(define-public emacs-x509-mode
  (package
    (name "emacs-x509-mode")
    (version "20210407.627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jobbflykt/x509-mode.git")
               (commit
                 "470769edba111aed8eabce58a3f2a02da0767624")))
        (sha256
          (base32
            "19xvfzmsnc271a2zhjbnspb269c5mnps4l94ifrdlqn7y886qr4r"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/jobbflykt/x509-mode")
    (synopsis
      "View certificates, CRLs and keys using OpenSSL.")
    (description
      "Documentation at https://melpa.org/#/x509-mode")
    (license #f)))

(define-public emacs-xcode-project
  (package
    (name "emacs-xcode-project")
    (version "20200810.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nhojb/xcode-project.git")
               (commit
                 "11743f0a2212c840a108e1b905b1f20afcff8156")))
        (sha256
          (base32
            "1vj1xshdsff5xrgmp6c46q2ipglq4wy25mq51rnhv57f0r1wq62n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nhojb/xcode-project.git")
    (synopsis
      "A package for reading Xcode project files.")
    (description
      "Documentation at https://melpa.org/#/xcode-project")
    (license #f)))

(define-public emacs-xml-quotes
  (package
    (name "emacs-xml-quotes")
    (version "20200301.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndw/xml-quotes.git")
               (commit
                 "8fc21e43b45f9a50b24642412f05afcc3a316a1f")))
        (sha256
          (base32
            "1czz6zgbnvwf3bn6k5iczs02rjx6frjnc0d78gcxhvsnbsvv60iw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ndw/xml-quotes")
    (synopsis "read quotations from an XML document")
    (description
      "Documentation at https://melpa.org/#/xml-quotes")
    (license #f)))

(define-public emacs-xml-rpc
  (package
    (name "emacs-xml-rpc")
    (version "20200907.42")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xml-rpc-el/xml-rpc-el.git")
               (commit
                 "8020ccd176986d8e49e0bb5dd9f4e756cf12eafc")))
        (sha256
          (base32
            "07vgwnk96i1vpsv2glg6kbkamjcs72xiznsa6xk7nl0nranzr3hd"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/xml-rpc-el/xml-rpc-el")
    (synopsis
      "An elisp implementation of clientside XML-RPC")
    (description
      "Documentation at https://melpa.org/#/xml-rpc")
    (license #f)))

(define-public emacs-xmlgen
  (package
    (name "emacs-xmlgen")
    (version "20170411.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philjackson/xmlgen.git")
               (commit
                 "dba66681f0c5e621a9e70e8afb34903c9ffe93c4")))
        (sha256
          (base32
            "096i29v0badx0a6339h9ckdz78zj59gbjdp7vj7vhkq9d830392s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A DSL for generating XML.")
    (description
      "Documentation at https://melpa.org/#/xmlgen")
    (license #f)))

(define-public emacs-xterm-keybinder
  (package
    (name "emacs-xterm-keybinder")
    (version "20160523.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/xterm-keybinder-el.git")
               (commit
                 "b29c4f700b0fa0c9f627f6725b36462b8fab06d6")))
        (sha256
          (base32
            "0ya7c73acwp29glwjd1hf19h8jij2afwmwq7a3h91qx5zdn09wvh"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el" "xterm-option" "emacs-urxvt-client")))
    (home-page "unspecified")
    (synopsis
      "Let you extra keybinds in xterm/urxvt")
    (description
      "Documentation at https://melpa.org/#/xterm-keybinder")
    (license #f)))

(define-public emacs-xtest
  (package
    (name "emacs-xtest")
    (version "20141214.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/promethial/xtest.git")
               (commit
                 "2c2bdf32667506dd9ddf6eb311832add616bdf1c")))
        (sha256
          (base32
            "09mn8s7gzzxgs7kskld8l68zjrcgnvml3fqj69wrfq7b1g62hhxy"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/promethial/xtest")
    (synopsis "Simple Testing with Emacs & ERT")
    (description
      "Documentation at https://melpa.org/#/xtest")
    (license #f)))

(define-public emacs-xwidgete
  (package
    (name "emacs-xwidgete")
    (version "20171118.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/xwidgete.git")
               (commit
                 "e4e8410fe32176df85b46234717824519443fb04")))
        (sha256
          (base32
            "04j4xwcdxlnrwxs89605zmwxszbi2j0z67v80651pshgnhj5p19i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tuhdo/xwidgete")
    (synopsis
      "enhances usability of current xwidget browser")
    (description
      "Documentation at https://melpa.org/#/xwidgete")
    (license #f)))

(define-public emacs-xwidgets-reuse
  (package
    (name "emacs-xwidgets-reuse")
    (version "20200817.147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lordpretzel/xwidgets-reuse.git")
               (commit
                 "5d56472dda53e43e0a11edcd373b44c0dbab47ce")))
        (sha256
          (base32
            "1b85x1yhgip4g3kv1sdwf3zmi91w6m5xbmm6zzl84w67wqfmnqlz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("xwidgets-reuse.el")))
    (home-page
      "https://github.com/lordpretzel/xwidgets-reuse")
    (synopsis
      "Reuse xwidgets sessions to reduce resource consumption")
    (description
      "Documentation at https://melpa.org/#/xwidgets-reuse")
    (license #f)))

(define-public emacs-xwwp-follow-link-ivy
  (package
    (name "emacs-xwwp-follow-link-ivy")
    (version "20200917.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/xwwp.git")
               (commit
                 "f67e070a6e1b233e60274deb717274b000923231")))
        (sha256
          (base32
            "1ikhgi3gc86w7y3cjmw875c8ccsmj22yn1zm3abprdzbjqlyzhhg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xwwp))
    (arguments
      '(#:files ("xwwp-follow-link-ivy.el")))
    (home-page "https://github.com/canatella/xwwp")
    (synopsis
      "Link navigation in `xwidget-webkit' sessions using `ivy'")
    (description
      "Documentation at https://melpa.org/#/xwwp-follow-link-ivy")
    (license #f)))

(define-public emacs-yabin
  (package
    (name "emacs-yabin")
    (version "20140206.351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d5884/yabin.git")
               (commit
                 "db8c404507560ef9147fcce2b94cd706fbfa03b5")))
        (sha256
          (base32
            "0f6pvwzhncycw8gnjy24h6q1qglfgvdjfs5dzqx9s43j3yg63lzm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Yet Another Bignum package (A thin wrapper of calc.el).")
    (description
      "Documentation at https://melpa.org/#/yabin")
    (license #f)))

(define-public emacs-yahtzee
  (package
    (name "emacs-yahtzee")
    (version "20200511.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drdv/yahtzee.git")
               (commit
                 "96068216a4f0c4894bf780cd36164fe840cf81d5")))
        (sha256
          (base32
            "11wrvmnr74pqga8a00gd4zskan8wkgah9fyn0bwgp0x4qx4xni17"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/drdv/yahtzee")
    (synopsis "The yahtzee game")
    (description
      "Documentation at https://melpa.org/#/yahtzee")
    (license #f)))

(define-public emacs-yaml
  (package
    (name "emacs-yaml")
    (version "20210730.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zkry/yaml.el.git")
               (commit
                 "84b88c9ed178af16da18b230c1f61c57cefedf28")))
        (sha256
          (base32
            "13fjxrr7iyfagbm21p5is5jw1zv56ns2mnac145v8lqli6mrr5gx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zkry/yaml.el")
    (synopsis "YAML parser for Elisp")
    (description
      "Documentation at https://melpa.org/#/yaml")
    (license #f)))

(define-public emacs-yascroll
  (package
    (name "emacs-yascroll")
    (version "20210625.803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/yascroll.git")
               (commit
                 "0d7556d0936e0223003208003470a2fa28f72150")))
        (sha256
          (base32
            "12lz73grpvnjgki93q9aywa5p6ddw67a73dcaryv186j3maq442w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/yascroll")
    (synopsis "Yet Another Scroll Bar Mode")
    (description
      "Documentation at https://melpa.org/#/yascroll")
    (license #f)))

(define-public emacs-yasnippet
  (package
    (name "emacs-yasnippet")
    (version "20200604.246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/yasnippet.git")
               (commit
                 "5cbdbf0d2015540c59ed8ee0fcf4788effdf75b6")))
        (sha256
          (base32
            "1cp1sgmfc8pgcy24l77aam833710mjp2y3m8l8c90677wxqr44vl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("yasnippet.el" "snippets")))
    (home-page
      "http://github.com/joaotavora/yasnippet")
    (synopsis
      "Yet another snippet extension for Emacs")
    (description
      "Documentation at https://melpa.org/#/yasnippet")
    (license #f)))

(define-public emacs-yatex
  (package
    (name "emacs-yatex")
    (version "20211203.2212")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/yatex-"
               version
               ".tar"))
        (sha256
          (base32
            "01gdayh0kaj0sc4g3ghchwxbi4i4pw946fgmr85cggrw3zs2i1lm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Yet Another tex-mode for emacs //野鳥//")
    (description
      "Documentation at https://melpa.org/#/yatex")
    (license #f)))

(define-public emacs-yaxception
  (package
    (name "emacs-yaxception")
    (version "20150105.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/yaxception.git")
               (commit
                 "4e94cf3e0b9b5631b0e90eb4b7de597ee7185875")))
        (sha256
          (base32
            "0nqyn1b01v1qxv7rcf46qypca61lmpm8d7kqv63jazw3n05qdnj8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/aki2o/yaxception")
    (synopsis
      "Provide framework about exception like Java for Elisp")
    (description
      "Documentation at https://melpa.org/#/yaxception")
    (license #f)))

(define-public emacs-yoficator
  (package
    (name "emacs-yoficator")
    (version "20190509.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/alx.k/yoficator.git")
               (commit
                 "fa914f9648515bca54b5e558ca57d2b65fa57491")))
        (sha256
          (base32
            "0mgkwjprcj47zn8kd3ppqnbnmnn00cvnbs0r0h5951966vshh13f"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "yo.txt")))
    (home-page
      "https://gitlab.com/link2xt/yoficator")
    (synopsis "Interactively yoficate Russian texts")
    (description
      "Documentation at https://melpa.org/#/yoficator")
    (license #f)))

(define-public emacs-z3-mode
  (package
    (name "emacs-z3-mode")
    (version "20211116.138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zv/z3-mode.git")
               (commit
                 "0356cbe1e1e2b780ba0ddb4aaa055fa246a67931")))
        (sha256
          (base32
            "0jlnxxzh9p7285m16w33l5529iglg5cihs6gqwnb6y34wpzwyar6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "https://github.com/zv/z3-mode")
    (synopsis
      "A z3/SMTLIBv2 interactive development environment")
    (description
      "Documentation at https://melpa.org/#/z3-mode")
    (license #f)))

(define-public emacs-zen-mode
  (package
    (name "emacs-zen-mode")
    (version "20200609.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenlang/zen-mode.git")
               (commit
                 "c1b1806358f3cce6c04b30699987d82dc7d42559")))
        (sha256
          (base32
            "1ikny9lxvg8whcl2x0gmr31fdv93vwf53niqr11cx93bfsvs4a9z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zenlang/zen-mode")
    (synopsis
      "A major mode for the Zen programming language")
    (description
      "Documentation at https://melpa.org/#/zen-mode")
    (license #f)))

(define-public emacs-zencoding-mode
  (package
    (name "emacs-zencoding-mode")
    (version "20140213.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rooney/zencoding.git")
               (commit
                 "58e42af182c98cb9941d27cd042d227fbf4e146c")))
        (sha256
          (base32
            "1y3wj15kfbgskl29glmba6lzq43rcm141p4i5s180aqcw7ydp5vr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rooney/zencoding")
    (synopsis
      "Unfold CSS-selector-like expressions to markup")
    (description
      "Documentation at https://melpa.org/#/zencoding-mode")
    (license #f)))

(define-public emacs-zenity-color-picker
  (package
    (name "emacs-zenity-color-picker")
    (version "20160302.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/Soft/zenity-color-picker.el")
               (commit
                 "4f4f46676a461ebc881487fb70c8c181e323db5e")))
        (sha256
          (base32
            "14i2k52qz77dv04w39fyp9hfq983fwa3803anqragk608xgwpf4s"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/Soft/zenity-color-picker.el")
    (synopsis
      "Insert and adjust colors using Zenity")
    (description
      "Documentation at https://melpa.org/#/zenity-color-picker")
    (license #f)))

(define-public emacs-zeno-theme
  (package
    (name "emacs-zeno-theme")
    (version "20211205.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenobht/zeno-theme.git")
               (commit
                 "70fa7b7442f24ea25eab538b5a22da690745fef5")))
        (sha256
          (base32
            "10v6yf9c5qdsxrp6rk1n1xkv4byyfkinsikskdb2apjg05cx2273"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jbharat/zeno-theme")
    (synopsis
      "A dark theme using different shades of blue")
    (description
      "Documentation at https://melpa.org/#/zeno-theme")
    (license #f)))

(define-public emacs-zetz-mode
  (package
    (name "emacs-zetz-mode")
    (version "20200823.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/zetz-mode.git")
               (commit
                 "04da33f4ffa9db5b3556f423276f4fd1db13ec67")))
        (sha256
          (base32
            "13xfz5lsx9irl6l9l3qvymh875nab4vmlx2m563kphqy18j1j332"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/zetz-mode")
    (synopsis
      "A major mode for the ZetZ programming language")
    (description
      "Documentation at https://melpa.org/#/zetz-mode")
    (license #f)))

(define-public emacs-zig-mode
  (package
    (name "emacs-zig-mode")
    (version "20211219.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ziglang/zig-mode.git")
               (commit
                 "9befa4a0d673770af07b150cf35cb46745ecc099")))
        (sha256
          (base32
            "1wfh932zsf1gnbxv60w3j9985ycrhzq1l3r8w5p1p4rydjnx1s9q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zig-lang/zig-mode")
    (synopsis
      "A major mode for the Zig programming language")
    (description
      "Documentation at https://melpa.org/#/zig-mode")
    (license #f)))

(define-public emacs-zombie
  (package
    (name "emacs-zombie")
    (version "20141222.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/zombie.git")
               (commit
                 "ff8cd1b4cdbb4b0b9b8fd1ec8f6fb93eba249345")))
        (sha256
          (base32
            "1gm3ly6czbw4vrxcslm50jy6nxf2qsl656cjwbyhw251wppn75cg"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "major mode for editing ZOMBIE programs")
    (description
      "Documentation at https://melpa.org/#/zombie")
    (license #f)))

(define-public emacs-zone-nyan
  (package
    (name "emacs-zone-nyan")
    (version "20210508.1642")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/zone-nyan-"
               version
               ".el"))
        (sha256
          (base32
            "04kqrfg6rp01vpjc9l28h7mw0z0ykl4dzqaj8px2xdvglx8lbdqx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-esxml))
    (home-page "https://depp.brause.cc/zone-nyan")
    (synopsis "Zone out with nyan cat")
    (description
      "Documentation at https://melpa.org/#/zone-nyan")
    (license #f)))

(define-public emacs-zone-rainbow
  (package
    (name "emacs-zone-rainbow")
    (version "20160120.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-rainbow.git")
               (commit
                 "2ba4f1a87c69c4712124ebf12c1f3ea171e1af36")))
        (sha256
          (base32
            "0w550l9im3mhxhja1b7cr9phdcbvx5lprw551lj0d1lv7qvjasz0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kawabata/zone-rainbow")
    (synopsis "Zone out with rainbow.")
    (description
      "Documentation at https://melpa.org/#/zone-rainbow")
    (license #f)))

(define-public emacs-zone-select
  (package
    (name "emacs-zone-select")
    (version "20160118.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-select.git")
               (commit
                 "bf30da12f1625fe6563448fccf3c506acad10af7")))
        (sha256
          (base32
            "17mrzf85ym0x5ih4l6sjdjlcmviabf8c8rpvpkd90gp9qxd8pyx1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/kawabata/zone-select")
    (synopsis "Select zone programs.")
    (description
      "Documentation at https://melpa.org/#/zone-select")
    (license #f)))

(define-public emacs-zone-sl
  (package
    (name "emacs-zone-sl")
    (version "20160201.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-sl.git")
               (commit
                 "7ec22e3661c6348382f9fc39a9d0063dbd2352ff")))
        (sha256
          (base32
            "0m1q45pza61j0fp8cxkgmds5fyjrk0nqpwhg8m91610m3pvyc3ap"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kawabata/zone-sl")
    (synopsis "Zone out with steam locomotives.")
    (description
      "Documentation at https://melpa.org/#/zone-sl")
    (license #f)))

(define-public emacs-zoom
  (package
    (name "emacs-zoom")
    (version "20201215.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyrus-and/zoom.git")
               (commit
                 "c7beef180bc4037404e2d56b9ab9b7c76d1713a0")))
        (sha256
          (base32
            "0vzrg5vfb4rnripdxlnl2gs6mm85ysiwnn8rclsaljrmk5xrp5ls"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cyrus-and/zoom")
    (synopsis
      "Fixed and automatic balanced window layout")
    (description
      "Documentation at https://melpa.org/#/zoom")
    (license #f)))

(define-public emacs-zoom-window
  (package
    (name "emacs-zoom-window")
    (version "20201205.1038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/zoom-window.git")
               (commit
                 "474ca4723517d95356145950b134652d5dc0c7f7")))
        (sha256
          (base32
            "0syr88kqzh27ap57v97prk2z0l9wkaysqf1263j7nn9pl4jswppd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-zoom-window")
    (synopsis "Zoom window like tmux")
    (description
      "Documentation at https://melpa.org/#/zoom-window")
    (license #f)))

(define-public emacs-zop-to-char
  (package
    (name "emacs-zop-to-char")
    (version "20160212.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/zop-to-char.git")
               (commit
                 "00152aa666354b27e56e20565f186b363afa0dce")))
        (sha256
          (base32
            "1s4adi9hyhxn7ynx195mgg10h817hxdmlzlp09633bj0llr1mjn3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/zop-to-char")
    (synopsis "A replacement of zap-to-char.")
    (description
      "Documentation at https://melpa.org/#/zop-to-char")
    (license #f)))

(define-public emacs-zotero
  (package
    (name "emacs-zotero")
    (version "20211008.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fvdbeek/emacs-zotero.git")
               (commit
                 "811bd1f14b38c3dde3f80cd8a13490c9900de888")))
        (sha256
          (base32
            "0gh04kbg109038xxcrzhjffqrfcxx7vbz0dz2idglcmbqpg7lzjq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-oauth emacs-s))
    (arguments '(#:files (:defaults "img")))
    (home-page
      "https://gitlab.com/fvdbeek/emacs-zotero")
    (synopsis "Library for the Zotero API")
    (description
      "Documentation at https://melpa.org/#/zotero")
    (license #f)))

(define-public emacs-zoutline
  (package
    (name "emacs-zoutline")
    (version "20210913.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/zoutline.git")
               (commit
                 "d678b0ea805dd18c18746455c70ea68e51422c1d")))
        (sha256
          (base32
            "134c9ibk920nnhmgnvkr97zwgxy7a41kqj14dkrzxmw9lhxnmz20"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/zoutline")
    (synopsis "Simple outline library.")
    (description
      "Documentation at https://melpa.org/#/zoutline")
    (license #f)))

(define-public emacs-zygospore
  (package
    (name "emacs-zygospore")
    (version "20140703.852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LouisKottmann/zygospore.el.git")
               (commit
                 "1af5ee663f5a7aa08d96a77cacff834dcdf55ea8")))
        (sha256
          (base32
            "0v73fgb0gf81vlihiicy32v6x86rr2hv0bxlpw7d3pk4ng1a0l3z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/louiskottmann/zygospore.el")
    (synopsis
      "reversible C-x 1 (delete-other-windows)")
    (description
      "Documentation at https://melpa.org/#/zygospore")
    (license #f)))

